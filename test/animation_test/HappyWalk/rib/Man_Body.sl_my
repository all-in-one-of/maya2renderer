#include <liquidAOVMacroDef.h>
//surface shader name: Man:Body
surface Man_Body
(
#ifdef USE_AOV_aov_ambient
		output varying color aov_ambient = 0;
#endif
#ifdef USE_AOV_aov_diffuse
		output varying color aov_diffuse = 0;
#endif
#ifdef USE_AOV_aov_specular
		output varying color aov_specular = 0;
#endif
#ifdef USE_AOV_aov_reflection
		output varying color aov_reflection = 0;
#endif
#ifdef USE_AOV_aov_rt_reflection
		output varying color aov_rt_reflection = 0;
#endif
#ifdef USE_AOV_aov_rt_reflection_alpha
		output varying float aov_rt_reflection_alpha = 0;
#endif
#ifdef USE_AOV_aov_env_reflection
		output varying color aov_env_reflection = 0;
#endif
#ifdef USE_AOV_aov_refraction
		output varying color aov_refraction = 0;
#endif
#ifdef USE_AOV_aov_shadow
		output varying float aov_shadow = 0;
#endif
#ifdef USE_AOV_aov_incandescence
		output varying color aov_incandescence = 0;
#endif
#ifdef USE_AOV_aov_translucence
		output varying color aov_translucence = 0;
#endif
#ifdef USE_AOV_aov_ambient_no_shadow
		output varying color aov_ambient_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_diffuse_no_shadow
		output varying color aov_diffuse_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_diffuse_intensity
		output varying color aov_diffuse_intensity = 0;
#endif
#ifdef USE_AOV_aov_diffuse_intensity_no_shadow
		output varying color aov_diffuse_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_key_lights_diffuse_intensity
		output varying color aov_key_lights_diffuse_intensity = 0;
#endif
#ifdef USE_AOV_aov_key_lights_diffuse_intensity_no_shadow
		output varying color aov_key_lights_diffuse_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_luminance_depth
		output varying color aov_luminance_depth = 0;
#endif
#ifdef USE_AOV_aov_specular_no_shadow
		output varying color aov_specular_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_specular_intensity
		output varying color aov_specular_intensity = 0;
#endif
#ifdef USE_AOV_aov_specular_intensity_no_shadow
		output varying color aov_specular_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_key_lights_specular_intensity
		output varying color aov_key_lights_specular_intensity = 0;
#endif
#ifdef USE_AOV_aov_key_lights_specular_intensity_no_shadow
		output varying color aov_key_lights_specular_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_color_no_shadow
		output varying color aov_color_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_surface_color
		output varying color aov_surface_color = 0;
#endif
#ifdef USE_AOV_aov_camera_space_normal
		output varying normal aov_camera_space_normal = 0;
#endif
#ifdef USE_AOV_aov_facing_ratio
		output varying float aov_facing_ratio = 0;
#endif

)
{



// define some extern variables which are used in 3delight shaders -----------------------------
 color __transparency = color (1,1,1);



// define the shaders --------------------------------------------------------------------------
#include "mib_amb_occlusion.h"
//shader name: Man:mib_amb_occlusion1
void Man_mib_amb_occlusion1 (
 output color o_outValue;
)
{
  float i_samples = float 32;
  color i_bright = color (0.60176,0.60176,0.60176);
  color i_dark = color (0,0,0);
  float i_spread = float 0.5;
  float i_max_distance = float 0;
  float i_reflective = float 0;
 {
 if(i_max_distance < 0.0001){//If it is zero, the entire scene is sampled
      i_max_distance = 1.0e37;
}

   maya_mib_amb_occlusion(i_samples,		
	i_bright,		
	i_dark,		
	i_spread,		
	i_max_distance,
	i_reflective,	
	o_outValue		
   );
 }
}

#include "lambert.h"
//shader name: Man:Body
void Man_Body (
 color ambientColor;
)
{
//Man:Body.ambientColor <-- Man:mib_amb_occlusion1.outValue
  color i_color = color (1,0.954197,0.837);
  float diffuse = float 0.8;
  color incandescence = color (0,0,0);
  float matteOpacityMode = float 2;
  float matteOpacity = float 1;
 uniform float refractions = float 0;
  float refractiveIndex = float 1;
 uniform float refractionLimit = float 6;
  float lightAbsorbance = float 0;
  float shadowAttenuation = float 0.5;
 normal normalCamera = N;
  color transparency = color (0,0,0);
  float translucence = float 0;
  float translucenceDepth = float 0.5;
  float translucenceFocus = float 0.5;
  color outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
   maya_lambert(						
	ambientColor,				
	i_color,					
	diffuse,					
	incandescence,				
	matteOpacityMode,			
	matteOpacity,				
	refractions,				
	refractiveIndex,			
	refractionLimit,			
	lightAbsorbance,			
	shadowAttenuation,			
	normalCamera,				
	transparency,				
	translucence,				
	translucenceDepth,			
	translucenceFocus,			
	outColor,					
	outTransparency			
   );
    Ci             = Os * outColor;
    Oi             = Os * ( 1.0 - outTransparency );
}




// call the shaders ----------------------------------------------------------------------------
 color Man_mib_amb_occlusion1_outValue;

 //Man:mib_amb_occlusion1
 Man_mib_amb_occlusion1(Man_mib_amb_occlusion1_outValue);
//input: 
//output:Man_mib_amb_occlusion1_outValue,

 //Man:Body
 Man_Body(Man_mib_amb_occlusion1_outValue);
//input: Man:mib_amb_occlusion1_outValue,
//output:

}
