>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::createFactory(elvishray)
  >1 RendererMgr::install()
  >1 RendererMgr::prologue()
    >2 Renderer::openLog()(but do nothing now)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim2Frame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(629)
        >4 liqRibTranslatorNew::scanScene__(629,0)
          >5 tJobScriptMgr::scanScene(629,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(629,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibClipPlaneData::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibClipPlaneData::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],4)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader(lambert4SG)
                >8 liqRibNode::findDisp(lambert4SG)
                >8 liqRibNode::findVolume(lambert4SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,629,3)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,629,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime= 9:47:01.52),E:/MyDocuments/maya/projects/default/texture_anim2,admin,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(629,perspShape)
            >6 Renderer::framePrologue(629,perspShape)
              >7 Renderer::framePrologue_camera(629,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,pPlaneShape1,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 addLightGroupForLight(|pointLight1|pointLightShape1)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(629)
            >6 Renderer::frameEpilogue(629)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=texture_anim2Frame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim2Frame629)
      >3 liqRibTranslatorNew::processOneFrame(1, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(630)
        >4 liqRibTranslatorNew::scanScene__(630,0)
          >5 tJobScriptMgr::scanScene(630,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(630,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibClipPlaneData::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibClipPlaneData::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],4)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader(lambert4SG)
                >8 liqRibNode::findDisp(lambert4SG)
                >8 liqRibNode::findVolume(lambert4SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|locator1|pPlane1|pPlaneShape1)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(N,3,121,0)
                    >10 liqTokenPointer:set(st,0,400,2)
                    >10 liqTokenPointer:set(st,0,400,2)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(N,3,121,0)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(N,3,121,0)
                    >10 liqTokenPointer:set(st,0,400,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,630,3)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,630,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime= 9:47:01.52),E:/MyDocuments/maya/projects/default/texture_anim2,admin,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(630,perspShape)
            >6 Renderer::framePrologue(630,perspShape)
              >7 Renderer::framePrologue_camera(630,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,pPlaneShape1,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 addLightGroupForLight(|pointLight1|pointLightShape1)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|locatorShape1,perspShape)
                >8 Renderer::exportOneObject_data(|locator1|locatorShape1,perspShape)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.630.rib,perspShape,0)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.630.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.630.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 write(|locator1|locatorShape1,perspShape,...)
                            >14 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|locator1|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|locator1|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.630.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.630.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.630.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|locator1|pPlane1|pPlaneShape1,perspShape)
                            >14 liqRibClipPlaneData::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|locator1|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:set(P,1,121,0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|locatorShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|locatorShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|locatorShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|locator1|locatorShape1)
                  >9 Renderer::exportLightLinks(perspShape,|locator1|locatorShape1,lightedByWhichLightShapes.size=0)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|locatorShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|locatorShape1,v=0,s=0,c=0,,|locator1|locatorShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|locatorShape1,|locator1|locatorShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|locatorShape1)
                >8 Renderer::exportOneObject_reference(|locator1|locatorShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|locatorShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|locator1|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|locator1|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|locator1|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|locator1|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|pPlane1|pPlaneShape1,perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(630)
            >6 Renderer::frameEpilogue(630)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=texture_anim2Frame629,0)
        >4 liqRenderScript::popNextJobID()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim2Frame630)
      >3 liqRibTranslatorNew::processOneFrame(2, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(650)
        >4 liqRibTranslatorNew::scanScene__(650,0)
          >5 tJobScriptMgr::scanScene(650,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(650,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibClipPlaneData::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibClipPlaneData::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],4)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader(lambert4SG)
                >8 liqRibNode::findDisp(lambert4SG)
                >8 liqRibNode::findVolume(lambert4SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|locator1|pPlane1|pPlaneShape1)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(N,3,121,0)
                    >10 liqTokenPointer:set(st,0,400,2)
                    >10 liqTokenPointer:set(st,0,400,2)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(N,3,121,0)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(N,3,121,0)
                    >10 liqTokenPointer:set(st,0,400,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,650,3)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,650,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime= 9:47:01.52),E:/MyDocuments/maya/projects/default/texture_anim2,admin,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(650,perspShape)
            >6 Renderer::framePrologue(650,perspShape)
              >7 Renderer::framePrologue_camera(650,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,pPlaneShape1,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 addLightGroupForLight(|pointLight1|pointLightShape1)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|locatorShape1,perspShape)
                >8 Renderer::exportOneObject_data(|locator1|locatorShape1,perspShape)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.650.rib,perspShape,0)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.650.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.650.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 write(|locator1|locatorShape1,perspShape,...)
                            >14 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|locator1|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|locator1|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.650.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.650.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.650.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|locator1|pPlane1|pPlaneShape1,perspShape)
                            >14 liqRibClipPlaneData::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|locator1|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:set(P,1,121,0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|locatorShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|locatorShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|locatorShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|locator1|locatorShape1)
                  >9 Renderer::exportLightLinks(perspShape,|locator1|locatorShape1,lightedByWhichLightShapes.size=0)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|locatorShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|locatorShape1,v=0,s=0,c=0,,|locator1|locatorShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|locatorShape1,|locator1|locatorShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|locatorShape1)
                >8 Renderer::exportOneObject_reference(|locator1|locatorShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|locatorShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|locator1|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|locator1|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|locator1|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|locator1|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|pPlane1|pPlaneShape1,perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(650)
            >6 Renderer::frameEpilogue(650)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=texture_anim2Frame630,0)
        >4 liqRenderScript::popNextJobID()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim2Frame650)
      >3 liqRibTranslatorNew::processOneFrame(3, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(660)
        >4 liqRibTranslatorNew::scanScene__(660,0)
          >5 tJobScriptMgr::scanScene(660,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(660,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibClipPlaneData::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibClipPlaneData::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],4)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader(lambert4SG)
                >8 liqRibNode::findDisp(lambert4SG)
                >8 liqRibNode::findVolume(lambert4SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|locator1|pPlane1|pPlaneShape1)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(N,3,121,0)
                    >10 liqTokenPointer:set(st,0,400,2)
                    >10 liqTokenPointer:set(st,0,400,2)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(N,3,121,0)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(P,1,121,0)
                    >10 liqTokenPointer:set(N,3,121,0)
                    >10 liqTokenPointer:set(st,0,400,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,660,3)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,660,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime= 9:47:01.52),E:/MyDocuments/maya/projects/default/texture_anim2,admin,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(660,perspShape)
            >6 Renderer::framePrologue(660,perspShape)
              >7 Renderer::framePrologue_camera(660,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,pPlaneShape1,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 addLightGroupForLight(|pointLight1|pointLightShape1)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|locatorShape1,perspShape)
                >8 Renderer::exportOneObject_data(|locator1|locatorShape1,perspShape)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.660.rib,perspShape,0)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.660.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.660.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 write(|locator1|locatorShape1,perspShape,...)
                            >14 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|locator1|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|locator1|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.660.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.660.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.660.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|locator1|pPlane1|pPlaneShape1,perspShape)
                            >14 liqRibClipPlaneData::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|locator1|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:set(P,1,121,0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|locatorShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|locatorShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|locatorShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|locator1|locatorShape1)
                  >9 Renderer::exportLightLinks(perspShape,|locator1|locatorShape1,lightedByWhichLightShapes.size=0)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|locatorShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|locatorShape1,v=0,s=0,c=0,,|locator1|locatorShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|locatorShape1,|locator1|locatorShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|locatorShape1)
                >8 Renderer::exportOneObject_reference(|locator1|locatorShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|locatorShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|locator1|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|locator1|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|locator1|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|locator1|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|pPlane1|pPlaneShape1,perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(660)
            >6 Renderer::frameEpilogue(660)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=texture_anim2Frame650,0)
        >4 liqRenderScript::popNextJobID()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim2Frame660)
      >3 liqRibTranslatorNew::processOneFrame(4, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(672)
        >4 liqRibTranslatorNew::scanScene__(672,0)
          >5 tJobScriptMgr::scanScene(672,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(672,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibClipPlaneData::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
            >6 liqRibClipPlaneData::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibClipPlaneData::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],4)
                >8 liqRibNode::parseVectorAttributes(locator1,[],2)
                >8 liqRibNode::parseVectorAttributes(locator1,[],3)
                >8 liqRibNode::parseVectorAttributes(locator1,[],4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader(lambert4SG)
                >8 liqRibNode::findDisp(lambert4SG)
                >8 liqRibNode::findVolume(lambert4SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,672,3)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,672,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime= 9:47:01.52),E:/MyDocuments/maya/projects/default/texture_anim2,admin,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(672,perspShape)
            >6 Renderer::framePrologue(672,perspShape)
              >7 Renderer::framePrologue_camera(672,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,pPlaneShape1,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_coverage)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_noiseUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_offset)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_translateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                          >13 Visitor::addShaderMethodVariavles(,place2dTexture1_wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                      >11 Visitor::addShaderMethodBody(lambert4,[file1_outColor],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,lambert4SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 addLightGroupForLight(|pointLight1|pointLightShape1)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(672)
            >6 Renderer::frameEpilogue(672)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=texture_anim2Frame660,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 RendererMgr::epilogue()
    >2 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::uninstall()
  >1 RendererMgr::deleteFactory()
