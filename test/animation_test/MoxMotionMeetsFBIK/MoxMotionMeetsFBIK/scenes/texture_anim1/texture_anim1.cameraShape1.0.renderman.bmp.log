>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(renderman)
  >1 RendererMgr::install()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(E:/MyDocuments/maya/projects/default/rib/texture_anim1.cameraShape1.630.renderman.bmp)(but do nothing now)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim1Frame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,cameraShape1)
          >5 liqRibTranslator::generateFileName(5,cameraShape1)
            >6 liqRibTranslator::generateImageName(, job(cameraShape1)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(629)
        >4 liqRibTranslatorNew::scanScene__(629,0)
          >5 tJobScriptMgr::scanScene(629,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(629,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
            >6 liqRibHT::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibHT::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
            >6 liqRibHT::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibHT::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
            >6 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape2,3)
              >7 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,629,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,629,4)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|camera1|cameraShape1,)
              >7 liqRibTranslator::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
            >6 liqRibTranslator::getCameraFilmOffset(|camera1|cameraShape1,)
            >6 liqRibTranslator::getCameraTransform(|camera1|cameraShape1,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 rm::Renderer::doTextures(txtList.size()=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 rm::Renderer::doShadows(shadowList_.size()=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,629,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_begin(cameraShape1)
              >7 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0629..rib(strlen=77)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),E:/MyDocuments/maya/projects/default/texture_anim1,yaoyansi,time)
            >6 Renderer::ribPrologue_options(cameraShape1)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(629,cameraShape1)
            >6 Renderer::framePrologue(629,cameraShape1)
              >7 tHeroRibWriterMgr::framePrologue_display(cameraShape1)
                >8 exportJobCamera(cameraShape1,,)
              >7 Renderer::framePrologue_camera(629,cameraShape1)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4), open shader file
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,,place2dTexture1_coverage124place2dTexture1_mirrorU124place2dTexture1_mirrorV124place2dTexture1_noiseUV124place2dTexture1_offset124place2dTexture1_repeatUV124place2dTexture1_rotateFrame124place2dTexture1_rotateUV124place2dTexture1_stagger124place2dTexture1_translateFrame124place2dTexture1_wrapU124place2dTexture1_wrapV124place2dTexture1_outUV124)
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file1)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1_frameExtension)
                                  >17 ShaderMgr::hasShaderType(animCurveTU)
                            >14 ShaderMgr::convertibleConnection(file1.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outTransparency,file1.outTransparency, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outTransparency,color,-1,)
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV124,file1_outColor124file1_outTransparency124)
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert4.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert4.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,file1_outColor124file1_outTransparency124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                    >10 Visitor::outputShadingGroup(lambert4SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert5SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert5)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert5)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert5,surfaceShader)
                    >10 Visitor::initShaderData(lambert5,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert5, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert5)
                    >10 Visitor::outputBegin(lambert5), open shader file
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert5)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,coverage,place2dTexture2.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorU,place2dTexture2.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorV,place2dTexture2.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,noiseUV,place2dTexture2.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,offset,place2dTexture2.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,repeatUV,place2dTexture2.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateFrame,place2dTexture2.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateUV,place2dTexture2.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,stagger,place2dTexture2.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,translateFrame,place2dTexture2.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapU,place2dTexture2.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapV,place2dTexture2.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture2,,place2dTexture2_coverage124place2dTexture2_mirrorU124place2dTexture2_mirrorV124place2dTexture2_noiseUV124place2dTexture2_offset124place2dTexture2_repeatUV124place2dTexture2_rotateFrame124place2dTexture2_rotateUV124place2dTexture2_stagger124place2dTexture2_translateFrame124place2dTexture2_wrapU124place2dTexture2_wrapV124place2dTexture2_outUV124)
                      >11 Visitor::outputUpstreamShader(file2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                          >13 Visitor::visitFile(file2)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file2)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file2.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file2.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file2.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                            >14 ShaderMgr::convertibleConnection(file2.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file2.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file2.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                            >14 ShaderMgr::convertibleConnection(file2.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                            >14 ShaderMgr::convertibleConnection(file2.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file2.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(expression1)
                                  >17 ShaderMgr::hasShaderType(expression)
                            >14 ShaderMgr::convertibleConnection(file2.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file2.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                            >14 ShaderMgr::convertibleConnection(file2.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file2.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file2,outColor,file2.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file2,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                      >11 Visitor::addShaderMethodBody(file2,place2dTexture2_outUV124,file2_outColor124)
                      >11 Visitor::outputUpstreamShader(lambert5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert5,lambert)
                          >13 Visitor::visitLambert(lambert5)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert5)
                            >14 ShaderMgr::convertibleConnection(lambert5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert5.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert5.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert5.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert5, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert5, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert5.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert5,file2_outColor124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert5)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert5SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert5SG)
                  >9 Visitor::outputShadingGroup(lambert5SG)
                    >10 Visitor::outputShadingGroup(lambert5SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert5SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,cameraShape1,ref=0)
                  >9 Helper::RiBeginRef()
                  >9 liqRibData::getFullPathName()
                  >9 rm_writeLightData.cpp::_write(|pointLight1|pointLightShape1,cameraShape1,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                  >9 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
            >6 Renderer::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.629.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.629.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.629.rib,cameraShape1,ref=0)
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane2|pPlaneShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 objectNonShadowAttribute(|pPlane2|pPlaneShape2)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                    >10 Renderer::F2(0,|pPlane2|pPlaneShape2)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                  >9 Visitor::outputShadingGroup(lambert5SG,1)
                    >10 _outputShadingGroup(lambert5SG)
                      >11 getShaderFilePath_NoExt(lambert5)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.629.rib,cameraShape1,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.629.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.629.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,cameraShape1)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(629)
            >6 Renderer::frameEpilogue(629)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
        >4 Renderer::HeroPassEnd(cameraShape1)
          >5 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0629..rib)
            >6 liqProcessLauncher::_execute(renderdl,   "E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0629..rib","E:/MyDocuments/maya/projects/default/", wait=0)
      >3 liqRenderScript::addJob(job.title=texture_anim1Frame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim1Frame629)
      >3 liqRibTranslatorNew::processOneFrame(1, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,cameraShape1)
          >5 liqRibTranslator::generateFileName(5,cameraShape1)
            >6 liqRibTranslator::generateImageName(, job(cameraShape1)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(630)
        >4 liqRibTranslatorNew::scanScene__(630,0)
          >5 tJobScriptMgr::scanScene(630,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(630,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
            >6 liqRibHT::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibHT::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
            >6 liqRibHT::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibHT::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|locator1|pPlane1|pPlaneShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
            >6 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape2,3)
              >7 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,630,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,630,4)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|camera1|cameraShape1,)
              >7 liqRibTranslator::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
            >6 liqRibTranslator::getCameraFilmOffset(|camera1|cameraShape1,)
            >6 liqRibTranslator::getCameraTransform(|camera1|cameraShape1,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 rm::Renderer::doTextures(txtList.size()=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 rm::Renderer::doShadows(shadowList_.size()=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,630,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_begin(cameraShape1)
              >7 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0630..rib(strlen=77)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),E:/MyDocuments/maya/projects/default/texture_anim1,yaoyansi,time)
            >6 Renderer::ribPrologue_options(cameraShape1)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(630,cameraShape1)
            >6 Renderer::framePrologue(630,cameraShape1)
              >7 tHeroRibWriterMgr::framePrologue_display(cameraShape1)
                >8 exportJobCamera(cameraShape1,,)
              >7 Renderer::framePrologue_camera(630,cameraShape1)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4), open shader file
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,,place2dTexture1_coverage124place2dTexture1_mirrorU124place2dTexture1_mirrorV124place2dTexture1_noiseUV124place2dTexture1_offset124place2dTexture1_repeatUV124place2dTexture1_rotateFrame124place2dTexture1_rotateUV124place2dTexture1_stagger124place2dTexture1_translateFrame124place2dTexture1_wrapU124place2dTexture1_wrapV124place2dTexture1_outUV124)
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file1)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1_frameExtension)
                                  >17 ShaderMgr::hasShaderType(animCurveTU)
                            >14 ShaderMgr::convertibleConnection(file1.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outTransparency,file1.outTransparency, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outTransparency,color,-1,)
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV124,file1_outColor124file1_outTransparency124)
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert4.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert4.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,file1_outColor124file1_outTransparency124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                    >10 Visitor::outputShadingGroup(lambert4SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert5SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert5)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert5)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert5,surfaceShader)
                    >10 Visitor::initShaderData(lambert5,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert5, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert5)
                    >10 Visitor::outputBegin(lambert5), open shader file
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert5)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,coverage,place2dTexture2.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorU,place2dTexture2.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorV,place2dTexture2.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,noiseUV,place2dTexture2.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,offset,place2dTexture2.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,repeatUV,place2dTexture2.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateFrame,place2dTexture2.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateUV,place2dTexture2.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,stagger,place2dTexture2.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,translateFrame,place2dTexture2.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapU,place2dTexture2.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapV,place2dTexture2.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture2,,place2dTexture2_coverage124place2dTexture2_mirrorU124place2dTexture2_mirrorV124place2dTexture2_noiseUV124place2dTexture2_offset124place2dTexture2_repeatUV124place2dTexture2_rotateFrame124place2dTexture2_rotateUV124place2dTexture2_stagger124place2dTexture2_translateFrame124place2dTexture2_wrapU124place2dTexture2_wrapV124place2dTexture2_outUV124)
                      >11 Visitor::outputUpstreamShader(file2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                          >13 Visitor::visitFile(file2)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file2)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file2.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file2.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file2.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                            >14 ShaderMgr::convertibleConnection(file2.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file2.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file2.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                            >14 ShaderMgr::convertibleConnection(file2.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                            >14 ShaderMgr::convertibleConnection(file2.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file2.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(expression1)
                                  >17 ShaderMgr::hasShaderType(expression)
                            >14 ShaderMgr::convertibleConnection(file2.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file2.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                            >14 ShaderMgr::convertibleConnection(file2.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file2.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file2,outColor,file2.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file2,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                      >11 Visitor::addShaderMethodBody(file2,place2dTexture2_outUV124,file2_outColor124)
                      >11 Visitor::outputUpstreamShader(lambert5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert5,lambert)
                          >13 Visitor::visitLambert(lambert5)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert5)
                            >14 ShaderMgr::convertibleConnection(lambert5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert5.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert5.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert5.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert5, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert5, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert5.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert5,file2_outColor124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert5)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert5SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert5SG)
                  >9 Visitor::outputShadingGroup(lambert5SG)
                    >10 Visitor::outputShadingGroup(lambert5SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert5SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,cameraShape1,ref=0)
                  >9 Helper::RiBeginRef()
                  >9 liqRibData::getFullPathName()
                  >9 rm_writeLightData.cpp::_write(|pointLight1|pointLightShape1,cameraShape1,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                  >9 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
            >6 Renderer::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|locatorShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|locator1|locatorShape1,cameraShape1)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.630.rib,cameraShape1,0)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.630.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.630.rib,cameraShape1,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::_writeObject(|locator1|pPlane1|pPlaneShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.630.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.630.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.630.rib,cameraShape1,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.630.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.630.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.630.rib,cameraShape1,ref=0)
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|locatorShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|locatorShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|locatorShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|locator1|locatorShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|locator1|locatorShape1,lightedByWhichLightShapes.size=0)
                    >10 Renderer::logFrame(|locator1|locatorShape1 is not lighted.)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|locatorShape1,cameraShape1)
                  >9 objectNonShadowAttribute(|locator1|locatorShape1)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|locatorShape1,v=0,s=0,c=0,,|locator1|locatorShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|locatorShape1,|locator1|locatorShape1,0)
                    >10 Renderer::F2(0,|locator1|locatorShape1)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|locatorShape1)
                >8 Renderer::exportOneObject_reference(|locator1|locatorShape1,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|locator1|locatorShape1,|locator1|locatorShape1,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.630.rib,cameraShape1,1)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.630.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.630.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeLocatorData.cpp::write(|locator1|locatorShape1,cameraShape1,...)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|locatorShape1,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|locator1|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|locator1|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 objectNonShadowAttribute(|locator1|pPlane1|pPlaneShape1)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                    >10 Renderer::F2(0,|locator1|pPlane1|pPlaneShape1)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|pPlane1|pPlaneShape1)
                  >9 Visitor::outputShadingGroup(lambert4SG,1)
                    >10 _outputShadingGroup(lambert4SG)
                      >11 getShaderFilePath_NoExt(lambert4)
                >8 Renderer::exportOneObject_reference(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|locator1|pPlane1|pPlaneShape1,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.630.rib,cameraShape1,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.630.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.630.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|pPlane1|pPlaneShape1,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane2|pPlaneShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 objectNonShadowAttribute(|pPlane2|pPlaneShape2)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                    >10 Renderer::F2(0,|pPlane2|pPlaneShape2)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                  >9 Visitor::outputShadingGroup(lambert5SG,1)
                    >10 _outputShadingGroup(lambert5SG)
                      >11 getShaderFilePath_NoExt(lambert5)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.630.rib,cameraShape1,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.630.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.630.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,cameraShape1)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(630)
            >6 Renderer::frameEpilogue(630)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
        >4 Renderer::HeroPassEnd(cameraShape1)
          >5 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0630..rib)
            >6 liqProcessLauncher::_execute(renderdl,   "E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0630..rib","E:/MyDocuments/maya/projects/default/", wait=0)
      >3 liqRenderScript::addJob(job.title=texture_anim1Frame629,0)
        >4 liqRenderScript::popNextJobID()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim1Frame630)
      >3 liqRibTranslatorNew::processOneFrame(2, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,cameraShape1)
          >5 liqRibTranslator::generateFileName(5,cameraShape1)
            >6 liqRibTranslator::generateImageName(, job(cameraShape1)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(650)
        >4 liqRibTranslatorNew::scanScene__(650,0)
          >5 tJobScriptMgr::scanScene(650,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(650,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
            >6 liqRibHT::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibHT::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
            >6 liqRibHT::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibHT::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|locator1|pPlane1|pPlaneShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
            >6 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape2,3)
              >7 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,650,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,650,4)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|camera1|cameraShape1,)
              >7 liqRibTranslator::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
            >6 liqRibTranslator::getCameraFilmOffset(|camera1|cameraShape1,)
            >6 liqRibTranslator::getCameraTransform(|camera1|cameraShape1,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 rm::Renderer::doTextures(txtList.size()=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 rm::Renderer::doShadows(shadowList_.size()=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,650,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_begin(cameraShape1)
              >7 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0650..rib(strlen=77)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),E:/MyDocuments/maya/projects/default/texture_anim1,yaoyansi,time)
            >6 Renderer::ribPrologue_options(cameraShape1)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(650,cameraShape1)
            >6 Renderer::framePrologue(650,cameraShape1)
              >7 tHeroRibWriterMgr::framePrologue_display(cameraShape1)
                >8 exportJobCamera(cameraShape1,,)
              >7 Renderer::framePrologue_camera(650,cameraShape1)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4), open shader file
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,,place2dTexture1_coverage124place2dTexture1_mirrorU124place2dTexture1_mirrorV124place2dTexture1_noiseUV124place2dTexture1_offset124place2dTexture1_repeatUV124place2dTexture1_rotateFrame124place2dTexture1_rotateUV124place2dTexture1_stagger124place2dTexture1_translateFrame124place2dTexture1_wrapU124place2dTexture1_wrapV124place2dTexture1_outUV124)
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file1)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1_frameExtension)
                                  >17 ShaderMgr::hasShaderType(animCurveTU)
                            >14 ShaderMgr::convertibleConnection(file1.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outTransparency,file1.outTransparency, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outTransparency,color,-1,)
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV124,file1_outColor124file1_outTransparency124)
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert4.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert4.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,file1_outColor124file1_outTransparency124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                    >10 Visitor::outputShadingGroup(lambert4SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert5SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert5)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert5)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert5,surfaceShader)
                    >10 Visitor::initShaderData(lambert5,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert5, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert5)
                    >10 Visitor::outputBegin(lambert5), open shader file
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert5)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,coverage,place2dTexture2.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorU,place2dTexture2.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorV,place2dTexture2.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,noiseUV,place2dTexture2.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,offset,place2dTexture2.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,repeatUV,place2dTexture2.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateFrame,place2dTexture2.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateUV,place2dTexture2.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,stagger,place2dTexture2.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,translateFrame,place2dTexture2.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapU,place2dTexture2.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapV,place2dTexture2.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture2,,place2dTexture2_coverage124place2dTexture2_mirrorU124place2dTexture2_mirrorV124place2dTexture2_noiseUV124place2dTexture2_offset124place2dTexture2_repeatUV124place2dTexture2_rotateFrame124place2dTexture2_rotateUV124place2dTexture2_stagger124place2dTexture2_translateFrame124place2dTexture2_wrapU124place2dTexture2_wrapV124place2dTexture2_outUV124)
                      >11 Visitor::outputUpstreamShader(file2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                          >13 Visitor::visitFile(file2)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file2)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file2.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file2.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file2.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                            >14 ShaderMgr::convertibleConnection(file2.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file2.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file2.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                            >14 ShaderMgr::convertibleConnection(file2.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                            >14 ShaderMgr::convertibleConnection(file2.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file2.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(expression1)
                                  >17 ShaderMgr::hasShaderType(expression)
                            >14 ShaderMgr::convertibleConnection(file2.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file2.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                            >14 ShaderMgr::convertibleConnection(file2.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file2.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file2,outColor,file2.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file2,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                      >11 Visitor::addShaderMethodBody(file2,place2dTexture2_outUV124,file2_outColor124)
                      >11 Visitor::outputUpstreamShader(lambert5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert5,lambert)
                          >13 Visitor::visitLambert(lambert5)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert5)
                            >14 ShaderMgr::convertibleConnection(lambert5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert5.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert5.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert5.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert5, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert5, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert5.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert5,file2_outColor124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert5)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert5SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert5SG)
                  >9 Visitor::outputShadingGroup(lambert5SG)
                    >10 Visitor::outputShadingGroup(lambert5SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert5SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,cameraShape1,ref=0)
                  >9 Helper::RiBeginRef()
                  >9 liqRibData::getFullPathName()
                  >9 rm_writeLightData.cpp::_write(|pointLight1|pointLightShape1,cameraShape1,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                  >9 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
            >6 Renderer::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|locatorShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|locator1|locatorShape1,cameraShape1)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.650.rib,cameraShape1,0)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.650.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.650.rib,cameraShape1,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::_writeObject(|locator1|pPlane1|pPlaneShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.650.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.650.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.650.rib,cameraShape1,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.650.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.650.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.650.rib,cameraShape1,ref=0)
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|locatorShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|locatorShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|locatorShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|locator1|locatorShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|locator1|locatorShape1,lightedByWhichLightShapes.size=0)
                    >10 Renderer::logFrame(|locator1|locatorShape1 is not lighted.)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|locatorShape1,cameraShape1)
                  >9 objectNonShadowAttribute(|locator1|locatorShape1)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|locatorShape1,v=0,s=0,c=0,,|locator1|locatorShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|locatorShape1,|locator1|locatorShape1,0)
                    >10 Renderer::F2(0,|locator1|locatorShape1)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|locatorShape1)
                >8 Renderer::exportOneObject_reference(|locator1|locatorShape1,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|locator1|locatorShape1,|locator1|locatorShape1,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.650.rib,cameraShape1,1)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.650.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.650.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeLocatorData.cpp::write(|locator1|locatorShape1,cameraShape1,...)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|locatorShape1,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|locator1|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|locator1|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 objectNonShadowAttribute(|locator1|pPlane1|pPlaneShape1)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                    >10 Renderer::F2(0,|locator1|pPlane1|pPlaneShape1)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|pPlane1|pPlaneShape1)
                  >9 Visitor::outputShadingGroup(lambert4SG,1)
                    >10 _outputShadingGroup(lambert4SG)
                      >11 getShaderFilePath_NoExt(lambert4)
                >8 Renderer::exportOneObject_reference(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|locator1|pPlane1|pPlaneShape1,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.650.rib,cameraShape1,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.650.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.650.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|pPlane1|pPlaneShape1,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane2|pPlaneShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 objectNonShadowAttribute(|pPlane2|pPlaneShape2)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                    >10 Renderer::F2(0,|pPlane2|pPlaneShape2)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                  >9 Visitor::outputShadingGroup(lambert5SG,1)
                    >10 _outputShadingGroup(lambert5SG)
                      >11 getShaderFilePath_NoExt(lambert5)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.650.rib,cameraShape1,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.650.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.650.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,cameraShape1)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(650)
            >6 Renderer::frameEpilogue(650)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
        >4 Renderer::HeroPassEnd(cameraShape1)
          >5 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0650..rib)
            >6 liqProcessLauncher::_execute(renderdl,   "E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0650..rib","E:/MyDocuments/maya/projects/default/", wait=0)
      >3 liqRenderScript::addJob(job.title=texture_anim1Frame630,0)
        >4 liqRenderScript::popNextJobID()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim1Frame650)
      >3 liqRibTranslatorNew::processOneFrame(3, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,cameraShape1)
          >5 liqRibTranslator::generateFileName(5,cameraShape1)
            >6 liqRibTranslator::generateImageName(, job(cameraShape1)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(660)
        >4 liqRibTranslatorNew::scanScene__(660,0)
          >5 tJobScriptMgr::scanScene(660,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(660,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
            >6 liqRibHT::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibHT::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
            >6 liqRibHT::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibHT::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|locator1|pPlane1|pPlaneShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
            >6 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape2,3)
              >7 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,660,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,660,4)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|camera1|cameraShape1,)
              >7 liqRibTranslator::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
            >6 liqRibTranslator::getCameraFilmOffset(|camera1|cameraShape1,)
            >6 liqRibTranslator::getCameraTransform(|camera1|cameraShape1,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 rm::Renderer::doTextures(txtList.size()=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 rm::Renderer::doShadows(shadowList_.size()=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,660,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_begin(cameraShape1)
              >7 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0660..rib(strlen=77)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),E:/MyDocuments/maya/projects/default/texture_anim1,yaoyansi,time)
            >6 Renderer::ribPrologue_options(cameraShape1)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(660,cameraShape1)
            >6 Renderer::framePrologue(660,cameraShape1)
              >7 tHeroRibWriterMgr::framePrologue_display(cameraShape1)
                >8 exportJobCamera(cameraShape1,,)
              >7 Renderer::framePrologue_camera(660,cameraShape1)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4), open shader file
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,,place2dTexture1_coverage124place2dTexture1_mirrorU124place2dTexture1_mirrorV124place2dTexture1_noiseUV124place2dTexture1_offset124place2dTexture1_repeatUV124place2dTexture1_rotateFrame124place2dTexture1_rotateUV124place2dTexture1_stagger124place2dTexture1_translateFrame124place2dTexture1_wrapU124place2dTexture1_wrapV124place2dTexture1_outUV124)
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file1)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1_frameExtension)
                                  >17 ShaderMgr::hasShaderType(animCurveTU)
                            >14 ShaderMgr::convertibleConnection(file1.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outTransparency,file1.outTransparency, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outTransparency,color,-1,)
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV124,file1_outColor124file1_outTransparency124)
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert4.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert4.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,file1_outColor124file1_outTransparency124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                    >10 Visitor::outputShadingGroup(lambert4SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert5SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert5)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert5)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert5,surfaceShader)
                    >10 Visitor::initShaderData(lambert5,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert5, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert5)
                    >10 Visitor::outputBegin(lambert5), open shader file
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert5)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,coverage,place2dTexture2.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorU,place2dTexture2.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorV,place2dTexture2.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,noiseUV,place2dTexture2.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,offset,place2dTexture2.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,repeatUV,place2dTexture2.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateFrame,place2dTexture2.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateUV,place2dTexture2.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,stagger,place2dTexture2.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,translateFrame,place2dTexture2.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapU,place2dTexture2.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapV,place2dTexture2.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture2,,place2dTexture2_coverage124place2dTexture2_mirrorU124place2dTexture2_mirrorV124place2dTexture2_noiseUV124place2dTexture2_offset124place2dTexture2_repeatUV124place2dTexture2_rotateFrame124place2dTexture2_rotateUV124place2dTexture2_stagger124place2dTexture2_translateFrame124place2dTexture2_wrapU124place2dTexture2_wrapV124place2dTexture2_outUV124)
                      >11 Visitor::outputUpstreamShader(file2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                          >13 Visitor::visitFile(file2)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file2)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file2.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file2.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file2.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                            >14 ShaderMgr::convertibleConnection(file2.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file2.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file2.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                            >14 ShaderMgr::convertibleConnection(file2.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                            >14 ShaderMgr::convertibleConnection(file2.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file2.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(expression1)
                                  >17 ShaderMgr::hasShaderType(expression)
                            >14 ShaderMgr::convertibleConnection(file2.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file2.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                            >14 ShaderMgr::convertibleConnection(file2.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file2.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file2,outColor,file2.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file2,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                      >11 Visitor::addShaderMethodBody(file2,place2dTexture2_outUV124,file2_outColor124)
                      >11 Visitor::outputUpstreamShader(lambert5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert5,lambert)
                          >13 Visitor::visitLambert(lambert5)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert5)
                            >14 ShaderMgr::convertibleConnection(lambert5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert5.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert5.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert5.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert5, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert5, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert5.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert5,file2_outColor124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert5)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert5SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert5SG)
                  >9 Visitor::outputShadingGroup(lambert5SG)
                    >10 Visitor::outputShadingGroup(lambert5SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert5SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,cameraShape1,ref=0)
                  >9 Helper::RiBeginRef()
                  >9 liqRibData::getFullPathName()
                  >9 rm_writeLightData.cpp::_write(|pointLight1|pointLightShape1,cameraShape1,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                  >9 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
            >6 Renderer::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|locatorShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|locator1|locatorShape1,cameraShape1)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.660.rib,cameraShape1,0)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.660.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.660.rib,cameraShape1,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::_writeObject(|locator1|pPlane1|pPlaneShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.660.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.660.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.660.rib,cameraShape1,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.660.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.660.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.660.rib,cameraShape1,ref=0)
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|locatorShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|locatorShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|locatorShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|locator1|locatorShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|locator1|locatorShape1,lightedByWhichLightShapes.size=0)
                    >10 Renderer::logFrame(|locator1|locatorShape1 is not lighted.)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|locatorShape1,cameraShape1)
                  >9 objectNonShadowAttribute(|locator1|locatorShape1)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|locatorShape1,v=0,s=0,c=0,,|locator1|locatorShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|locatorShape1,|locator1|locatorShape1,0)
                    >10 Renderer::F2(0,|locator1|locatorShape1)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|locatorShape1)
                >8 Renderer::exportOneObject_reference(|locator1|locatorShape1,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|locator1|locatorShape1,|locator1|locatorShape1,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.660.rib,cameraShape1,1)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.660.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.660.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeLocatorData.cpp::write(|locator1|locatorShape1,cameraShape1,...)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|locatorShape1,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|locator1|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|locator1|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 objectNonShadowAttribute(|locator1|pPlane1|pPlaneShape1)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                    >10 Renderer::F2(0,|locator1|pPlane1|pPlaneShape1)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|pPlane1|pPlaneShape1)
                  >9 Visitor::outputShadingGroup(lambert4SG,1)
                    >10 _outputShadingGroup(lambert4SG)
                      >11 getShaderFilePath_NoExt(lambert4)
                >8 Renderer::exportOneObject_reference(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|locator1|pPlane1|pPlaneShape1,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.660.rib,cameraShape1,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.660.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_pPlane1_pPlaneShape1.660.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|locator1|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|pPlane1|pPlaneShape1,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane2|pPlaneShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 objectNonShadowAttribute(|pPlane2|pPlaneShape2)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                    >10 Renderer::F2(0,|pPlane2|pPlaneShape2)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                  >9 Visitor::outputShadingGroup(lambert5SG,1)
                    >10 _outputShadingGroup(lambert5SG)
                      >11 getShaderFilePath_NoExt(lambert5)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.660.rib,cameraShape1,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.660.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.660.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,cameraShape1)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(660)
            >6 Renderer::frameEpilogue(660)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
        >4 Renderer::HeroPassEnd(cameraShape1)
          >5 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0660..rib)
            >6 liqProcessLauncher::_execute(renderdl,   "E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0660..rib","E:/MyDocuments/maya/projects/default/", wait=0)
      >3 liqRenderScript::addJob(job.title=texture_anim1Frame650,0)
        >4 liqRenderScript::popNextJobID()
      >3 tFrameScriptJobMgr::setCommonParameters(texture_anim1Frame660)
      >3 liqRibTranslatorNew::processOneFrame(4, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,cameraShape1)
          >5 liqRibTranslator::generateFileName(5,cameraShape1)
            >6 liqRibTranslator::generateImageName(, job(cameraShape1)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(672)
        >4 liqRibTranslatorNew::scanScene__(672,0)
          >5 tJobScriptMgr::scanScene(672,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(672,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
            >6 liqRibHT::insert(|locator1|locatorShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,1)
              >7 liqRibHT::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
            >6 liqRibHT::insert(|locator1|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|locator1|pPlane1|pPlaneShape1,2)
              >7 liqRibHT::find(|locator1|pPlane1|pPlaneShape1,|locator1|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|pPlane1|pPlaneShape1,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
            >6 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape2,3)
              >7 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,672,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,672,4)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|camera1|cameraShape1,)
              >7 liqRibTranslator::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
            >6 liqRibTranslator::getCameraFilmOffset(|camera1|cameraShape1,)
            >6 liqRibTranslator::getCameraTransform(|camera1|cameraShape1,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 rm::Renderer::doTextures(txtList.size()=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 rm::Renderer::doShadows(shadowList_.size()=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,672,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_begin(cameraShape1)
              >7 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0672..rib(strlen=77)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),E:/MyDocuments/maya/projects/default/texture_anim1,yaoyansi,time)
            >6 Renderer::ribPrologue_options(cameraShape1)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(672,cameraShape1)
            >6 Renderer::framePrologue(672,cameraShape1)
              >7 tHeroRibWriterMgr::framePrologue_display(cameraShape1)
                >8 exportJobCamera(cameraShape1,,)
              >7 Renderer::framePrologue_camera(672,cameraShape1)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4), open shader file
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,,place2dTexture1_coverage124place2dTexture1_mirrorU124place2dTexture1_mirrorV124place2dTexture1_noiseUV124place2dTexture1_offset124place2dTexture1_repeatUV124place2dTexture1_rotateFrame124place2dTexture1_rotateUV124place2dTexture1_stagger124place2dTexture1_translateFrame124place2dTexture1_wrapU124place2dTexture1_wrapV124place2dTexture1_outUV124)
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file1)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1_frameExtension)
                                  >17 ShaderMgr::hasShaderType(animCurveTU)
                            >14 ShaderMgr::convertibleConnection(file1.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outTransparency,file1.outTransparency, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outTransparency,color,-1,)
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV124,file1_outColor124file1_outTransparency124)
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert4.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert4.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert4.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert4)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert4.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,file1_outColor124file1_outTransparency124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                      >11 getShaderFilePath_SRC(lambert4)
                        >12 getShaderFilePath_NoExt(lambert4)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                    >10 Visitor::outputShadingGroup(lambert4SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert5SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert5)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert5)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert5,surfaceShader)
                    >10 Visitor::initShaderData(lambert5,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert5, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert5)
                    >10 Visitor::outputBegin(lambert5), open shader file
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(lambert5)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,coverage,place2dTexture2.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorU,place2dTexture2.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorV,place2dTexture2.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,noiseUV,place2dTexture2.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,offset,place2dTexture2.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,repeatUV,place2dTexture2.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateFrame,place2dTexture2.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateUV,place2dTexture2.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,stagger,place2dTexture2.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,translateFrame,place2dTexture2.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapU,place2dTexture2.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapV,place2dTexture2.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture2,,place2dTexture2_coverage124place2dTexture2_mirrorU124place2dTexture2_mirrorV124place2dTexture2_noiseUV124place2dTexture2_offset124place2dTexture2_repeatUV124place2dTexture2_rotateFrame124place2dTexture2_rotateUV124place2dTexture2_stagger124place2dTexture2_translateFrame124place2dTexture2_wrapU124place2dTexture2_wrapV124place2dTexture2_outUV124)
                      >11 Visitor::outputUpstreamShader(file2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                          >13 Visitor::visitFile(file2)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file2)
                            >14 Renderer::getTextureExt()
                            >14 ShaderMgr::convertibleConnection(file2.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file2.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file2.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                            >14 ShaderMgr::convertibleConnection(file2.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file2.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file2.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                            >14 ShaderMgr::convertibleConnection(file2.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                            >14 ShaderMgr::convertibleConnection(file2.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file2.frameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameExtension)
                                >16 ConvertShadingNetwork::nodeIsConvertible(expression1)
                                  >17 ShaderMgr::hasShaderType(expression)
                            >14 ShaderMgr::convertibleConnection(file2.frameOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.frameOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.frameOffset)
                            >14 ShaderMgr::convertibleConnection(file2.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                            >14 ShaderMgr::convertibleConnection(file2.useFrameExtension)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.useFrameExtension)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.useFrameExtension)
                            >14 ShaderMgr::convertibleConnection(file2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file2.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file2,outColor,file2.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file2,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                      >11 Visitor::addShaderMethodBody(file2,place2dTexture2_outUV124,file2_outColor124)
                      >11 Visitor::outputUpstreamShader(lambert5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert5,lambert)
                          >13 Visitor::visitLambert(lambert5)
                            >14 OutputHelper::addInclude(lambert.h)
                            >14 OutputHelper::beginRSL(lambert5)
                            >14 ShaderMgr::convertibleConnection(lambert5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(lambert5.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractions)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(lambert5.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(lambert5.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(lambert5.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(lambert5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(lambert5.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(lambert5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert5.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert5)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert5, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert5, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert5.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert5.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert5.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert5,file2_outColor124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                      >11 getShaderFilePath_SRC(lambert5)
                        >12 getShaderFilePath_NoExt(lambert5)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert5)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert5SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert5SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert5SG)
                  >9 Visitor::outputShadingGroup(lambert5SG)
                    >10 Visitor::outputShadingGroup(lambert5SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert5SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,cameraShape1,ref=0)
                  >9 Helper::RiBeginRef()
                  >9 liqRibData::getFullPathName()
                  >9 rm_writeLightData.cpp::_write(|pointLight1|pointLightShape1,cameraShape1,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                  >9 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
            >6 Renderer::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.672.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.672.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.672.rib,cameraShape1,ref=0)
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane2|pPlaneShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 objectNonShadowAttribute(|pPlane2|pPlaneShape2)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                    >10 Renderer::F2(0,|pPlane2|pPlaneShape2)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                  >9 Visitor::outputShadingGroup(lambert5SG,1)
                    >10 _outputShadingGroup(lambert5SG)
                      >11 getShaderFilePath_NoExt(lambert5)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.672.rib,cameraShape1,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.672.rib,job=cameraShape1,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.672.rib,cameraShape1,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,cameraShape1)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(672)
            >6 Renderer::frameEpilogue(672)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
        >4 Renderer::HeroPassEnd(cameraShape1)
          >5 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0672..rib)
            >6 liqProcessLauncher::_execute(renderdl,   "E:/MyDocuments/maya/projects/default/rib/texture_anim1_cameraShape1.0672..rib","E:/MyDocuments/maya/projects/default/", wait=0)
      >3 liqRenderScript::addJob(job.title=texture_anim1Frame660,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
  >1 RendererMgr::unsetFactory()
