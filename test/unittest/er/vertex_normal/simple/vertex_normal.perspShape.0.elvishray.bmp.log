>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(elvishray)
  >1 RendererMgr::install()
    >2 Renderer::Renderer()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/vertex_normal.perspShape.1.elvishray.bmp)
    >2 OutputMgr::setOutputImagePath(R:/MyDocuments/maya/projects/default/rib/vertex_normal.perspShape.1.elvishray.bmp)
    >2 OutputMgr::add(0)
    >2 OutputMgr::add(1)
    >2 OutputMgr::add(2)
    >2 OutputMgr::init()
      >3 OutputMgr::createOutput(0)
        >4 OutputBase::OutputBase()
        >4 OutputCall::OutputCall()
      >3 OutputMgr::createOutput(1)
        >4 OutputBase::OutputBase()
        >4 OutputESS::OutputESS(R:/MyDocuments/maya/projects/default/rib/vertex_normal.perspShape.1.elvishray.bmp)
      >3 OutputMgr::createOutput(2)
        >4 OutputBase::OutputBase()
        >4 OutputESA::OutputESA(R:/MyDocuments/maya/projects/default/rib/vertex_normal.perspShape.1.elvishray.bmp)
      >3 OutputCall::init()
      >3 OutputESS::init()
      >3 OutputESA::init()
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(vertex_normalFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,perspShape)
          >5 liqRibTranslator::generateFileName(5,perspShape)
            >6 liqRibTranslator::generateImageName(, job(perspShape)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pCube1|pCubeShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pCube1|pCubeShape1,1)
              >7 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube1,,2)
                >8 liqRibNode::parseVectorAttributes(pCube1,,3)
                >8 liqRibNode::parseVectorAttributes(pCube1,,4)
                >8 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane1|pPlaneShape1,2)
              >7 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pSphere1|pSphereShape1,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pSphere1|pSphereShape1,3)
              >7 liqRibHT::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pSphere1|pSphereShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pSphere1,,2)
                >8 liqRibNode::parseVectorAttributes(pSphere1,,3)
                >8 liqRibNode::parseVectorAttributes(pSphere1,,4)
                >8 liqRibNode::findShadingGroup(|pSphere1|pSphereShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pSphere1|pSphereShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pSphere1|pSphereShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pSphereShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pSphere2|pSphereShape2,lframe,0,0,4,matrix,,-1)
              >7 liqRibHT::hash(|pSphere2|pSphereShape2,4)
              >7 liqRibHT::find(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pSphere2|pSphereShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pSphere2,,2)
                >8 liqRibNode::parseVectorAttributes(pSphere2,,3)
                >8 liqRibNode::parseVectorAttributes(pSphere2,,4)
                >8 liqRibNode::findShadingGroup(|pSphere2|pSphereShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pSphere2|pSphereShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pSphere2|pSphereShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pSphereShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pSphere2|polySurfaceShape1,lframe,0,0,5,matrix,,-1)
              >7 liqRibHT::hash(|pSphere2|polySurfaceShape1,5)
              >7 liqRibHT::find(|pSphere2|polySurfaceShape1,|pSphere2|polySurfaceShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pSphere2|polySurfaceShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pSphere2,,2)
                >8 liqRibNode::parseVectorAttributes(pSphere2,,3)
                >8 liqRibNode::parseVectorAttributes(pSphere2,,4)
                >8 liqRibNode::findShadingGroup(|pSphere2|polySurfaceShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pSphere2|polySurfaceShape1,0)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,6)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|persp|perspShape,)
              >7 liqRibTranslator::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
            >6 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
            >6 liqRibTranslator::getCameraTransform(|persp|perspShape,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/vertex_normal,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                >8 Renderer::cameraOutput(perspShape)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong1)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong1)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 OutputHelper::add_liq_UserDefinedNormal(phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong1, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong1,,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong2SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong2)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong2)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong2,surfaceShader)
                    >10 Visitor::initShaderData(phong2,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong2, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong2)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong2)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                    >10 Visitor::preOutput(phong2)
                    >10 Visitor::outputBegin(phong2)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong2,phong)
                          >13 Visitor::visitPhong(phong2)
                            >14 OutputHelper::beginRSL(maya_phong,phong2)
                            >14 ShaderMgr::convertibleConnection(phong2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                            >14 ShaderMgr::convertibleConnection(phong2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                            >14 ShaderMgr::convertibleConnection(phong2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                            >14 OutputHelper::add_liq_UserDefinedNormal(phong2)
                            >14 ShaderMgr::convertibleConnection(phong2.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong2.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong2.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong2.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong2, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong2,,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong2)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong2SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong2SG)
                  >9 Visitor::outputShadingGroup(phong2SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong2SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong3SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong3)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong3)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong3,surfaceShader)
                    >10 Visitor::initShaderData(phong3,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong3, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong3)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong3)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong3)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(phong3)
                    >10 Visitor::outputBegin(phong3)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(maya_place2dTexture,place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,,,place2dTexture1.coverage124place2dTexture1.mirrorU124place2dTexture1.mirrorV124place2dTexture1.noiseUV124place2dTexture1.offset124place2dTexture1.repeatUV124place2dTexture1.rotateFrame124place2dTexture1.rotateUV124place2dTexture1.stagger124place2dTexture1.translateFrame124place2dTexture1.wrapU124place2dTexture1.wrapV124place2dTexture1.outUV124)
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(maya_file,file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong3)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputSrc, inputDes)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong3)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1.outUV124,file1.uvCoord124,file1.outColor124)
                      >11 Visitor::outputUpstreamShader(phong3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong3,phong)
                          >13 Visitor::visitPhong(phong3)
                            >14 OutputHelper::beginRSL(maya_phong,phong3)
                            >14 ShaderMgr::convertibleConnection(phong3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(phong3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                            >14 ShaderMgr::convertibleConnection(phong3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                            >14 OutputHelper::add_liq_UserDefinedNormal(phong3)
                            >14 ShaderMgr::convertibleConnection(phong3.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong3.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong3.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong3.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong3.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong3)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong3, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong3, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(phong3.color, inputSrc, inputDes)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong3,file1.outColor124,phong3.color124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong3)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong3SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong3SG)
                  >9 Visitor::outputShadingGroup(phong3SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong3SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong3SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                      >11 addLightGroupForLight(|pointLight1|pointLightShape1)
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
            >6 Renderer::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube1|pCubeShape1,R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write1(|pCube1|pCubeShape1,perspShape)
                            >14 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                            >14 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
                            >14 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                            >14 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write1(|pPlane1|pPlaneShape1,perspShape)
                            >14 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                            >14 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                            >14 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                            >14 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pSphere1|pSphereShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::_writeObject(|pSphere1|pSphereShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pSphere1|pSphereShape1,R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write1(|pSphere1|pSphereShape1,perspShape)
                            >14 liqRibHT::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                            >14 _exportVertexFromNodePlug(|pSphere1|pSphereShape1,0)
                            >14 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                            >14 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pSphere2|pSphereShape2,perspShape)
                >8 Renderer::exportOneObject_data(|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::_writeObject(|pSphere2|pSphereShape2,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pSphere2|pSphereShape2,R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write1(|pSphere2|pSphereShape2,perspShape)
                            >14 liqRibHT::find(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                            >14 _exportVertexFromNodePlug(|pSphere2|pSphereShape2,0)
                            >14 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                            >14 liqRibData::getFullPathName()
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube1|pCubeShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=0,c=0,,|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                >8 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere1|pSphereShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere1|pSphereShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere1|pSphereShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere1|pSphereShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pSphere1|pSphereShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere1|pSphereShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pSphere1|pSphereShape1,v=0,s=0,c=0,,|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere1|pSphereShape1)
                >8 Renderer::exportOneObject_reference(|pSphere1|pSphereShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pSphere1|pSphereShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere2|pSphereShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere2|pSphereShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere2|pSphereShape2,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere2|pSphereShape2)
                  >9 Renderer::exportLightLinks(perspShape,|pSphere2|pSphereShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere2|pSphereShape2,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pSphere2|pSphereShape2,v=0,s=0,c=0,,|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere2|pSphereShape2)
                >8 Renderer::exportOneObject_reference(|pSphere2|pSphereShape2,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pSphere2|pSphereShape2,perspShape)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
              >7 Renderer::render()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=vertex_normalFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
    >2 OutputMgr::uninit()
      >3 OutputCall::~OutputCall()
      >3 OutputBase::~OutputBase()
      >3 OutputESS::~OutputESS()
      >3 OutputBase::~OutputBase()
      >3 OutputESA::~OutputESA()
      >3 OutputBase::~OutputBase()
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
    >2 Renderer::~Renderer()
  >1 RendererMgr::unsetFactory()
