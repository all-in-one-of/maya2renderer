  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(ElvishRender)
    >2 RendererMgr::install()
      >3 Renderer::Renderer()
      >3 ShaderMgr::setValidConnection()
      >3 ShaderMgr::getShaderConnectionMap()
      >3 RNodeVisitorMgr::setValidConnection(...)
        >4 CheckerNodeVisitor::setValidConnection(...)
        >4 FlatColorNodeVisitor::setValidConnection(...)
        >4 erPhysicalskyNodeVisitor::setValidConnection(...)
        >4 erSkylightNodeVisitor::setValidConnection(...)
        >4 TestLightNodeVisitor::setValidConnection(...)
        >4 ArchitecturalNodeVisitor::setValidConnection(...)
        >4 Checker2NodeVisitor::setValidConnection(...)
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/vertex_normal.perspShape.1.ElvishRender.bmp)
      >3 OutputMgr::setOutputImagePath(R:/MyDocuments/maya/projects/default/rib/vertex_normal.perspShape.1.ElvishRender.bmp)
      >3 OutputMgr::add(1)
      >3 OutputMgr::add(2)
      >3 OutputMgr::add(0)
      >3 OutputMgr::init()
        >4 OutputMgr::createOutput(1)
          >5 OutputBase::OutputBase()
          >5 OutputESS::OutputESS(R:/MyDocuments/maya/projects/default/rib/vertex_normal.perspShape.1.ElvishRender.bmp)
        >4 OutputMgr::createOutput(2)
          >5 OutputBase::OutputBase()
          >5 OutputESA::OutputESA(R:/MyDocuments/maya/projects/default/rib/vertex_normal.perspShape.1.ElvishRender.bmp)
        >4 OutputMgr::createOutput(0)
          >5 OutputBase::OutputBase()
          >5 OutputCall::OutputCall()
        >4 OutputESS::init()
        >4 OutputESA::init()
        >4 OutputCall::init()
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(vertex_normalFrame1)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tLightMgr::buildShadowJob(thisJob___, 0)
              >7 tLightMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,perspShape)
            >6 liqRibTranslator::generateFileName(5,perspShape)
              >7 liqRibTranslator::generateImageName(, job(perspShape)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(1)
          >5 liqRibTranslatorNew::scanScene__(1,0)
            >6 tLightMgr::scanScene(1,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|pointLight1|pointLightShape1,0)
                >8 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,1,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,1)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
                    >10 liqRibCameraData::liqRibCameraData(|persp|perspShape)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,2,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,2)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,3)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,4)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube1|pCubeShape1,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|pCube1|pCubeShape1,5)
                >8 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,4)
                  >9 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|pPlane1|pPlaneShape1,6)
                >8 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pSphere1|pSphereShape1,lframe,0,0,7,matrix,,-1)
                >8 liqRibHT::hash(|pSphere1|pSphereShape1,7)
                >8 liqRibHT::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pSphere1|pSphereShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pSphere1,,2)
                  >9 liqRibNode::parseVectorAttributes(pSphere1,,3)
                  >9 liqRibNode::parseVectorAttributes(pSphere1,,4)
                  >9 liqRibNode::findShadingGroup(|pSphere1|pSphereShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pSphere1|pSphereShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pSphere1|pSphereShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pSphereShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pSphere2|pSphereShape2,lframe,0,0,8,matrix,,-1)
                >8 liqRibHT::hash(|pSphere2|pSphereShape2,8)
                >8 liqRibHT::find(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pSphere2|pSphereShape2,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,2)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,3)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,4)
                  >9 liqRibNode::findShadingGroup(|pSphere2|pSphereShape2,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pSphere2|pSphereShape2,0)
                    >10 liqRibMeshData::liqRibMeshData(|pSphere2|pSphereShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pSphereShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pSphere2|polySurfaceShape1,lframe,0,0,9,matrix,,-1)
                >8 liqRibHT::hash(|pSphere2|polySurfaceShape1,9)
                >8 liqRibHT::find(|pSphere2|polySurfaceShape1,|pSphere2|polySurfaceShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pSphere2|polySurfaceShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,2)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,3)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,4)
                  >9 liqRibNode::findShadingGroup(|pSphere2|polySurfaceShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pSphere2|polySurfaceShape1,0)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,10)
            >6 tCameraMgr::getCameraData(perspShape,0)
              >7 tCameraMgr::getCameraInfo(|persp|perspShape,)
                >8 tCameraMgr::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                  >9 tCameraMgr::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
              >7 tCameraMgr::getCameraFilmOffset(|persp|perspShape,)
              >7 tCameraMgr::getCameraTransform(|persp|perspShape,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 Renderer::frameEpilogue(txtList_.size=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 Renderer::doShadows(shadowList_.size=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::isHeroPassReady(perspShape)
          >5 Renderer::HeroPassBegin(perspShape)
          >5 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
            >6 liqRibTranslatorNew::ribPrologue__(perspShape)
              >7 Renderer::ribPrologue_begin(perspShape)
                >8 Renderer::dummyPhongShader()
              >7 Renderer::ribPrologue_comment(2.3.5,R:/MyDocuments/maya/projects/default/vertex_normal,yaoyansi,time)
              >7 Renderer::ribPrologue_options(perspShape)
            >6 liqRibTranslatorNew::framePrologue__(1,perspShape)
              >7 Renderer::framePrologue(1,perspShape)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                  >9 ShadingNetworkUser::beforeExport_user()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong1SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(phong1)
                          >13 ConvertShadingNetwork::canShaderExported(phong1)
                          >13 ConvertShadingNetwork::exportShaderBegin(phong1)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1)
                            >14 Visitor::initShaderData(phong1)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(phong1, ret)
                                >16 DagMgr::begin(phong1)
                                  >17 DagMgr::pushInputPlugs(phong1)
                                    >18 ShaderMgr::getValidConnection(phong1)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(phong1)
                            >14 Visitor::outputBegin(phong1)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(phong1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                                  >17 Visitor::visitPhong(phong1)
                                    >18 OutputHelper::beginRSL(maya_phong,phong1)
                                    >18 OutputHelper::addRSLVariable(vector,i_ambientColor,ambientColor,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                    >18 OutputHelper::addRSLVariable(vector,i_color,color,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                    >18 OutputHelper::addRSLVariable(float,i_cosinePower,cosinePower,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.cosinePower)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                    >18 OutputHelper::addRSLVariable(vector,i_incandescence,incandescence,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(phong1)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(vector,i_transparency,transparency,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(phong1)
                              >15 ConvertShadingNetwork::getNodeVariables(phong1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                              >15 Visitor::addShaderMethodBody(phong1,,,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(phong1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong1SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong1SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                    >10 Visitor::outputShadingGroup(phong1SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong2SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong2SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(phong2)
                          >13 ConvertShadingNetwork::canShaderExported(phong2)
                          >13 ConvertShadingNetwork::exportShaderBegin(phong2)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(phong2)
                            >14 Visitor::initShaderData(phong2)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong2, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(phong2, ret)
                                >16 DagMgr::begin(phong2)
                                  >17 DagMgr::pushInputPlugs(phong2)
                                    >18 ShaderMgr::getValidConnection(phong2)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(phong2)
                            >14 Visitor::outputBegin(phong2)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(phong2)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(phong2,phong)
                                  >17 Visitor::visitPhong(phong2)
                                    >18 OutputHelper::beginRSL(maya_phong,phong2)
                                    >18 OutputHelper::addRSLVariable(vector,i_ambientColor,ambientColor,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                                    >18 OutputHelper::addRSLVariable(vector,i_color,color,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                                    >18 OutputHelper::addRSLVariable(float,i_cosinePower,cosinePower,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.cosinePower)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                                    >18 OutputHelper::addRSLVariable(vector,i_incandescence,incandescence,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(phong2)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(vector,i_transparency,transparency,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(phong2)
                              >15 ConvertShadingNetwork::getNodeVariables(phong2, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                              >15 Visitor::addShaderMethodBody(phong2,,,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(phong2)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong2SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong2SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong2SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong2SG)
                    >10 Visitor::outputShadingGroup(phong2SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong2SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong3SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong3SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong3SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(phong3)
                          >13 ConvertShadingNetwork::canShaderExported(phong3)
                          >13 ConvertShadingNetwork::exportShaderBegin(phong3)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(phong3)
                            >14 Visitor::initShaderData(phong3)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong3, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(phong3, ret)
                                >16 DagMgr::begin(phong3)
                                  >17 DagMgr::pushInputPlugs(phong3)
                                    >18 ShaderMgr::getValidConnection(phong3)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(file1)
                                        >20 ShaderMgr::hasShaderType(file)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.specularColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.specularColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.specularColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                                >16 DagMgr::pushInputPlugs(file1)
                                  >17 ShaderMgr::getValidConnection(file1)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                      >19 ShaderMgr::hasShaderType(place2dTexture)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(phong3)
                                      >19 ShaderMgr::hasShaderType(phong)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                >16 DagMgr::pushInputPlugs(place2dTexture1)
                                  >17 ShaderMgr::getValidConnection(place2dTexture1)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                >16 DagMgr::isVisited(place2dTexture1)
                                >16 DagMgr::visit(place2dTexture1)
                                >16 DagMgr::isVisited(file1)
                                >16 DagMgr::visit(file1)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(phong3)
                            >14 Visitor::outputBegin(phong3)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(place2dTexture1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                                  >17 Visitor::visitPlace2dTexture(place2dTexture1)
                                    >18 OutputHelper::beginRSL(maya_place2dTexture,place2dTexture1)
                                    >18 OutputHelper::addRSLVariable(vector,i_uvCoord,uvCoord,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.uvCoord)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                                    >18 OutputHelper::addRSLVariable(float,i_coverageU,coverageU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                                    >18 OutputHelper::addRSLVariable(float,i_coverageV,coverageV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                                    >18 OutputHelper::addRSLVariable(bool,i_mirrorU,mirrorU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(bool,i_mirrorV,mirrorV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(float,i_noiseU,noiseU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                                    >18 OutputHelper::addRSLVariable(float,i_noiseV,noiseV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                                    >18 OutputHelper::addRSLVariable(float,i_offsetU,offsetU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                                    >18 OutputHelper::addRSLVariable(float,i_offsetV,offsetV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                                    >18 OutputHelper::addRSLVariable(float,i_repeatU,repeatU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                                    >18 OutputHelper::addRSLVariable(float,i_repeatV,repeatV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                                    >18 OutputHelper::addRSLVariable(float,i_rotateFrame,rotateFrame,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(float,i_rotateUV,rotateUV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(bool,i_stagger,stagger,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(float,i_translateFrameU,translateFrameU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                                    >18 OutputHelper::addRSLVariable(float,i_translateFrameV,translateFrameV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                                    >18 OutputHelper::addRSLVariable(bool,i_wrapU,wrapU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(bool,i_wrapV,wrapV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(vector,o_outUV,outUV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(place2dTexture1)
                              >15 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                              >15 Visitor::addShaderMethodBody(place2dTexture1,,,place2dTexture1.coverage124place2dTexture1.mirrorU124place2dTexture1.mirrorV124place2dTexture1.noiseUV124place2dTexture1.offset124place2dTexture1.repeatUV124place2dTexture1.rotateFrame124place2dTexture1.rotateUV124place2dTexture1.stagger124place2dTexture1.translateFrame124place2dTexture1.wrapU124place2dTexture1.wrapV124place2dTexture1.outUV124)
                              >15 Visitor::outputUpstreamShader(file1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                                  >17 Visitor::visitFile(file1)
                                    >18 OutputHelper::beginRSL(maya_file,file1)
                                    >18 OutputHelper::addRSLVariable(float,i_alphaGain,alphaGain,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.alphaGain)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                                    >18 OutputHelper::addRSLVariable(bool,i_alphaIsLuminance,alphaIsLuminance,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                                    >18 OutputHelper::addRSLVariable(float,i_alphaOffset,alphaOffset,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.alphaOffset)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                                    >18 OutputHelper::addRSLVariable(color,i_colorGain,colorGain,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.colorGain)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                                    >18 OutputHelper::addRSLVariable(color,i_colorOffset,colorOffset,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.colorOffset)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                                    >18 OutputHelper::addRSLVariable(color,i_defaultColor,defaultColor,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.defaultColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                                    >18 OutputHelper::addRSLVariable(index,i_filterType,filterType,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.filterType)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                                    >18 OutputHelper::addRSLVariable(float,i_filter,filter,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.filter)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                                    >18 OutputHelper::addRSLVariable(float,i_filterOffset,filterOffset,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.filterOffset)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                                    >18 OutputHelper::addRSLVariable(bool,i_invert,invert,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.invert)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                                    >18 OutputHelper::addRSLVariable(vector,i_uvCoord,uvCoord,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.uvCoord)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                            >22 ShaderMgr::hasShaderType(place2dTexture)
                                    >18 OutputHelper::addRSLVariable(bool,i_fileHasAlpha,fileHasAlpha,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                                    >18 OutputHelper::addRSLVariable(float,o_outAlpha,outAlpha,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.outAlpha)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(phong3)
                                            >22 ShaderMgr::hasShaderType(phong)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(file1)
                              >15 ConvertShadingNetwork::getNodeVariables(file1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                >16 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                  >17 ShaderMgr::getValidConnection(place2dTexture1)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong3)
                                    >18 ShaderMgr::hasShaderType(phong)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                              >15 Visitor::addShaderMethodBody(file1,place2dTexture1.outUV124,file1.uvCoord124,file1.outColor124)
                              >15 Visitor::outputUpstreamShader(phong3)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(phong3,phong)
                                  >17 Visitor::visitPhong(phong3)
                                    >18 OutputHelper::beginRSL(maya_phong,phong3)
                                    >18 OutputHelper::addRSLVariable(vector,i_ambientColor,ambientColor,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                                    >18 OutputHelper::addRSLVariable(vector,i_color,color,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(float,i_cosinePower,cosinePower,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.cosinePower)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                                    >18 OutputHelper::addRSLVariable(vector,i_incandescence,incandescence,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(phong3)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(vector,i_transparency,transparency,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,phong3)
                                      >19 ShaderMgr::convertibleConnection(phong3.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(phong3)
                              >15 ConvertShadingNetwork::getNodeVariables(phong3, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeInputVariable(phong3.color, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                  >17 ShaderMgr::getValidConnection(file1)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                              >15 Visitor::addShaderMethodBody(phong3,file1.outColor124,phong3.color124,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(phong3)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong3SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong3SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong3SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong3SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong3SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong3SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong3SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong3SG)
                    >10 Visitor::outputShadingGroup(phong3SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong3SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong3SG)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,miEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,miEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqVolumeShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqLensShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,liqLensShader)
                  >9 ShadingNetworkUser::export_user()
                >8  ConvertShadingNetwork::afterExport()
                  >9 ShadingNetworkUser::afterExport_user()
            >6 liqRibTranslatorNew::worldPrologue__(perspShape)
              >7 Renderer::worldPrologue(perspShape)
            >6 liqRibTranslatorNew::lightBlock__(perspShape)
              >7 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                      >11 liqRibData::getFullPathName()
                    >10 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                        >12 addLightGroupForLight(|pointLight1|pointLightShape1)
              >7 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibTranslatorNew::coordSysBlock__(perspShape)
              >7 Renderer::coordSysBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock__(perspShape)
              >7 liqRibTranslatorNew::objectBlock_data(perspShape)
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|persp|perspShape,perspShape)
                  >9 Renderer::exportOneObject_data(|persp|perspShape,perspShape)
                    >10 Renderer::_writeObject(|persp|perspShape,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_persp_perspShape.1.rib,perspShape,0)
                        >12 liqRibCameraData::write(R:/MyDocuments/maya/projects/default/rib/_persp_perspShape.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|persp|perspShape,R:/MyDocuments/maya/projects/default/rib/_persp_perspShape.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeCameraData.cpp::_write_camera_maya(|persp|perspShape,perspShape)
                              >15 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,miEnvironmentShader)
                              >15 Renderer::cameraOutput(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pCube1|pCubeShape1,perspShape)
                    >10 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube1|pCubeShape1,R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pCube1|pCubeShape1,perspShape)
                              >15 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                              >15 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane1|pPlaneShape1,perspShape)
                              >15 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                              >15 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pSphere1|pSphereShape1,perspShape)
                    >10 Renderer::_writeObject(|pSphere1|pSphereShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pSphere1|pSphereShape1,R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pSphere1|pSphereShape1,perspShape)
                              >15 liqRibHT::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                              >15 _exportVertexFromNodePlug(|pSphere1|pSphereShape1,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::exportOneObject_data(|pSphere2|pSphereShape2,perspShape)
                    >10 Renderer::_writeObject(|pSphere2|pSphereShape2,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pSphere2|pSphereShape2,R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pSphere2|pSphereShape2,perspShape)
                              >15 liqRibHT::find(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                              >15 _exportVertexFromNodePlug(|pSphere2|pSphereShape2,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=82
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=246
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::objectBlock_reference(perspShape)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|persp|perspShape,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|persp|perspShape,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|persp|perspShape,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|persp|perspShape)
                    >10 Renderer::exportLightLinks(perspShape,|persp|perspShape,lightedByWhichLightShapes.size=0)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|persp|perspShape,|persp|perspShape,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|persp|perspShape,|persp|perspShape,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|persp|perspShape,|persp|perspShape,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|persp|perspShape,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|persp|perspShape,v=0,s=0,c=0,,|persp|perspShape,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|persp|perspShape,|persp|perspShape,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|persp|perspShape)
                  >9 Renderer::exportOneObject_reference(|persp|perspShape,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|persp|perspShape,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube1|pCubeShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=0,c=0,,|pCube1|pCubeShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                  >9 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                  >9 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere1|pSphereShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere1|pSphereShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pSphere1|pSphereShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere1|pSphereShape1,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pSphere1|pSphereShape1,v=0,s=0,c=0,,|pSphere1|pSphereShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere1|pSphereShape1)
                  >9 Renderer::exportOneObject_reference(|pSphere1|pSphereShape1,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pSphere1|pSphereShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere2|pSphereShape2,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere2|pSphereShape2)
                    >10 Renderer::exportLightLinks(perspShape,|pSphere2|pSphereShape2,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere2|pSphereShape2,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pSphere2|pSphereShape2,v=0,s=0,c=0,,|pSphere2|pSphereShape2,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere2|pSphereShape2)
                  >9 Renderer::exportOneObject_reference(|pSphere2|pSphereShape2,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pSphere2|pSphereShape2,perspShape)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(1)
              >7 Renderer::frameEpilogue(1)
            >6 liqRibTranslatorNew::ribEpilogue__(perspShape)
              >7 Renderer::ribPrologue_end(perspShape)
                >8 Renderer::cookInstanceGroup()
                >8 Renderer::render()
                  >9 Renderer::renderPreview(200,150,0,0,perspShape,perspShape,perspShape_option)
                    >10 Renderer::_renderPreview(200,150,0,0,perspShape,|persp,perspShape_option)
          >5 Renderer::HeroPassEnd(perspShape)
        >4 liqRenderScript::addJob(job.title=vertex_normalFrame1,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
      >3 OutputMgr::uninit()
        >4 OutputESS::~OutputESS()
        >4 OutputBase::~OutputBase()
        >4 OutputESA::~OutputESA()
        >4 OutputBase::~OutputBase()
        >4 OutputCall::~OutputCall()
        >4 OutputBase::~OutputBase()
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
      >3 ShaderMgr::clearValidConnection()
      >3 Renderer::~Renderer()
    >2 RendererMgr::unsetFactory()
