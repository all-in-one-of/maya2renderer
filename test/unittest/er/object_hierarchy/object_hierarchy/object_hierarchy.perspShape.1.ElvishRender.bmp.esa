//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/object_hierarchy
//    User  : yaoyansi

//############################### option #
ei_options("perspShape_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_lambert", "lambert1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_param_vector("i_color",0.5,0.5,0.5);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_bool("i_refractions",0);
ei_shader_param_scalar("i_refractiveIndex",1);
ei_shader_param_index("i_refractionLimit",6);
ei_shader_param_scalar("i_lightAbsorbance",0);
ei_shader_param_scalar("i_shadowAttenuation",0.5);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("initialShadingGroup");
ei_surface_shader("lambert1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1.0744);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0.793613,3.85802,-4.58518,1);
ei_declare("|pCube1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|pCone1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.89839,14.6001,12.0807,1);
ei_declare("|pCube1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|pCone1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|pCone1|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|pCone1|pPlane2|pPlane5_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|pCone1|pPlane3_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|pCone1|pPlane3|pPlane4_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|pCube2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|group1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|group1|pPlane1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|group1|pPlane6_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|group2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|group2|pPlane7_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|group2|group3_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1|group2|group3|pPlane8_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// maya settings: focal=35.000000, aperture = 36.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|persp|perspShape");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/object_hierarchy.perspShape.1.ElvishRender.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(36);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCubeShape1, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCubeShape1
//### UV(map1), size=14
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCubeShape1" );
{
eiTag tag;
//vertex positions(required), size=36
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_end_tab();
//### N ###(optional)
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.625000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_end_tab();
//### triangles(required) size=36
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_tab_add_index(6);
ei_tab_add_index(7);
ei_tab_add_index(8);
ei_tab_add_index(9);
ei_tab_add_index(10);
ei_tab_add_index(11);
ei_tab_add_index(12);
ei_tab_add_index(13);
ei_tab_add_index(14);
ei_tab_add_index(15);
ei_tab_add_index(16);
ei_tab_add_index(17);
ei_tab_add_index(18);
ei_tab_add_index(19);
ei_tab_add_index(20);
ei_tab_add_index(21);
ei_tab_add_index(22);
ei_tab_add_index(23);
ei_tab_add_index(24);
ei_tab_add_index(25);
ei_tab_add_index(26);
ei_tab_add_index(27);
ei_tab_add_index(28);
ei_tab_add_index(29);
ei_tab_add_index(30);
ei_tab_add_index(31);
ei_tab_add_index(32);
ei_tab_add_index(33);
ei_tab_add_index(34);
ei_tab_add_index(35);
ei_end_tab();
}//|pCube1|pCubeShape1
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCone1|pConeShape1, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCone1|pConeShape1
//### UV(map1), size=8
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCone1|pConeShape1" );
{
eiTag tag;
//vertex positions(required), size=12
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -1.000000, -0.866026 );
ei_tab_add_vector( 1.000000, -1.000000, 0.000000 );
ei_tab_add_vector( -0.500000, -1.000000, 0.866025 );
ei_tab_add_vector( -0.500000, -1.000000, -0.866026 );
ei_tab_add_vector( -0.500000, -1.000000, 0.866025 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( -0.500000, -1.000000, 0.866025 );
ei_tab_add_vector( 1.000000, -1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 1.000000, -1.000000, 0.000000 );
ei_tab_add_vector( -0.500000, -1.000000, -0.866026 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ###(optional)
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.375000, 0.033494 );
ei_tab_add_vector2( 0.750000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.466506 );
ei_tab_add_vector2( 0.250000, 0.500000 );
ei_tab_add_vector2( 0.416667, 0.500000 );
ei_tab_add_vector2( 0.500000, 1.000000 );
ei_tab_add_vector2( 0.416667, 0.500000 );
ei_tab_add_vector2( 0.583333, 0.500000 );
ei_tab_add_vector2( 0.500000, 1.000000 );
ei_tab_add_vector2( 0.583333, 0.500000 );
ei_tab_add_vector2( 0.750000, 0.500000 );
ei_tab_add_vector2( 0.500000, 1.000000 );
ei_end_tab();
//### triangles(required) size=12
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_tab_add_index(6);
ei_tab_add_index(7);
ei_tab_add_index(8);
ei_tab_add_index(9);
ei_tab_add_index(10);
ei_tab_add_index(11);
ei_end_tab();
}//|pCube1|pCone1|pConeShape1
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCone1|pPlane2|pPlaneShape2, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCone1|pPlane2|pPlaneShape2
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCone1|pPlane2|pPlaneShape2" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.949185, -0.000000, 0.274776 );
ei_tab_add_vector( 0.949185, -0.000000, 0.274776 );
ei_tab_add_vector( -0.949185, 0.000000, -0.274776 );
ei_tab_add_vector( -0.949185, 0.000000, -0.274776 );
ei_tab_add_vector( 0.949185, -0.000000, 0.274776 );
ei_tab_add_vector( 0.949185, 0.000000, -0.274776 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.289486 );
ei_tab_add_vector2( 0.000000, 0.289486 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.289486 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pCube1|pCone1|pPlane2|pPlaneShape2
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.552456, -0.000000, 0.210827 );
ei_tab_add_vector( 0.552456, -0.000000, 0.210827 );
ei_tab_add_vector( -0.552456, 0.000000, -0.210827 );
ei_tab_add_vector( -0.552456, 0.000000, -0.210827 );
ei_tab_add_vector( 0.552456, -0.000000, 0.210827 );
ei_tab_add_vector( 0.552456, 0.000000, -0.210827 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.381619 );
ei_tab_add_vector2( 0.000000, 0.381619 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.381619 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCone1|pPlane3|pPlaneShape3, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCone1|pPlane3|pPlaneShape3
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCone1|pPlane3|pPlaneShape3" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -1.127537, -0.000000, 0.371106 );
ei_tab_add_vector( 1.127537, -0.000000, 0.371106 );
ei_tab_add_vector( -1.127537, 0.000000, -0.371106 );
ei_tab_add_vector( -1.127537, 0.000000, -0.371106 );
ei_tab_add_vector( 1.127537, -0.000000, 0.371106 );
ei_tab_add_vector( 1.127537, 0.000000, -0.371106 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.329130 );
ei_tab_add_vector2( 0.000000, 0.329130 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.329130 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pCube1|pCone1|pPlane3|pPlaneShape3
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.584879, -0.000000, 0.312833 );
ei_tab_add_vector( 0.584879, -0.000000, 0.312833 );
ei_tab_add_vector( -0.584879, 0.000000, -0.312833 );
ei_tab_add_vector( -0.584879, 0.000000, -0.312833 );
ei_tab_add_vector( 0.584879, -0.000000, 0.312833 );
ei_tab_add_vector( 0.584879, 0.000000, -0.312833 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.534868 );
ei_tab_add_vector2( 0.000000, 0.534868 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.534868 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCube2|pCubeShape2, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCube2|pCubeShape2
//### UV(map1), size=14
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCube2|pCubeShape2" );
{
eiTag tag;
//vertex positions(required), size=36
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -2.358814, -0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, -0.546387, 0.523220 );
ei_tab_add_vector( -2.358814, 0.546387, 0.523220 );
ei_tab_add_vector( -2.358814, 0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, -0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, 0.546387, 0.523220 );
ei_tab_add_vector( -2.358814, 0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, 0.546387, 0.523220 );
ei_tab_add_vector( -2.358814, 0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, 0.546387, -0.523220 );
ei_tab_add_vector( 2.358814, 0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, 0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, 0.546387, -0.523220 );
ei_tab_add_vector( 2.358814, 0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, -0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, -0.546387, -0.523220 );
ei_tab_add_vector( 2.358814, 0.546387, -0.523220 );
ei_tab_add_vector( 2.358814, -0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, -0.546387, -0.523220 );
ei_tab_add_vector( 2.358814, -0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, -0.546387, 0.523220 );
ei_tab_add_vector( -2.358814, -0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, -0.546387, -0.523220 );
ei_tab_add_vector( 2.358814, -0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, -0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, -0.546387, -0.523220 );
ei_tab_add_vector( 2.358814, 0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, 0.546387, 0.523220 );
ei_tab_add_vector( 2.358814, -0.546387, -0.523220 );
ei_tab_add_vector( 2.358814, 0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, -0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, -0.546387, 0.523220 );
ei_tab_add_vector( -2.358814, 0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, 0.546387, -0.523220 );
ei_tab_add_vector( -2.358814, -0.546387, 0.523220 );
ei_tab_add_vector( -2.358814, 0.546387, 0.523220 );
ei_end_tab();
//### N ###(optional)
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.625000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_end_tab();
//### triangles(required) size=36
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_tab_add_index(6);
ei_tab_add_index(7);
ei_tab_add_index(8);
ei_tab_add_index(9);
ei_tab_add_index(10);
ei_tab_add_index(11);
ei_tab_add_index(12);
ei_tab_add_index(13);
ei_tab_add_index(14);
ei_tab_add_index(15);
ei_tab_add_index(16);
ei_tab_add_index(17);
ei_tab_add_index(18);
ei_tab_add_index(19);
ei_tab_add_index(20);
ei_tab_add_index(21);
ei_tab_add_index(22);
ei_tab_add_index(23);
ei_tab_add_index(24);
ei_tab_add_index(25);
ei_tab_add_index(26);
ei_tab_add_index(27);
ei_tab_add_index(28);
ei_tab_add_index(29);
ei_tab_add_index(30);
ei_tab_add_index(31);
ei_tab_add_index(32);
ei_tab_add_index(33);
ei_tab_add_index(34);
ei_tab_add_index(35);
ei_end_tab();
}//|pCube1|pCube2|pCubeShape2
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|group1|pPlane1|pPlaneShape1, 0, 0

//############################### mesh #
//shape full path name=|pCube1|group1|pPlane1|pPlaneShape1
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|group1|pPlane1|pPlaneShape1" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -2.082941, -0.000000, 0.936609 );
ei_tab_add_vector( 2.082941, -0.000000, 0.936609 );
ei_tab_add_vector( -2.082941, 0.000000, -0.936609 );
ei_tab_add_vector( -2.082941, 0.000000, -0.936609 );
ei_tab_add_vector( 2.082941, -0.000000, 0.936609 );
ei_tab_add_vector( 2.082941, 0.000000, -0.936609 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.449657 );
ei_tab_add_vector2( 0.000000, 0.449657 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.449657 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pCube1|group1|pPlane1|pPlaneShape1
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|group1|pPlane6|pPlaneShape6, 0, 0

//############################### mesh #
//shape full path name=|pCube1|group1|pPlane6|pPlaneShape6
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|group1|pPlane6|pPlaneShape6" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -2.013537, -0.000000, 0.850398 );
ei_tab_add_vector( 2.013537, -0.000000, 0.850398 );
ei_tab_add_vector( -2.013537, 0.000000, -0.850398 );
ei_tab_add_vector( -2.013537, 0.000000, -0.850398 );
ei_tab_add_vector( 2.013537, -0.000000, 0.850398 );
ei_tab_add_vector( 2.013537, 0.000000, -0.850398 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.422340 );
ei_tab_add_vector2( 0.000000, 0.422340 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.422340 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pCube1|group1|pPlane6|pPlaneShape6
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|group2|pPlane7|pPlaneShape7, 0, 0

//############################### mesh #
//shape full path name=|pCube1|group2|pPlane7|pPlaneShape7
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|group2|pPlane7|pPlaneShape7" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -2.384680, -0.000000, 1.036602 );
ei_tab_add_vector( 2.384680, -0.000000, 1.036602 );
ei_tab_add_vector( -2.384680, 0.000000, -1.036602 );
ei_tab_add_vector( -2.384680, 0.000000, -1.036602 );
ei_tab_add_vector( 2.384680, -0.000000, 1.036602 );
ei_tab_add_vector( 2.384680, 0.000000, -1.036602 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.434692 );
ei_tab_add_vector2( 0.000000, 0.434692 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.434692 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pCube1|group2|pPlane7|pPlaneShape7
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|group2|group3|pPlane8|pPlaneShape8, 0, 0

//############################### mesh #
//shape full path name=|pCube1|group2|group3|pPlane8|pPlaneShape8
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|group2|group3|pPlane8|pPlaneShape8" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -1.501772, -0.000000, 0.423697 );
ei_tab_add_vector( 1.501772, -0.000000, 0.423697 );
ei_tab_add_vector( -1.501772, 0.000000, -0.423697 );
ei_tab_add_vector( -1.501772, 0.000000, -0.423697 );
ei_tab_add_vector( 1.501772, -0.000000, 0.423697 );
ei_tab_add_vector( 1.501772, 0.000000, -0.423697 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.282131 );
ei_tab_add_vector2( 0.000000, 0.282131 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.282131 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pCube1|group2|group3|pPlane8|pPlaneShape8
ei_end_object();
//|persp|perspShape is not lighted.
//--------------------------
//ribNode->name=|persp|perspShape
//ribNode's transform node=|persp
//ribNode->object(0)->getDataPtr()->getFullPathName()=|persp|perspShape
ei_instance("|persp");
//|persp|perspShape's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|persp|perspShape
//shape full path name=|persp|perspShape
ei_element("|persp|perspShape");
ei_transform(0.62388,0,0.78152,0,   0.705614,0.429907,-0.563284,0,   -0.335981,0.902873,0.26821,0,   -9.42968,25.3401,7.52761,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|persp_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|pCubeShape1
//ribNode's transform node=|pCube1
//childCount=5
//child(0):|pCube1|pCubeShape1
//child(1):|pCube1|pCone1
//child(2):|pCube1|pCube2
//child(3):|pCube1|group1
//child(4):|pCube1|group2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCubeShape1
ei_instance("|pCube1");
//|pCube1|pCubeShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|pCubeShape1
//shape full path name=|pCube1|pCubeShape1
ei_element("|pCube1|pCubeShape1");
ei_transform(0.960593,0,0.277957,0,   -0,1,0,0,   -0.277957,-0,0.960593,0,   1.44025,0,-0.605115,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|pCone1|pConeShape1
//ribNode's transform node=|pCube1|pCone1
//childCount=3
//child(0):|pCube1|pCone1|pConeShape1
//child(1):|pCube1|pCone1|pPlane2
//child(2):|pCube1|pCone1|pPlane3
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCone1|pConeShape1
ei_instance("|pCube1|pCone1");
//|pCube1|pCone1|pConeShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|pCone1|pConeShape1
//shape full path name=|pCube1|pCone1|pConeShape1
ei_element("|pCube1|pCone1|pConeShape1");
ei_transform(0.892513,-0.411749,0.184074,0,   0.158778,-0.0951586,-0.982718,0,   0.422149,0.906315,-0.0195535,0,   3.06106,0,-6.60509,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|pCone1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|pCone1|pPlane2|pPlaneShape2
//ribNode's transform node=|pCube1|pCone1|pPlane2
//childCount=2
//child(0):|pCube1|pCone1|pPlane2|pPlaneShape2
//child(1):|pCube1|pCone1|pPlane2|pPlane5
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCone1|pPlane2|pPlaneShape2
ei_instance("|pCube1|pCone1|pPlane2");
//|pCube1|pCone1|pPlane2|pPlaneShape2 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|pCone1|pPlane2|pPlaneShape2
//shape full path name=|pCube1|pCone1|pPlane2|pPlaneShape2
ei_element("|pCube1|pCone1|pPlane2|pPlaneShape2");
ei_transform(1,1.11022e-016,-2.25514e-017,0,   -5.55112e-017,1,1.52656e-016,0,   -3.46945e-017,0,1,0,   0.614277,3.33067e-016,-7.36487,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|pCone1|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5
//ribNode's transform node=|pCube1|pCone1|pPlane2|pPlane5
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5
ei_instance("|pCube1|pCone1|pPlane2|pPlane5");
//|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5
//shape full path name=|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5
ei_element("|pCube1|pCone1|pPlane2|pPlane5|pPlaneShape5");
ei_transform(1,1.11022e-016,-2.25514e-017,0,   -5.55112e-017,1,1.52656e-016,0,   -3.46945e-017,0,1,0,   0.700613,2.33253e-016,-8.17253,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|pCone1|pPlane2|pPlane5_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|pCone1|pPlane3|pPlaneShape3
//ribNode's transform node=|pCube1|pCone1|pPlane3
//childCount=2
//child(0):|pCube1|pCone1|pPlane3|pPlaneShape3
//child(1):|pCube1|pCone1|pPlane3|pPlane4
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCone1|pPlane3|pPlaneShape3
ei_instance("|pCube1|pCone1|pPlane3");
//|pCube1|pCone1|pPlane3|pPlaneShape3 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|pCone1|pPlane3|pPlaneShape3
//shape full path name=|pCube1|pCone1|pPlane3|pPlaneShape3
ei_element("|pCube1|pCone1|pPlane3|pPlaneShape3");
ei_transform(0.981759,4.44089e-016,0.190129,0,   -4.44089e-016,1,1.00614e-016,0,   -0.190129,8.32667e-017,0.981759,0,   5.32941,4.44089e-016,-6.90144,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|pCone1|pPlane3_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4
//ribNode's transform node=|pCube1|pCone1|pPlane3|pPlane4
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4
ei_instance("|pCube1|pCone1|pPlane3|pPlane4");
//|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4
//shape full path name=|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4
ei_element("|pCube1|pCone1|pPlane3|pPlane4|pPlaneShape4");
ei_transform(0.175354,2.37284e-016,0.984505,0,   -4.44089e-016,1,1.00614e-016,0,   -0.984505,-3.84506e-016,0.175354,0,   4.96251,-2.56776e-016,-7.97898,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|pCone1|pPlane3|pPlane4_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|pCube2|pCubeShape2
//ribNode's transform node=|pCube1|pCube2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCube2|pCubeShape2
ei_instance("|pCube1|pCube2");
//|pCube1|pCube2|pCubeShape2 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|pCube2|pCubeShape2
//shape full path name=|pCube1|pCube2|pCubeShape2
ei_element("|pCube1|pCube2|pCubeShape2");
ei_transform(0.884621,0,0.466311,0,   -0,1,0,0,   -0.466311,-0,0.884621,0,   -3.3201,0.546387,-2.87988,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|pCube2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|group1|pPlane1|pPlaneShape1
//ribNode's transform node=|pCube1|group1|pPlane1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|group1|pPlane1|pPlaneShape1
ei_instance("|pCube1|group1|pPlane1");
//|pCube1|group1|pPlane1|pPlaneShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|group1|pPlane1|pPlaneShape1
//shape full path name=|pCube1|group1|pPlane1|pPlaneShape1
ei_element("|pCube1|group1|pPlane1|pPlaneShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -2.89124,0,1.61359,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|group1|pPlane1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|group1|pPlane6|pPlaneShape6
//ribNode's transform node=|pCube1|group1|pPlane6
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|group1|pPlane6|pPlaneShape6
ei_instance("|pCube1|group1|pPlane6");
//|pCube1|group1|pPlane6|pPlaneShape6 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|group1|pPlane6|pPlaneShape6
//shape full path name=|pCube1|group1|pPlane6|pPlaneShape6
ei_element("|pCube1|group1|pPlane6|pPlaneShape6");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -2.78416,0,3.80885,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|group1|pPlane6_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|group2|pPlane7|pPlaneShape7
//ribNode's transform node=|pCube1|group2|pPlane7
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|group2|pPlane7|pPlaneShape7
ei_instance("|pCube1|group2|pPlane7");
//|pCube1|group2|pPlane7|pPlaneShape7 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|group2|pPlane7|pPlaneShape7
//shape full path name=|pCube1|group2|pPlane7|pPlaneShape7
ei_element("|pCube1|group2|pPlane7|pPlaneShape7");
ei_transform(0.865629,0.434537,0.248725,0,   -0.392393,0.89733,-0.202056,0,   -0.310989,0.0773074,0.947264,0,   3.25973,0.17767,2.44126,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|group2|pPlane7_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|group2|group3|pPlane8|pPlaneShape8
//ribNode's transform node=|pCube1|group2|group3|pPlane8
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|group2|group3|pPlane8|pPlaneShape8
ei_instance("|pCube1|group2|group3|pPlane8");
//|pCube1|group2|group3|pPlane8|pPlaneShape8 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|group2|group3|pPlane8|pPlaneShape8
//shape full path name=|pCube1|group2|group3|pPlane8|pPlaneShape8
ei_element("|pCube1|group2|group3|pPlane8|pPlaneShape8");
ei_transform(0.136262,0.990416,-0.0225651,0,   -0.977109,0.138118,0.16181,0,   0.163376,-1.80411e-016,0.986564,0,   4.78392,-9.11358e-016,4.75037,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1|group2|group3|pPlane8_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("perspShape");
//camera
ei_add_instance("|persp");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pCube1");
ei_add_instance("|pCube1|group1|pPlane1");
ei_add_instance("|pCube1|group1|pPlane6");
ei_add_instance("|pCube1|group2|group3|pPlane8");
ei_add_instance("|pCube1|group2|pPlane7");
ei_add_instance("|pCube1|pCone1");
ei_add_instance("|pCube1|pCone1|pPlane2");
ei_add_instance("|pCube1|pCone1|pPlane2|pPlane5");
ei_add_instance("|pCube1|pCone1|pPlane3");
ei_add_instance("|pCube1|pCone1|pPlane3|pPlane4");
ei_add_instance("|pCube1|pCube2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "perspShape", "|persp", "perspShape_option" );
ei_render( "perspShape", "|persp", "perspShape_option" );
ei_end_context();
//------------------------------------------------

