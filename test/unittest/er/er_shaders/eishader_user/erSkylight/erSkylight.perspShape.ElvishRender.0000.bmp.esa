//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
ei_link("eiSHADER_user");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/erSkylight
//    User  : yaoyansi

//############################### option #
ei_options("perspShape_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_lambert", "lambert1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_param_vector("i_color",0.5,0.5,0.5);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_bool("i_refractions",0);
ei_shader_param_scalar("i_refractiveIndex",1);
ei_shader_param_index("i_refractionLimit",6);
ei_shader_param_scalar("i_lightAbsorbance",0);
ei_shader_param_scalar("i_shadowAttenuation",0.5);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("initialShadingGroup");
ei_surface_shader("lambert1");
ei_end_material();

ei_shader("maya_physicalsky", "er_physicalsky1");
ei_shader_param_vector("i_sun_dir",0.577,0.577,0.577);
ei_shader_param_scalar("i_sun_disk_size",2);
ei_shader_param_scalar("i_sun_disk_intensity",7);
ei_shader_param_scalar("i_sun_glow_size",1);
ei_shader_param_scalar("i_sun_glow_intensity",1);
ei_shader_param_scalar("i_sun_glow_falloff",5);
ei_shader_param_vector("i_ground_color",0.2,0.2,0.2);
ei_shader_param_scalar("i_ground_blur",0.01);
ei_shader_param_int("i_type",0);
ei_shader_param_scalar("i_haze",5);
ei_shader_param_vector("i_zenith_color",0.109,0.109,0.109);
ei_shader_param_scalar("i_a",-1);
ei_shader_param_scalar("i_b",-0.32);
ei_shader_param_scalar("i_c",10);
ei_shader_param_scalar("i_d",-3);
ei_shader_param_scalar("i_e",0.45);
ei_shader_param_scalar("i_intensity",0.5);
ei_end_shader();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

ei_shader("maya_physicalsky", "er_physicalsky1");
ei_shader_param_vector("i_sun_dir",0.577,0.577,0.577);
ei_shader_param_scalar("i_sun_disk_size",2);
ei_shader_param_scalar("i_sun_disk_intensity",7);
ei_shader_param_scalar("i_sun_glow_size",1);
ei_shader_param_scalar("i_sun_glow_intensity",1);
ei_shader_param_scalar("i_sun_glow_falloff",5);
ei_shader_param_vector("i_ground_color",0.2,0.2,0.2);
ei_shader_param_scalar("i_ground_blur",0.01);
ei_shader_param_int("i_type",0);
ei_shader_param_scalar("i_haze",5);
ei_shader_param_vector("i_zenith_color",0.109,0.109,0.109);
ei_shader_param_scalar("i_a",-1);
ei_shader_param_scalar("i_b",-0.32);
ei_shader_param_scalar("i_c",10);
ei_shader_param_scalar("i_d",-3);
ei_shader_param_scalar("i_e",0.45);
ei_shader_param_scalar("i_intensity",0.5);
ei_end_shader();

ei_shader("erSkylight", "erSkylight1");
ei_shader_param_token("i_env_shader", ei_token("er_physicalsky1") );
ei_shader_param_int("i_resolution",32);
ei_shader_param_scalar("i_max_dist",10000);
ei_end_shader();

ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("erSkylight1");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   6.26856,3.07202,5.14781,1);
ei_declare("|pPlane1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pSphere1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// maya settings: focal=35.000000, aperture = 36.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|persp|perspShape");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/erSkylight.perspShape.ElvishRender.0001.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(36);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_environment_shader("er_physicalsky1");
ei_end_camera();

// Renderer::exportOneGeometry_Mesh(|pPlane1|pPlaneShape1, 0, 0

//############################### mesh #
//shape full path name=|pPlane1|pPlaneShape1
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane1|pPlaneShape1" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -3.681589, -0.000000, 3.381520 );
ei_tab_add_vector( 3.681589, -0.000000, 3.381520 );
ei_tab_add_vector( -3.681589, 0.000000, -3.381520 );
ei_tab_add_vector( -3.681589, 0.000000, -3.381520 );
ei_tab_add_vector( 3.681589, -0.000000, 3.381520 );
ei_tab_add_vector( 3.681589, 0.000000, -3.381520 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.918495 );
ei_tab_add_vector2( 0.000000, 0.918495 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.918495 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane1|pPlaneShape1
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pSphere1|pSphereShape1, 0, 0

//############################### mesh #
//shape full path name=|pSphere1|pSphereShape1
//### UV(map1), size=22
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pSphere1|pSphereShape1" );
{
eiTag tag;
//vertex positions(required), size=72
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.306458, -0.843607, -0.530801 );
ei_tab_add_vector( -0.306458, -0.843607, 0.530801 );
ei_tab_add_vector( -0.495860, -0.322229, -0.858854 );
ei_tab_add_vector( -0.495860, -0.322229, -0.858854 );
ei_tab_add_vector( -0.306458, -0.843607, 0.530801 );
ei_tab_add_vector( -0.495860, -0.322229, 0.858854 );
ei_tab_add_vector( -0.306458, -0.843607, 0.530801 );
ei_tab_add_vector( 0.612916, -0.843607, 0.000000 );
ei_tab_add_vector( -0.495860, -0.322229, 0.858854 );
ei_tab_add_vector( -0.495860, -0.322229, 0.858854 );
ei_tab_add_vector( 0.612916, -0.843607, 0.000000 );
ei_tab_add_vector( 0.991719, -0.322229, 0.000000 );
ei_tab_add_vector( 0.612916, -0.843607, 0.000000 );
ei_tab_add_vector( -0.306458, -0.843607, -0.530801 );
ei_tab_add_vector( 0.991719, -0.322229, 0.000000 );
ei_tab_add_vector( 0.991719, -0.322229, 0.000000 );
ei_tab_add_vector( -0.306458, -0.843607, -0.530801 );
ei_tab_add_vector( -0.495860, -0.322229, -0.858854 );
ei_tab_add_vector( -0.495860, -0.322229, -0.858854 );
ei_tab_add_vector( -0.495860, -0.322229, 0.858854 );
ei_tab_add_vector( -0.495860, 0.322229, -0.858854 );
ei_tab_add_vector( -0.495860, 0.322229, -0.858854 );
ei_tab_add_vector( -0.495860, -0.322229, 0.858854 );
ei_tab_add_vector( -0.495860, 0.322229, 0.858854 );
ei_tab_add_vector( -0.495860, -0.322229, 0.858854 );
ei_tab_add_vector( 0.991719, -0.322229, 0.000000 );
ei_tab_add_vector( -0.495860, 0.322229, 0.858854 );
ei_tab_add_vector( -0.495860, 0.322229, 0.858854 );
ei_tab_add_vector( 0.991719, -0.322229, 0.000000 );
ei_tab_add_vector( 0.991719, 0.322229, 0.000000 );
ei_tab_add_vector( 0.991719, -0.322229, 0.000000 );
ei_tab_add_vector( -0.495860, -0.322229, -0.858854 );
ei_tab_add_vector( 0.991719, 0.322229, 0.000000 );
ei_tab_add_vector( 0.991719, 0.322229, 0.000000 );
ei_tab_add_vector( -0.495860, -0.322229, -0.858854 );
ei_tab_add_vector( -0.495860, 0.322229, -0.858854 );
ei_tab_add_vector( -0.495860, 0.322229, -0.858854 );
ei_tab_add_vector( -0.495860, 0.322229, 0.858854 );
ei_tab_add_vector( -0.306458, 0.843607, -0.530801 );
ei_tab_add_vector( -0.306458, 0.843607, -0.530801 );
ei_tab_add_vector( -0.495860, 0.322229, 0.858854 );
ei_tab_add_vector( -0.306458, 0.843607, 0.530801 );
ei_tab_add_vector( -0.495860, 0.322229, 0.858854 );
ei_tab_add_vector( 0.991719, 0.322229, 0.000000 );
ei_tab_add_vector( -0.306458, 0.843607, 0.530801 );
ei_tab_add_vector( -0.306458, 0.843607, 0.530801 );
ei_tab_add_vector( 0.991719, 0.322229, 0.000000 );
ei_tab_add_vector( 0.612916, 0.843607, 0.000000 );
ei_tab_add_vector( 0.991719, 0.322229, 0.000000 );
ei_tab_add_vector( -0.495860, 0.322229, -0.858854 );
ei_tab_add_vector( 0.612916, 0.843607, 0.000000 );
ei_tab_add_vector( 0.612916, 0.843607, 0.000000 );
ei_tab_add_vector( -0.495860, 0.322229, -0.858854 );
ei_tab_add_vector( -0.306458, 0.843607, -0.530801 );
ei_tab_add_vector( -0.306458, -0.843607, 0.530801 );
ei_tab_add_vector( -0.306458, -0.843607, -0.530801 );
ei_tab_add_vector( 0.000000, -1.042755, 0.000000 );
ei_tab_add_vector( 0.612916, -0.843607, 0.000000 );
ei_tab_add_vector( -0.306458, -0.843607, 0.530801 );
ei_tab_add_vector( 0.000000, -1.042755, 0.000000 );
ei_tab_add_vector( -0.306458, -0.843607, -0.530801 );
ei_tab_add_vector( 0.612916, -0.843607, 0.000000 );
ei_tab_add_vector( 0.000000, -1.042755, 0.000000 );
ei_tab_add_vector( -0.306458, 0.843607, -0.530801 );
ei_tab_add_vector( -0.306458, 0.843607, 0.530801 );
ei_tab_add_vector( 0.000000, 1.042755, 0.000000 );
ei_tab_add_vector( -0.306458, 0.843607, 0.530801 );
ei_tab_add_vector( 0.612916, 0.843607, 0.000000 );
ei_tab_add_vector( 0.000000, 1.042755, 0.000000 );
ei_tab_add_vector( 0.612916, 0.843607, 0.000000 );
ei_tab_add_vector( -0.306458, 0.843607, -0.530801 );
ei_tab_add_vector( 0.000000, 1.042755, 0.000000 );
ei_end_tab();
//### N ###(optional)
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.200000 );
ei_tab_add_vector2( 0.333333, 0.200000 );
ei_tab_add_vector2( 0.000000, 0.400000 );
ei_tab_add_vector2( 0.000000, 0.400000 );
ei_tab_add_vector2( 0.333333, 0.200000 );
ei_tab_add_vector2( 0.333333, 0.400000 );
ei_tab_add_vector2( 0.333333, 0.200000 );
ei_tab_add_vector2( 0.666667, 0.200000 );
ei_tab_add_vector2( 0.333333, 0.400000 );
ei_tab_add_vector2( 0.333333, 0.400000 );
ei_tab_add_vector2( 0.666667, 0.200000 );
ei_tab_add_vector2( 0.666667, 0.400000 );
ei_tab_add_vector2( 0.666667, 0.200000 );
ei_tab_add_vector2( 1.000000, 0.200000 );
ei_tab_add_vector2( 0.666667, 0.400000 );
ei_tab_add_vector2( 0.666667, 0.400000 );
ei_tab_add_vector2( 1.000000, 0.200000 );
ei_tab_add_vector2( 1.000000, 0.400000 );
ei_tab_add_vector2( 0.000000, 0.400000 );
ei_tab_add_vector2( 0.333333, 0.400000 );
ei_tab_add_vector2( 0.000000, 0.600000 );
ei_tab_add_vector2( 0.000000, 0.600000 );
ei_tab_add_vector2( 0.333333, 0.400000 );
ei_tab_add_vector2( 0.333333, 0.600000 );
ei_tab_add_vector2( 0.333333, 0.400000 );
ei_tab_add_vector2( 0.666667, 0.400000 );
ei_tab_add_vector2( 0.333333, 0.600000 );
ei_tab_add_vector2( 0.333333, 0.600000 );
ei_tab_add_vector2( 0.666667, 0.400000 );
ei_tab_add_vector2( 0.666667, 0.600000 );
ei_tab_add_vector2( 0.666667, 0.400000 );
ei_tab_add_vector2( 1.000000, 0.400000 );
ei_tab_add_vector2( 0.666667, 0.600000 );
ei_tab_add_vector2( 0.666667, 0.600000 );
ei_tab_add_vector2( 1.000000, 0.400000 );
ei_tab_add_vector2( 1.000000, 0.600000 );
ei_tab_add_vector2( 0.000000, 0.600000 );
ei_tab_add_vector2( 0.333333, 0.600000 );
ei_tab_add_vector2( 0.000000, 0.800000 );
ei_tab_add_vector2( 0.000000, 0.800000 );
ei_tab_add_vector2( 0.333333, 0.600000 );
ei_tab_add_vector2( 0.333333, 0.800000 );
ei_tab_add_vector2( 0.333333, 0.600000 );
ei_tab_add_vector2( 0.666667, 0.600000 );
ei_tab_add_vector2( 0.333333, 0.800000 );
ei_tab_add_vector2( 0.333333, 0.800000 );
ei_tab_add_vector2( 0.666667, 0.600000 );
ei_tab_add_vector2( 0.666667, 0.800000 );
ei_tab_add_vector2( 0.666667, 0.600000 );
ei_tab_add_vector2( 1.000000, 0.600000 );
ei_tab_add_vector2( 0.666667, 0.800000 );
ei_tab_add_vector2( 0.666667, 0.800000 );
ei_tab_add_vector2( 1.000000, 0.600000 );
ei_tab_add_vector2( 1.000000, 0.800000 );
ei_tab_add_vector2( 0.333333, 0.200000 );
ei_tab_add_vector2( 0.000000, 0.200000 );
ei_tab_add_vector2( 0.166667, 0.000000 );
ei_tab_add_vector2( 0.666667, 0.200000 );
ei_tab_add_vector2( 0.333333, 0.200000 );
ei_tab_add_vector2( 0.500000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.200000 );
ei_tab_add_vector2( 0.666667, 0.200000 );
ei_tab_add_vector2( 0.833333, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.800000 );
ei_tab_add_vector2( 0.333333, 0.800000 );
ei_tab_add_vector2( 0.166667, 1.000000 );
ei_tab_add_vector2( 0.333333, 0.800000 );
ei_tab_add_vector2( 0.666667, 0.800000 );
ei_tab_add_vector2( 0.500000, 1.000000 );
ei_tab_add_vector2( 0.666667, 0.800000 );
ei_tab_add_vector2( 1.000000, 0.800000 );
ei_tab_add_vector2( 0.833333, 1.000000 );
ei_end_tab();
//### triangles(required) size=72
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_tab_add_index(6);
ei_tab_add_index(7);
ei_tab_add_index(8);
ei_tab_add_index(9);
ei_tab_add_index(10);
ei_tab_add_index(11);
ei_tab_add_index(12);
ei_tab_add_index(13);
ei_tab_add_index(14);
ei_tab_add_index(15);
ei_tab_add_index(16);
ei_tab_add_index(17);
ei_tab_add_index(18);
ei_tab_add_index(19);
ei_tab_add_index(20);
ei_tab_add_index(21);
ei_tab_add_index(22);
ei_tab_add_index(23);
ei_tab_add_index(24);
ei_tab_add_index(25);
ei_tab_add_index(26);
ei_tab_add_index(27);
ei_tab_add_index(28);
ei_tab_add_index(29);
ei_tab_add_index(30);
ei_tab_add_index(31);
ei_tab_add_index(32);
ei_tab_add_index(33);
ei_tab_add_index(34);
ei_tab_add_index(35);
ei_tab_add_index(36);
ei_tab_add_index(37);
ei_tab_add_index(38);
ei_tab_add_index(39);
ei_tab_add_index(40);
ei_tab_add_index(41);
ei_tab_add_index(42);
ei_tab_add_index(43);
ei_tab_add_index(44);
ei_tab_add_index(45);
ei_tab_add_index(46);
ei_tab_add_index(47);
ei_tab_add_index(48);
ei_tab_add_index(49);
ei_tab_add_index(50);
ei_tab_add_index(51);
ei_tab_add_index(52);
ei_tab_add_index(53);
ei_tab_add_index(54);
ei_tab_add_index(55);
ei_tab_add_index(56);
ei_tab_add_index(57);
ei_tab_add_index(58);
ei_tab_add_index(59);
ei_tab_add_index(60);
ei_tab_add_index(61);
ei_tab_add_index(62);
ei_tab_add_index(63);
ei_tab_add_index(64);
ei_tab_add_index(65);
ei_tab_add_index(66);
ei_tab_add_index(67);
ei_tab_add_index(68);
ei_tab_add_index(69);
ei_tab_add_index(70);
ei_tab_add_index(71);
ei_end_tab();
}//|pSphere1|pSphereShape1
ei_end_object();
//|persp|perspShape is not lighted.
//--------------------------
//ribNode->name=|persp|perspShape
//ribNode's transform node=|persp
//ribNode->object(0)->getDataPtr()->getFullPathName()=|persp|perspShape
ei_instance("|persp");
//|persp|perspShape's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|persp|perspShape
//shape full path name=|persp|perspShape
ei_element("|persp|perspShape");
ei_transform(0.707107,0,-0.707107,0,   -0.172721,0.969709,-0.172721,0,   0.685688,0.244264,0.685688,0,   7.90817,2.81715,7.90817,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|persp_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane1|pPlaneShape1
//ribNode's transform node=|pPlane1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane1|pPlaneShape1
ei_instance("|pPlane1");
//|pPlane1|pPlaneShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pPlane1|pPlaneShape1
//shape full path name=|pPlane1|pPlaneShape1
ei_element("|pPlane1|pPlaneShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0.217424,0,0.319667,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pSphere1|pSphereShape1
//ribNode's transform node=|pSphere1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pSphere1|pSphereShape1
ei_instance("|pSphere1");
//|pSphere1|pSphereShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pSphere1|pSphereShape1
//shape full path name=|pSphere1|pSphereShape1
ei_element("|pSphere1|pSphereShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0.17543,0.346931,0.3994,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pSphere1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("perspShape");
//camera
ei_add_instance("|persp");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
//mesh(s)
ei_add_instance("|pPlane1");
ei_add_instance("|pSphere1");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "perspShape", "|persp", "perspShape_option" );
ei_render( "perspShape", "|persp", "perspShape_option" );
ei_end_context();
//------------------------------------------------

