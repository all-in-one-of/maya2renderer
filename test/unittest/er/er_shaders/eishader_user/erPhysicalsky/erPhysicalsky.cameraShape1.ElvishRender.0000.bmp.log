  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(ElvishRender)
    >2 RendererMgr::install()
      >3 Renderer::Renderer()
      >3 ShaderMgr::setValidConnection()
      >3 ShaderMgr::getShaderConnectionMap()
      >3 RNodeVisitorMgr::setValidConnection(...)
        >4 CheckerNodeVisitor::setValidConnection(...)
        >4 FlatColorNodeVisitor::setValidConnection(...)
        >4 erPhysicalskyNodeVisitor::setValidConnection(...)
        >4 erSkylightNodeVisitor::setValidConnection(...)
        >4 TestLightNodeVisitor::setValidConnection(...)
        >4 ArchitecturalNodeVisitor::setValidConnection(...)
        >4 Checker2NodeVisitor::setValidConnection(...)
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/erPhysicalsky.cameraShape1.ElvishRender.0000.bmp)
      >3 OutputMgr::setOutputImagePath(R:/MyDocuments/maya/projects/default/rib/erPhysicalsky.cameraShape1.ElvishRender.0000.bmp)
      >3 OutputMgr::add(2)
      >3 OutputMgr::add(0)
      >3 OutputMgr::init()
        >4 OutputMgr::createOutput(2)
          >5 OutputBase::OutputBase()
          >5 OutputESA::OutputESA(R:/MyDocuments/maya/projects/default/rib/erPhysicalsky.cameraShape1.ElvishRender.0000.bmp)
        >4 OutputMgr::createOutput(0)
          >5 OutputBase::OutputBase()
          >5 OutputCall::OutputCall()
        >4 OutputESA::init()
        >4 OutputCall::init()
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(erPhysicalskyFrame0)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tLightMgr::buildShadowJob(thisJob___, 0)
              >7 tLightMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,cameraShape1)
            >6 liqRibTranslator::generateFileName(5,cameraShape1)
              >7 liqRibTranslator::generateImageName(, job(cameraShape1)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(1)
          >5 liqRibTranslatorNew::scanScene__(1,0)
            >6 tLightMgr::scanScene(1,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|pointLight1|pointLightShape1,0)
                >8 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                      >11 liqShaderFactory::getShader(erSkylight1)
                        >12 liqShader::liqShader(erSkylight1)
                          >13 liqShaderFactory::getUniqueShaderHandler()
                          >13 liqGetSloInfo::setShaderNode(erSkylight1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,1,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,1)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,2,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,2)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,3)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,4)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|camera1|cameraShape1,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|camera1|cameraShape1,5)
                >8 liqRibHT::find(|camera1|cameraShape1,|camera1|cameraShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|camera1|cameraShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(camera1,,2)
                  >9 liqRibNode::parseVectorAttributes(camera1,,3)
                  >9 liqRibNode::parseVectorAttributes(camera1,,4)
                  >9 liqRibNode::findShadingGroup(|camera1|cameraShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|camera1|cameraShape1,0)
                    >10 liqRibCameraData::liqRibCameraData(|camera1|cameraShape1)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|pPlane1|pPlaneShape1,6)
                >8 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube1|pCubeShape1,lframe,0,0,7,matrix,,-1)
                >8 liqRibHT::hash(|pCube1|pCubeShape1,7)
                >8 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,4)
                  >9 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,8)
            >6 tCameraMgr::getCameraData(cameraShape1,0)
              >7 tCameraMgr::getCameraInfo(|camera1|cameraShape1,)
                >8 tCameraMgr::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                  >9 tCameraMgr::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
              >7 tCameraMgr::getCameraFilmOffset(|camera1|cameraShape1,)
              >7 tCameraMgr::getCameraTransform(|camera1|cameraShape1,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 Renderer::frameEpilogue(txtList_.size=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 Renderer::doShadows(shadowList_.size=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::isHeroPassReady(cameraShape1)
          >5 Renderer::HeroPassBegin(cameraShape1)
          >5 tHeroRibWriterMgr::write(liqglo___,cameraShape1,1,0)
            >6 liqRibTranslatorNew::ribPrologue__(cameraShape1)
              >7 Renderer::ribPrologue_begin(cameraShape1)
                >8 Renderer::dummyPhongShader()
              >7 Renderer::ribPrologue_comment(2.3.5,R:/MyDocuments/maya/projects/default/erPhysicalsky,yaoyansi,time)
              >7 Renderer::ribPrologue_options(cameraShape1)
            >6 liqRibTranslatorNew::framePrologue__(1,cameraShape1)
              >7 Renderer::framePrologue(1,cameraShape1)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                  >9 ShadingNetworkUser::beforeExport_user()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(initialShadingGroup,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(lambert1)
                          >13 ConvertShadingNetwork::canShaderExported(lambert1)
                          >13 ConvertShadingNetwork::exportShaderBegin(lambert1)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1)
                            >14 Visitor::initShaderData(lambert1)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(lambert1, ret)
                                >16 DagMgr::begin(lambert1)
                                  >17 DagMgr::pushInputPlugs(lambert1)
                                    >18 ShaderMgr::getValidConnection(lambert1)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(lambert1)
                            >14 Visitor::outputBegin(lambert1)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(lambert1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                                  >17 Visitor::visitLambert(lambert1)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert1)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert1)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert1)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert1,,,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(lambert1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(initialShadingGroup,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(initialShadingGroup,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                  >9 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                    >10 Visitor::outputShadingGroup(initialShadingGroup)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
                  >9 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(cameraShape1,miEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(cameraShape1,miEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(cameraShape1,liqVolumeShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(cameraShape1,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(cameraShape1,liqEnvironmentShader)
                      >11 ConvertShadingNetwork::exportShaderNode(erPhysicalsky1)
                        >12 ConvertShadingNetwork::canShaderExported(erPhysicalsky1)
                        >12 ConvertShadingNetwork::exportShaderBegin(erPhysicalsky1)
                        >12 ConvertShadingNetwork::convertShadingNetworkToRSL(erPhysicalsky1)
                          >13 Visitor::initShaderData(erPhysicalsky1)
                          >13 ConvertShadingNetwork::getUpstreamConvertibleNodes(erPhysicalsky1, nodes, numConnections)
                            >14 DagMgr::BreadthFirstTraversal(erPhysicalsky1, ret)
                              >15 DagMgr::begin(erPhysicalsky1)
                                >16 DagMgr::pushInputPlugs(erPhysicalsky1)
                                  >17 ShaderMgr::getValidConnection(erPhysicalsky1)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirX)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirY)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dir)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dir)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_size)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_size)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_intensity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_intensity)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_size)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_size)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_intensity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_intensity)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_falloff)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_falloff)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_color)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_blur)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_blur)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.type)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.type)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.haze)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.haze)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_color)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.a)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.a)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.b)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.b)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.c)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.c)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.d)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.d)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.e)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.e)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.intensity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.intensity)
                              >15 DagMgr::end()
                          >13 Visitor::preOutput(erPhysicalsky1)
                          >13 Visitor::outputBegin(erPhysicalsky1)
                          >13 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                            >14 Visitor::outputUpstreamShader(erPhysicalsky1)
                              >15 ShaderOutputVisitor::_outputUpstreamShader(erPhysicalsky1,erPhysicalsky)
                                >16 Visitor::visit_render_node_in_subrenderer(erPhysicalsky1,erPhysicalsky)
                                  >17 RNodeVisitorMgr::visit(erPhysicalsky1)
                                    >18 erPhysicalskyNodeVisitor::visit(erPhysicalsky1)
                                      >19 OutputHelper::beginRSL(erPhysicalsky,erPhysicalsky1)
                                      >19 OutputHelper::addRSLVariable(vector,i_sun_dir,sun_dir,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_dir)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dir)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dir)
                                      >19 OutputHelper::addRSLVariable(float,i_sun_disk_size,sun_disk_size,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_disk_size)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_size)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_size)
                                      >19 OutputHelper::addRSLVariable(float,i_sun_disk_intensity,sun_disk_intensity,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_disk_intensity)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_intensity)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_intensity)
                                      >19 OutputHelper::addRSLVariable(float,i_sun_glow_size,sun_glow_size,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_glow_size)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_size)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_size)
                                      >19 OutputHelper::addRSLVariable(float,i_sun_glow_intensity,sun_glow_intensity,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_glow_intensity)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_intensity)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_intensity)
                                      >19 OutputHelper::addRSLVariable(float,i_sun_glow_falloff,sun_glow_falloff,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_glow_falloff)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_falloff)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_falloff)
                                      >19 OutputHelper::addRSLVariable(color,i_ground_color,ground_color,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.ground_color)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_color)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_color)
                                      >19 OutputHelper::addRSLVariable(float,i_ground_blur,ground_blur,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.ground_blur)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_blur)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_blur)
                                      >19 OutputHelper::addRSLVariable(int,i_type,type,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.type)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.type)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.type)
                                      >19 OutputHelper::addRSLVariable(float,i_haze,haze,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.haze)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.haze)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.haze)
                                      >19 OutputHelper::addRSLVariable(color,i_zenith_color,zenith_color,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.zenith_color)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_color)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_color)
                                      >19 OutputHelper::addRSLVariable(float,i_a,a,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.a)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.a)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.a)
                                      >19 OutputHelper::addRSLVariable(float,i_b,b,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.b)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.b)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.b)
                                      >19 OutputHelper::addRSLVariable(float,i_c,c,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.c)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.c)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.c)
                                      >19 OutputHelper::addRSLVariable(float,i_d,d,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.d)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.d)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.d)
                                      >19 OutputHelper::addRSLVariable(float,i_e,e,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.e)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.e)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.e)
                                      >19 OutputHelper::addRSLVariable(float,i_intensity,intensity,erPhysicalsky1)
                                        >20 ShaderMgr::convertibleConnection(erPhysicalsky1.intensity)
                                          >21 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.intensity)
                                            >22 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.intensity)
                                      >19 OutputHelper::endRSL()
                            >14 ShaderMgr::getValidConnection(erPhysicalsky1)
                            >14 ConvertShadingNetwork::getNodeVariables(erPhysicalsky1, validConnections,  inputSrc, inputDes, outputSrc)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirX)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirX)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirY)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirY)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirZ)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirZ)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dir)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dir)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_size)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_size)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_intensity)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_intensity)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_size)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_size)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_intensity)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_intensity)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_falloff)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_falloff)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorR)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorG)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorB)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_color)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_blur)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_blur)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.type)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.type)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.haze)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.haze)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorR)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorG)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorB)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_color)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.a)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.a)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.b)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.b)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.c)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.c)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.d)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.d)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.e)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.e)
                              >15 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.intensity)
                                >16 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.intensity)
                            >14 Visitor::addShaderMethodBody(erPhysicalsky1,,,)
                          >13 ConvertShadingNetwork::outputShaderMethod()
                            >14 Visitor::outputShaderMethod()
                          >13 Visitor::outputEnd()
                          >13 Visitor::postOutput()
                        >12 ConvertShadingNetwork::exportShaderEnd(erPhysicalsky1)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(cameraShape1,liqLensShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(cameraShape1,liqLensShader)
                  >9 ShadingNetworkUser::export_user()
                >8  ConvertShadingNetwork::afterExport()
                  >9 ShadingNetworkUser::afterExport_user()
            >6 liqRibTranslatorNew::worldPrologue__(cameraShape1)
              >7 Renderer::worldPrologue(cameraShape1)
            >6 liqRibTranslatorNew::lightBlock__(cameraShape1)
              >7 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
              >7 liqRibObj::writeObject(,cameraShape1,0)
                >8 liqRibLightData::write(,job=cameraShape1,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight1|pointLightShape1,,cameraShape1,ref=0)
                      >11 liqRibData::getFullPathName()
                    >10 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,cameraShape1,...)
                      >11 Renderer::exportAreaLight(pointLightShape1,cameraShape1)
                        >12 liqShader::getName()
                        >12 ShaderMgr::exportShaderNode(erSkylight1)
                          >13 ConvertShadingNetwork::exportShaderNode(erSkylight1)
                            >14 ConvertShadingNetwork::canShaderExported(erSkylight1)
                            >14 ConvertShadingNetwork::exportShaderBegin(erSkylight1)
                            >14 ConvertShadingNetwork::convertShadingNetworkToRSL(erSkylight1)
                              >15 Visitor::initShaderData(erSkylight1)
                              >15 ConvertShadingNetwork::getUpstreamConvertibleNodes(erSkylight1, nodes, numConnections)
                                >16 DagMgr::BreadthFirstTraversal(erSkylight1, ret)
                                  >17 DagMgr::begin(erSkylight1)
                                    >18 DagMgr::pushInputPlugs(erSkylight1)
                                      >19 ShaderMgr::getValidConnection(erSkylight1)
                                      >19 ConvertShadingNetwork::convertibleConnection(erSkylight1.env_shader)
                                        >20 ConvertShadingNetwork::ensurePlugExists(erSkylight1.env_shader)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(erPhysicalsky1)
                                          >21 ShaderMgr::hasShaderType(erPhysicalsky)
                                      >19 ConvertShadingNetwork::convertibleConnection(erSkylight1.resolution)
                                        >20 ConvertShadingNetwork::ensurePlugExists(erSkylight1.resolution)
                                      >19 ConvertShadingNetwork::convertibleConnection(erSkylight1.max_dist)
                                        >20 ConvertShadingNetwork::ensurePlugExists(erSkylight1.max_dist)
                                  >17 DagMgr::pushInputPlugs(erPhysicalsky1)
                                    >18 ShaderMgr::getValidConnection(erPhysicalsky1)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirX)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirY)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dir)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dir)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_size)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_size)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_intensity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_intensity)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_size)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_size)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_intensity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_intensity)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_falloff)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_falloff)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_color)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_blur)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_blur)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.type)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.type)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.haze)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.haze)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_color)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.a)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.a)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.b)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.b)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.c)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.c)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.d)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.d)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.e)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.e)
                                    >18 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.intensity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.intensity)
                                  >17 DagMgr::isVisited(erPhysicalsky1)
                                  >17 DagMgr::visit(erPhysicalsky1)
                                  >17 DagMgr::end()
                              >15 Visitor::preOutput(erSkylight1)
                              >15 Visitor::outputBegin(erSkylight1)
                              >15 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                                >16 Visitor::outputUpstreamShader(erPhysicalsky1)
                                  >17 ShaderOutputVisitor::_outputUpstreamShader(erPhysicalsky1,erPhysicalsky)
                                    >18 Visitor::visit_render_node_in_subrenderer(erPhysicalsky1,erPhysicalsky)
                                      >19 RNodeVisitorMgr::visit(erPhysicalsky1)
                                        >20 erPhysicalskyNodeVisitor::visit(erPhysicalsky1)
                                          >21 OutputHelper::beginRSL(erPhysicalsky,erPhysicalsky1)
                                          >21 OutputHelper::addRSLVariable(vector,i_sun_dir,sun_dir,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_dir)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dir)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dir)
                                          >21 OutputHelper::addRSLVariable(float,i_sun_disk_size,sun_disk_size,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_disk_size)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_size)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_size)
                                          >21 OutputHelper::addRSLVariable(float,i_sun_disk_intensity,sun_disk_intensity,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_disk_intensity)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_intensity)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_intensity)
                                          >21 OutputHelper::addRSLVariable(float,i_sun_glow_size,sun_glow_size,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_glow_size)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_size)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_size)
                                          >21 OutputHelper::addRSLVariable(float,i_sun_glow_intensity,sun_glow_intensity,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_glow_intensity)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_intensity)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_intensity)
                                          >21 OutputHelper::addRSLVariable(float,i_sun_glow_falloff,sun_glow_falloff,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.sun_glow_falloff)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_falloff)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_falloff)
                                          >21 OutputHelper::addRSLVariable(color,i_ground_color,ground_color,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.ground_color)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_color)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_color)
                                          >21 OutputHelper::addRSLVariable(float,i_ground_blur,ground_blur,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.ground_blur)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_blur)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_blur)
                                          >21 OutputHelper::addRSLVariable(int,i_type,type,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.type)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.type)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.type)
                                          >21 OutputHelper::addRSLVariable(float,i_haze,haze,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.haze)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.haze)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.haze)
                                          >21 OutputHelper::addRSLVariable(color,i_zenith_color,zenith_color,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.zenith_color)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_color)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_color)
                                          >21 OutputHelper::addRSLVariable(float,i_a,a,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.a)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.a)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.a)
                                          >21 OutputHelper::addRSLVariable(float,i_b,b,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.b)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.b)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.b)
                                          >21 OutputHelper::addRSLVariable(float,i_c,c,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.c)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.c)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.c)
                                          >21 OutputHelper::addRSLVariable(float,i_d,d,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.d)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.d)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.d)
                                          >21 OutputHelper::addRSLVariable(float,i_e,e,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.e)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.e)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.e)
                                          >21 OutputHelper::addRSLVariable(float,i_intensity,intensity,erPhysicalsky1)
                                            >22 ShaderMgr::convertibleConnection(erPhysicalsky1.intensity)
                                              >23 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.intensity)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.intensity)
                                          >21 OutputHelper::endRSL()
                                >16 ShaderMgr::getValidConnection(erPhysicalsky1)
                                >16 ConvertShadingNetwork::getNodeVariables(erPhysicalsky1, validConnections,  inputSrc, inputDes, outputSrc)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirX)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirY)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dirZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dirZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_dir)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_dir)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_size)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_size)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_disk_intensity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_disk_intensity)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_size)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_size)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_intensity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_intensity)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.sun_glow_falloff)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.sun_glow_falloff)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_color)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.ground_blur)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.ground_blur)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.type)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.type)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.haze)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.haze)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.zenith_color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.zenith_color)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.a)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.a)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.b)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.b)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.c)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.c)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.d)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.d)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.e)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.e)
                                  >17 ConvertShadingNetwork::convertibleConnection(erPhysicalsky1.intensity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erPhysicalsky1.intensity)
                                >16 Visitor::addShaderMethodBody(erPhysicalsky1,,,)
                                >16 Visitor::outputUpstreamShader(erSkylight1)
                                  >17 ShaderOutputVisitor::_outputUpstreamShader(erSkylight1,erSkylight)
                                    >18 Visitor::visit_render_node_in_subrenderer(erSkylight1,erSkylight)
                                      >19 RNodeVisitorMgr::visit(erSkylight1)
                                        >20 erSkylightNodeVisitor::visit(erSkylight1)
                                          >21 OutputHelper::beginRSL(erSkylight,erSkylight1)
                                          >21 OutputHelper::addRSLVariable(shader,i_env_shader,env_shader,erSkylight1)
                                            >22 ShaderMgr::convertibleConnection(erSkylight1.env_shader)
                                              >23 ConvertShadingNetwork::convertibleConnection(erSkylight1.env_shader)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erSkylight1.env_shader)
                                                >24 ConvertShadingNetwork::nodeIsConvertible(erPhysicalsky1)
                                                  >25 ShaderMgr::hasShaderType(erPhysicalsky)
                                          >21 OutputHelper::addRSLVariable(int,i_resolution,resolution,erSkylight1)
                                            >22 ShaderMgr::convertibleConnection(erSkylight1.resolution)
                                              >23 ConvertShadingNetwork::convertibleConnection(erSkylight1.resolution)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erSkylight1.resolution)
                                          >21 OutputHelper::addRSLVariable(float,i_max_dist,max_dist,erSkylight1)
                                            >22 ShaderMgr::convertibleConnection(erSkylight1.max_dist)
                                              >23 ConvertShadingNetwork::convertibleConnection(erSkylight1.max_dist)
                                                >24 ConvertShadingNetwork::ensurePlugExists(erSkylight1.max_dist)
                                          >21 OutputHelper::endRSL()
                                >16 ShaderMgr::getValidConnection(erSkylight1)
                                >16 ConvertShadingNetwork::getNodeVariables(erSkylight1, validConnections,  inputSrc, inputDes, outputSrc)
                                  >17 ConvertShadingNetwork::convertibleConnection(erSkylight1.env_shader)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erSkylight1.env_shader)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(erPhysicalsky1)
                                      >19 ShaderMgr::hasShaderType(erPhysicalsky)
                                  >17 ConvertShadingNetwork::addNodeInputVariable(erSkylight1.env_shader, inputSrc, inputDes)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(erPhysicalsky1)
                                      >19 ShaderMgr::hasShaderType(erPhysicalsky)
                                    >18 ShaderMgr::getValidConnection(erPhysicalsky1)
                                  >17 ConvertShadingNetwork::convertibleConnection(erSkylight1.resolution)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erSkylight1.resolution)
                                  >17 ConvertShadingNetwork::convertibleConnection(erSkylight1.max_dist)
                                    >18 ConvertShadingNetwork::ensurePlugExists(erSkylight1.max_dist)
                                >16 Visitor::addShaderMethodBody(erSkylight1,,,)
                              >15 ConvertShadingNetwork::outputShaderMethod()
                                >16 Visitor::outputShaderMethod()
                              >15 Visitor::outputEnd()
                              >15 Visitor::postOutput()
                            >14 ConvertShadingNetwork::exportShaderEnd(erSkylight1)
                        >12 liqShader::getName()
                        >12 addLightGroupForLight(|pointLight1|pointLightShape1)
              >7 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
              >7 Renderer::coordSysBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock__(cameraShape1)
              >7 liqRibTranslatorNew::objectBlock_data(cameraShape1)
                >8 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|camera1|cameraShape1,cameraShape1)
                  >9 Renderer::exportOneObject_data(|camera1|cameraShape1,cameraShape1)
                    >10 Renderer::_writeObject(|camera1|cameraShape1,cameraShape1,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,cameraShape1,0)
                        >12 liqRibCameraData::write(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,job=cameraShape1,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|camera1|cameraShape1,R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,cameraShape1,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeCameraData.cpp::_write_camera_maya(|camera1|cameraShape1,cameraShape1)
                              >15 liqRibHT::find(|camera1|cameraShape1,|camera1|cameraShape1,0)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|camera1|cameraShape1,liqEnvironmentShader)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=1,|camera1|cameraShape1,miEnvironmentShader)
                              >15 Renderer::cameraOutput(cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,cameraShape1)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,cameraShape1,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=cameraShape1,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane1|pPlaneShape1,cameraShape1)
                              >15 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                              >15 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,cameraShape1)
                  >9 Renderer::exportOneObject_data(|pCube1|pCubeShape1,cameraShape1)
                    >10 Renderer::_writeObject(|pCube1|pCubeShape1,cameraShape1,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,cameraShape1,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=cameraShape1,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube1|pCubeShape1,R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,cameraShape1,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pCube1|pCubeShape1,cameraShape1)
                              >15 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                              >15 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|camera1|cameraShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|camera1|cameraShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|camera1|cameraShape1,cameraShape1)
                  >9 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|camera1|cameraShape1)
                    >10 Renderer::exportLightLinks(cameraShape1,|camera1|cameraShape1,lightedByWhichLightShapes.size=0)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|camera1|cameraShape1,cameraShape1)
                  >9 liqRibTranslatorNew::writeShader_(1,|camera1|cameraShape1,v=0,s=0,c=0,,|camera1|cameraShape1,cameraShape1)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|camera1|cameraShape1,|camera1|cameraShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|camera1|cameraShape1)
                  >9 Renderer::exportOneObject_reference(|camera1|cameraShape1,cameraShape1)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|camera1|cameraShape1,cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane1|pPlaneShape1)
                    >10 Renderer::exportLightLinks(cameraShape1,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,cameraShape1)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                  >9 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,cameraShape1)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,cameraShape1)
                  >9 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pCube1|pCubeShape1)
                    >10 Renderer::exportLightLinks(cameraShape1,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,cameraShape1)
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=0,c=0,,|pCube1|pCubeShape1,cameraShape1)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                  >9 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,cameraShape1)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,cameraShape1)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(1)
              >7 Renderer::frameEpilogue(1)
            >6 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
              >7 Renderer::ribPrologue_end(cameraShape1)
                >8 Renderer::cookInstanceGroup()
                >8 Renderer::render()
                  >9 Renderer::renderPreview(200,150,0,0,cameraShape1,cameraShape1,cameraShape1_option)
                    >10 Renderer::_renderPreview(200,150,0,0,cameraShape1,|camera1,cameraShape1_option)
          >5 Renderer::HeroPassEnd(cameraShape1)
        >4 liqRenderScript::addJob(job.title=erPhysicalskyFrame0,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
      >3 OutputMgr::uninit()
        >4 OutputESA::~OutputESA()
        >4 OutputBase::~OutputBase()
        >4 OutputCall::~OutputCall()
        >4 OutputBase::~OutputBase()
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
      >3 ShaderMgr::clearValidConnection()
      >3 Renderer::~Renderer()
    >2 RendererMgr::unsetFactory()
