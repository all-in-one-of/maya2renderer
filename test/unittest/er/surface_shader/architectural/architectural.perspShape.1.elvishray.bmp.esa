//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/architectural
//    User  : yaoyansi

//############################### option #
ei_options("perspShape_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();
ei_shader("architectural", "liquidShader2");
ei_shader_param_vector("surface_color",0,1,0.962571);
ei_shader_param_vector("diffuse_color",1,1,1);
ei_shader_param_scalar("diffuse_weight",1);
ei_shader_param_vector("specular_color",1,1,1);
ei_shader_param_scalar("specular_weight",0.2);
ei_shader_param_scalar("roughness",0);
ei_shader_param_int("specular_mode",0);
ei_shader_param_scalar("glossiness",1);
ei_shader_param_vector("reflection_color",1,1,1);
ei_shader_param_scalar("reflection_weight",0);
ei_shader_param_vector("refraction_color",1,1,1);
ei_shader_param_scalar("refraction_weight",0);
ei_shader_param_scalar("refraction_glossiness",0);
ei_shader_param_scalar("refraction_thickness",2);
ei_shader_param_vector("translucency_color",1,1,1);
ei_shader_param_scalar("translucency_weight",0);
ei_shader_param_scalar("anisotropy",1);
ei_shader_param_scalar("rotation",0);
ei_shader_param_scalar("ior",1.5);
ei_shader_param_bool("fresnel_by_ior",1);
ei_shader_param_scalar("fresnel_0_degree_refl",0.2);
ei_shader_param_scalar("fresnel_90_degree_refl",1);
ei_shader_param_scalar("fresnel_curve",5);
ei_shader_param_bool("is_metal",1);
ei_shader_param_int("diffuse_samples",8);
ei_shader_param_int("reflection_samples",4);
ei_shader_param_int("refraction_samples",4);
ei_shader_param_scalar("cutoff_threshold",0.01);
ei_shader_param_scalar("bump_factor",0.3);
ei_end_shader();

ei_material("liquidShader2SG");
ei_surface_shader("liquidShader2");
ei_end_material();
ei_shader("architectural", "liquidShader1");
ei_shader_param_vector("surface_color",1,0,0);
ei_shader_param_vector("diffuse_color",1,1,1);
ei_shader_param_scalar("diffuse_weight",1);
ei_shader_param_vector("specular_color",1,1,1);
ei_shader_param_scalar("specular_weight",0.2);
ei_shader_param_scalar("roughness",0);
ei_shader_param_int("specular_mode",0);
ei_shader_param_scalar("glossiness",1);
ei_shader_param_vector("reflection_color",1,1,1);
ei_shader_param_scalar("reflection_weight",0);
ei_shader_param_vector("refraction_color",1,1,1);
ei_shader_param_scalar("refraction_weight",0);
ei_shader_param_scalar("refraction_glossiness",0);
ei_shader_param_scalar("refraction_thickness",1);
ei_shader_param_vector("translucency_color",1,1,1);
ei_shader_param_scalar("translucency_weight",0);
ei_shader_param_scalar("anisotropy",1);
ei_shader_param_scalar("rotation",0);
ei_shader_param_scalar("ior",1.5);
ei_shader_param_bool("fresnel_by_ior",1);
ei_shader_param_scalar("fresnel_0_degree_refl",0.2);
ei_shader_param_scalar("fresnel_90_degree_refl",1);
ei_shader_param_scalar("fresnel_curve",5);
ei_shader_param_bool("is_metal",1);
ei_shader_param_int("diffuse_samples",8);
ei_shader_param_int("reflection_samples",4);
ei_shader_param_int("refraction_samples",4);
ei_shader_param_scalar("cutoff_threshold",0.01);
ei_shader_param_scalar("bump_factor",0.3);
ei_end_shader();

ei_material("liquidShader1SG");
ei_surface_shader("liquidShader1");
ei_end_material();
// shader(architectural,...)
ei_shader("architectural", "liquidSurface1");
ei_shader_param_vector("surface_color",1,1,0);
ei_shader_param_vector("diffuse_color",1,1,1);
ei_shader_param_scalar("diffuse_weight",1);
ei_shader_param_vector("specular_color",1,1,1);
ei_shader_param_scalar("specular_weight",0.2);
ei_shader_param_scalar("roughness",0);
ei_shader_param_int("specular_mode",0);
ei_shader_param_scalar("glossiness",1);
ei_shader_param_vector("reflection_color",1,1,1);
ei_shader_param_scalar("reflection_weight",0);
ei_shader_param_vector("refraction_color",1,1,1);
ei_shader_param_scalar("refraction_weight",0);
ei_shader_param_scalar("refraction_glossiness",0);
ei_shader_param_scalar("refraction_thickness",0);
ei_shader_param_vector("translucency_color",1,1,1);
ei_shader_param_scalar("translucency_weight",0);
ei_shader_param_scalar("anisotropy",1);
ei_shader_param_scalar("rotation",0);
ei_shader_param_scalar("ior",1.5);
ei_shader_param_bool("fresnel_by_ior",1);
ei_shader_param_scalar("fresnel_0_degree_refl",0.2);
ei_shader_param_scalar("fresnel_90_degree_refl",1);
ei_shader_param_scalar("fresnel_curve",5);
ei_shader_param_bool("is_metal",1);
ei_shader_param_int("diffuse_samples",8);
ei_shader_param_int("reflection_samples",4);
ei_shader_param_int("refraction_samples",4);
ei_shader_param_scalar("cutoff_threshold",0.01);
ei_shader_param_scalar("bump_factor",0.3);
ei_end_shader();
ei_material("liquidSurface1SG");
ei_surface_shader("liquidSurface1");
ei_end_material();

//worldPrologue

// Renderer::exportLight("_pointLight3_pointLightShape3");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight3|pointLightShape3_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight3|pointLightShape3_object");
ei_light_shader("|pointLight3|pointLightShape3_shader");
ei_origin(0,0,0);
ei_end_light();
ei_instance("|pointLight3|pointLightShape3");
ei_element("|pointLight3|pointLightShape3_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0.247247,7.50468,-1.58609,1);
ei_declare("|pPlane1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane3_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// maya settings: focal=35.000000, aperture = 36.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|persp|perspShape");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/architectural.perspShape.1.elvishray.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(36);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();

// maya settings: focal=35.000000, aperture = 32.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/architectural.perspShape.1.elvishray.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();

// Renderer::exportOneGeometry_Mesh(|pPlane1|pPlaneShape1, 0, 0

//############################### mesh #
//shape full path name=|pPlane1|pPlaneShape1
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane1|pPlaneShape1" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -7.056537, -0.000000, 5.773534 );
ei_tab_add_vector( 7.056537, -0.000000, 5.773534 );
ei_tab_add_vector( -7.056537, 0.000000, -5.773534 );
ei_tab_add_vector( -7.056537, 0.000000, -5.773534 );
ei_tab_add_vector( 7.056537, -0.000000, 5.773534 );
ei_tab_add_vector( 7.056537, 0.000000, -5.773534 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.818182 );
ei_tab_add_vector2( 0.000000, 0.818182 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.818182 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane1|pPlaneShape1
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane3|pPlaneShape3, 0, 0

//############################### mesh #
//shape full path name=|pPlane3|pPlaneShape3
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane3|pPlaneShape3" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -7.543199, -0.000000, 5.411301 );
ei_tab_add_vector( 7.543199, -0.000000, 5.411301 );
ei_tab_add_vector( -7.543199, 0.000000, -5.411301 );
ei_tab_add_vector( -7.543199, 0.000000, -5.411301 );
ei_tab_add_vector( 7.543199, -0.000000, 5.411301 );
ei_tab_add_vector( 7.543199, 0.000000, -5.411301 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.717375 );
ei_tab_add_vector2( 0.000000, 0.717375 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.717375 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane3|pPlaneShape3
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCubeShape1, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCubeShape1
//### UV(map1), size=14
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCubeShape1" );
{
eiTag tag;
//vertex positions(required), size=36
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -2.071671, -2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, -2.797499, 3.681355 );
ei_tab_add_vector( -2.071671, 2.797499, 3.681355 );
ei_tab_add_vector( -2.071671, 2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, -2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, 2.797499, 3.681355 );
ei_tab_add_vector( -2.071671, 2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, 2.797499, 3.681355 );
ei_tab_add_vector( -2.071671, 2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, 2.797499, -3.681355 );
ei_tab_add_vector( 2.071671, 2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, 2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, 2.797499, -3.681355 );
ei_tab_add_vector( 2.071671, 2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, -2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, -2.797499, -3.681355 );
ei_tab_add_vector( 2.071671, 2.797499, -3.681355 );
ei_tab_add_vector( 2.071671, -2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, -2.797499, -3.681355 );
ei_tab_add_vector( 2.071671, -2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, -2.797499, 3.681355 );
ei_tab_add_vector( -2.071671, -2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, -2.797499, -3.681355 );
ei_tab_add_vector( 2.071671, -2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, -2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, -2.797499, -3.681355 );
ei_tab_add_vector( 2.071671, 2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, 2.797499, 3.681355 );
ei_tab_add_vector( 2.071671, -2.797499, -3.681355 );
ei_tab_add_vector( 2.071671, 2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, -2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, -2.797499, 3.681355 );
ei_tab_add_vector( -2.071671, 2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, 2.797499, -3.681355 );
ei_tab_add_vector( -2.071671, -2.797499, 3.681355 );
ei_tab_add_vector( -2.071671, 2.797499, 3.681355 );
ei_end_tab();
//### N ###(optional)
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.625000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_end_tab();
//### triangles(required) size=36
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_tab_add_index(6);
ei_tab_add_index(7);
ei_tab_add_index(8);
ei_tab_add_index(9);
ei_tab_add_index(10);
ei_tab_add_index(11);
ei_tab_add_index(12);
ei_tab_add_index(13);
ei_tab_add_index(14);
ei_tab_add_index(15);
ei_tab_add_index(16);
ei_tab_add_index(17);
ei_tab_add_index(18);
ei_tab_add_index(19);
ei_tab_add_index(20);
ei_tab_add_index(21);
ei_tab_add_index(22);
ei_tab_add_index(23);
ei_tab_add_index(24);
ei_tab_add_index(25);
ei_tab_add_index(26);
ei_tab_add_index(27);
ei_tab_add_index(28);
ei_tab_add_index(29);
ei_tab_add_index(30);
ei_tab_add_index(31);
ei_tab_add_index(32);
ei_tab_add_index(33);
ei_tab_add_index(34);
ei_tab_add_index(35);
ei_end_tab();
}//|pCube1|pCubeShape1
ei_end_object();
//|persp|perspShape is not lighted.
//--------------------------
//ribNode->name=|persp|perspShape
//ribNode's transform node=|persp
//ribNode->object(0)->getDataPtr()->getFullPathName()=|persp|perspShape
ei_instance("|persp");
//|persp|perspShape's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|persp|perspShape
//shape full path name=|persp|perspShape
ei_element("|persp|perspShape");
ei_transform(0.435231,2.77556e-017,0.900319,0,   0.327603,0.931448,-0.15837,0,   -0.8386,0.363875,0.405395,0,   -13.9183,11.0386,5.35967,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|persp_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1|cameraShape1
//ribNode's transform node=|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1|cameraShape1
ei_instance("|camera1");
//|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1|cameraShape1
//shape full path name=|camera1|cameraShape1
ei_element("|camera1|cameraShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,0,20.2125,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane1|pPlaneShape1
//ribNode's transform node=|pPlane1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane1|pPlaneShape1
ei_instance("|pPlane1");
//|pPlane1|pPlaneShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: liquidShader1SG,
ei_mtl("liquidShader1SG");
//shape name=|pPlane1|pPlaneShape1
//shape full path name=|pPlane1|pPlaneShape1
ei_element("|pPlane1|pPlaneShape1");
ei_transform(0.952646,-0.00279103,0.304067,0,   0.00292975,0.999996,-5.42101e-020,0,   -0.304066,0.000890842,0.952651,0,   0,4,2.44344,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane3|pPlaneShape3
//ribNode's transform node=|pPlane3
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane3|pPlaneShape3
ei_instance("|pPlane3");
//|pPlane3|pPlaneShape3 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: liquidSurface1SG,
ei_mtl("liquidSurface1SG");
//shape name=|pPlane3|pPlaneShape3
//shape full path name=|pPlane3|pPlaneShape3
ei_element("|pPlane3|pPlaneShape3");
ei_transform(1,0,0,0,   0,0.0120549,0.999927,0,   0,-0.999927,0.0120549,0,   0.108559,5.3649,-2.23816,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane3_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|pCubeShape1
//ribNode's transform node=|pCube1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCubeShape1
ei_instance("|pCube1");
//|pCube1|pCubeShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: liquidShader2SG,
ei_mtl("liquidShader2SG");
//shape name=|pCube1|pCubeShape1
//shape full path name=|pCube1|pCubeShape1
ei_element("|pCube1|pCubeShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0.759772,2.7975,-1.50223,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("perspShape");
//camera
ei_add_instance("|camera1");
ei_add_instance("|persp");
//light(s)
ei_add_instance("|pointLight3|pointLightShape3");
//mesh(s)
ei_add_instance("|pCube1");
ei_add_instance("|pPlane1");
ei_add_instance("|pPlane3");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "perspShape", "|persp", "perspShape_option" );
ei_render( "perspShape", "|persp", "perspShape_option" );
ei_end_context();
//------------------------------------------------

