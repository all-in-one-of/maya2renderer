//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",1);
ei_shader_param_scalar("i_repeatV",1);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.1.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   -2.76716,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.911118,0,-0.412145,0,   -0.367029,0.454918,-0.811381,0,   0.187492,0.890533,0.414484,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",1.13717);
ei_shader_param_scalar("i_repeatV",1.13717);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.2.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   -1.16903,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.94628,0,-0.32335,0,   -0.290152,0.441358,-0.849126,0,   0.142713,0.897331,0.417648,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",1.5048);
ei_shader_param_scalar("i_repeatV",1.5048);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.3.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   0.644579,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.998981,0,-0.0451325,0,   -0.0409102,0.422321,-0.905523,0,   0.0190604,0.906446,0.421891,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",2.03704);
ei_shader_param_scalar("i_repeatV",2.03704);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.4.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   2.56593,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.9335,2.77556e-017,0.358578,0,   0.320903,0.446204,-0.835418,0,   -0.159999,0.894931,0.416531,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",2.66804);
ei_shader_param_scalar("i_repeatV",2.66804);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.5.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   4.48727,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.745852,-5.55112e-017,0.666112,0,   0.565108,0.529407,-0.632757,0,   -0.352644,0.848368,0.394859,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",3.33196);
ei_shader_param_scalar("i_repeatV",3.33196);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.6.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   6.30088,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.573452,0,0.819239,0,   0.636092,0.630188,-0.445253,0,   -0.516274,0.776443,0.361383,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",3.96296);
ei_shader_param_scalar("i_repeatV",3.96296);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.7.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   7.89901,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.458629,0,0.888628,0,   0.623711,0.712294,-0.321903,0,   -0.632965,0.701881,0.326679,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",4.4952);
ei_shader_param_scalar("i_repeatV",4.4952);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.8.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   9.17393,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.389188,0,0.921158,0,   0.590899,0.767145,-0.249654,0,   -0.706662,0.641473,0.298563,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",4.86283);
ei_shader_param_scalar("i_repeatV",4.86283);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.9.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   10.0179,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.351501,5.55112e-017,0.936188,0,   0.564201,0.798,-0.211835,0,   -0.747077,0.602658,0.280497,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",5);
ei_shader_param_scalar("i_repeatV",5);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.10.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6133,0,0,0,   0,1,0,0,   0,0,8.02763,0,   10.3231,0,-0.566055,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.339123,0,0.940742,0,   0.553986,0.808219,-0.199703,0,   -0.760326,0.588882,0.274085,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",5);
ei_shader_param_scalar("i_repeatV",5);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.11.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.6102,0.242169,-0.032364,0,   -0.0251501,0.999615,0.0116742,0,   0.0293761,-0.0930066,8.02704,0,   10.3231,0,-0.759547,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.357762,5.55112e-017,0.933813,0,   0.546741,0.810677,-0.209467,0,   -0.757021,0.585493,0.29003,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",5);
ei_shader_param_scalar("i_repeatV",5);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.14.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(9.05542,3.19766,-0.435913,0,   -0.322163,0.933661,0.15649,0,   0.757727,-1.06607,7.92037,0,   10.3231,0,-3.17309,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.544323,0,0.838876,0,   0.451203,0.84303,-0.292773,0,   -0.707197,0.537867,0.458881,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",5);
ei_shader_param_scalar("i_repeatV",5);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.17.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(6.34252,7.14253,-1.08274,0,   -0.662663,0.645903,0.37906,0,   2.84486,-1.40849,7.37332,0,   10.3231,0,-7.0531,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.712185,0,0.701992,0,   0.324596,0.886675,-0.329309,0,   -0.622439,0.462393,0.631477,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/checker_anim
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",5);
ei_shader_param_scalar("i_repeatV",5);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_color1",1,0,0);
ei_shader_param_vector("i_color2",1,1,0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_scalar("i_contrast",1);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_scalar("o_outAlpha",0.5);
ei_shader_param_vector("o_outColor",1,0.5,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape11, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape11
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape11" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.000000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.000000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.000000, -0.500000 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape11
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1_group|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1_group|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker_anim.cameraShape1.ElvishRender.18.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane2|pPlaneShape11
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape11
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape11 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape11
//shape full path name=|pPlane2|pPlaneShape11
ei_element("|pPlane2|pPlaneShape11");
ei_transform(4.99807,8.10765,-1.30415,0,   -0.725851,0.519906,0.450375,0,   3.61539,-1.08923,7.08416,0,   10.3231,0,-8.38717,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1_group|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1_group|camera1|cameraShape1
//ribNode's transform node=|camera1_group|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1_group|camera1|cameraShape1
ei_instance("|camera1_group|camera1");
//|camera1_group|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1_group|camera1|cameraShape1
//shape full path name=|camera1_group|camera1|cameraShape1
ei_element("|camera1_group|camera1|cameraShape1");
ei_transform(0.743412,2.77556e-017,0.668833,0,   0.296095,0.896668,-0.329111,0,   -0.599722,0.442703,0.666594,0,   -0.7556,8.74505,3.76869,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_group|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1_group|camera1");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1_group|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

