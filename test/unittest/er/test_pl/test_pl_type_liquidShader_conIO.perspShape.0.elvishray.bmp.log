>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(elvishray)
  >1 RendererMgr::install()
    >2 Renderer::Renderer()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(E:/MyDocuments/maya/projects/default/rib/test_pl_type_liquidShader_conIO.perspShape.1.elvishray.bmp)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(test_pl_type_liquidShader_conIOFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(test_pl_type_liquidShader_liquidShader1)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(test_pl_type_liquidShader_liquidShader1)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(test_pl_type_liquidShader_liquidShader1)
          >5 liqShader::liqShader(test_pl_type_liquidShader_liquidShader2)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(test_pl_type_liquidShader_liquidShader2)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(test_pl_type_liquidShader_liquidShader2)
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,perspShape)
          >5 liqRibTranslator::generateFileName(5,perspShape)
            >6 liqRibTranslator::generateImageName(, job(perspShape)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibHT::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
              >7 liqRibHT::hash(|pointLight2|pointLightShape2,1)
              >7 liqRibHT::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,4)
                >8 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane3|pPlaneShape12,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane3|pPlaneShape12,2)
              >7 liqRibHT::find(|pPlane3|pPlaneShape12,|pPlane3|pPlaneShape12,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane3|pPlaneShape12,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,4)
                >8 liqRibNode::findShadingGroup(|pPlane3|pPlaneShape12,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane3|pPlaneShape12,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane3|pPlaneShape12)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape12)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,3)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|persp|perspShape,)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
            >6 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
            >6 liqRibTranslator::getCameraTransform(|persp|perspShape,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),E:/MyDocuments/maya/projects/default/test_pl_type_liquidShader_conIO,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                >8 Renderer::cameraOutput(perspShape)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(liquidShader2SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(test_pl_type_liquidShader_liquidShader2)
                  >9 ConvertShadingNetwork::exportShaderBegin(test_pl_type_liquidShader_liquidShader2)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(test_pl_type_liquidShader_liquidShader2,surfaceShader)
                    >10 Visitor::initShaderData(test_pl_type_liquidShader_liquidShader2,surfaceShader)
                    >10 Visitor::initShaderData(test_pl_type_liquidShader_liquidShader2,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(test_pl_type_liquidShader_liquidShader2, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                        >12 ShaderMgr::hasShaderType(liquidShader)
                      >11 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader2)
                        >12 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader2)
                          >13 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader2)
                            >14 liqShader::liqShader(test_pl_type_liquidShader_liquidShader2)
                              >15 liqShaderFactory::getUniqueShaderHandler()
                              >15 liqGetSloInfo::setShaderNode(test_pl_type_liquidShader_liquidShader2)
                        >12 liqShader::getValidConnection(...)
                          >13 liqShader::getName()
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.int_name)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.int_name)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                          >13 ShaderMgr::hasShaderType(liquidShader)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.scalar_name)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.scalar_name)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                          >13 ShaderMgr::hasShaderType(liquidShader)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.vector_name)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.vector_name)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                          >13 ShaderMgr::hasShaderType(liquidShader)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.point_name)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.point_name)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                          >13 ShaderMgr::hasShaderType(liquidShader)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.normal_name)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.normal_name)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                          >13 ShaderMgr::hasShaderType(liquidShader)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.color_name)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.color_name)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                          >13 ShaderMgr::hasShaderType(liquidShader)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.bool_name)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.bool_name)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                          >13 ShaderMgr::hasShaderType(liquidShader)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(test_pl_type_liquidShader_liquidShader1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                          >13 ShaderMgr::hasShaderType(liquidShader)
                        >12 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader1)
                          >13 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShader::liqShader(test_pl_type_liquidShader_liquidShader1)
                                >16 liqShaderFactory::getUniqueShaderHandler()
                                >16 liqGetSloInfo::setShaderNode(test_pl_type_liquidShader_liquidShader1)
                          >13 liqShader::getValidConnection(...)
                            >14 liqShader::getName()
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.int_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.int_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.scalar_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.scalar_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.vector_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.vector_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.point_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.point_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.normal_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.normal_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.color_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.color_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.bool_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.bool_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1)
                            >14 ShaderMgr::hasShaderType(phong)
                          >13 ShaderMgr::getValidConnection(phong1)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                              >15 ShaderMgr::hasShaderType(liquidShader)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                    >10 Visitor::preOutput(test_pl_type_liquidShader_liquidShader2)
                    >10 Visitor::preOutput(test_pl_type_liquidShader_liquidShader2)
                    >10 Visitor::outputBegin(test_pl_type_liquidShader_liquidShader2)
                    >10 Visitor::outputBegin(test_pl_type_liquidShader_liquidShader2)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(phong1,diffuse,phong1.diffuse, outputVars)
                          >13 Visitor::addShaderMethodVariavles(phong1,diffuse,float,-1,)
                          >13 Visitor::addShaderMethodVariavles(phong1,diffuse,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong1,,phong1_diffuse124)
                      >11 Visitor::addShaderMethodBody(phong1,,phong1_diffuse124)
                      >11 Visitor::outputUpstreamShader(test_pl_type_liquidShader_liquidShader1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(test_pl_type_liquidShader_liquidShader1,liquidShader)
                          >13 Visitor::visit_liquidShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                            >14 OutputHelper::beginRSL(test_type_pl,test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.int_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.int_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.int_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.scalar_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.scalar_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.scalar_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.vector_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.vector_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.vector_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.point_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.point_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.point_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.normal_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.normal_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.normal_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.color_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.color_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.color_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.bool_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.bool_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.bool_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(test_pl_type_liquidShader_liquidShader1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(test_pl_type_liquidShader_liquidShader1,liquidShader)
                          >13 Visitor::visit_liquidShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                            >14 OutputHelper::beginRSL(test_type_pl,test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.int_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.int_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.int_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.scalar_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.scalar_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.scalar_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.vector_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.vector_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.vector_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.point_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.point_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.point_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.normal_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.normal_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.normal_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.color_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.color_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.color_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader1.bool_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.bool_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.bool_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader1)
                        >12 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                          >13 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                        >12 liqShader::getValidConnection(...)
                          >13 liqShader::getName()
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(test_pl_type_liquidShader_liquidShader1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(test_pl_type_liquidShader_liquidShader1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.int_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.int_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(test_pl_type_liquidShader_liquidShader1,int_name,test_pl_type_liquidShader_liquidShader1.int_name, outputVars)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,int_name,int,-1,0)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,int_name,int,-1,0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.scalar_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.scalar_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(test_pl_type_liquidShader_liquidShader1,scalar_name,test_pl_type_liquidShader_liquidShader1.scalar_name, outputVars)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,scalar_name,float,-1,0)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,scalar_name,float,-1,0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.vector_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.vector_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(test_pl_type_liquidShader_liquidShader1,vector_name,test_pl_type_liquidShader_liquidShader1.vector_name, outputVars)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,vector_name,vector,-1,0)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,vector_name,vector,-1,0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.point_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.point_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(test_pl_type_liquidShader_liquidShader1,point_name,test_pl_type_liquidShader_liquidShader1.point_name, outputVars)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,point_name,point,-1,0)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,point_name,point,-1,0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.normal_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.normal_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(test_pl_type_liquidShader_liquidShader1,normal_name,test_pl_type_liquidShader_liquidShader1.normal_name, outputVars)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,normal_name,normal,-1,0)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,normal_name,normal,-1,0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.color_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.color_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(test_pl_type_liquidShader_liquidShader1,color_name,test_pl_type_liquidShader_liquidShader1.color_name, outputVars)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,color_name,color,-1,0)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,color_name,color,-1,0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader1.bool_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader1.bool_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(test_pl_type_liquidShader_liquidShader1,bool_name,test_pl_type_liquidShader_liquidShader1.bool_name, outputVars)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,bool_name,bool,-1,0)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_liquidShader1,bool_name,bool,-1,0)
                      >11 Visitor::addShaderMethodBody(test_pl_type_liquidShader_liquidShader1,,test_pl_type_liquidShader_liquidShader1_int_name124test_pl_type_liquidShader_liquidShader1_scalar_name124test_pl_type_liquidShader_liquidShader1_vector_name124test_pl_type_liquidShader_liquidShader1_point_name124test_pl_type_liquidShader_liquidShader1_normal_name124test_pl_type_liquidShader_liquidShader1_color_name124test_pl_type_liquidShader_liquidShader1_bool_name124)
                      >11 Visitor::addShaderMethodBody(test_pl_type_liquidShader_liquidShader1,,test_pl_type_liquidShader_liquidShader1_int_name124test_pl_type_liquidShader_liquidShader1_scalar_name124test_pl_type_liquidShader_liquidShader1_vector_name124test_pl_type_liquidShader_liquidShader1_point_name124test_pl_type_liquidShader_liquidShader1_normal_name124test_pl_type_liquidShader_liquidShader1_color_name124test_pl_type_liquidShader_liquidShader1_bool_name124)
                      >11 Visitor::outputUpstreamShader(test_pl_type_liquidShader_liquidShader2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(test_pl_type_liquidShader_liquidShader2,liquidShader)
                          >13 Visitor::visit_liquidShader(test_pl_type_liquidShader_liquidShader2)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader2)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader2)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                            >14 OutputHelper::beginRSL(test_type_pl,test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.int_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.int_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.int_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.scalar_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.scalar_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.scalar_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.vector_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.vector_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.vector_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.point_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.point_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.point_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.normal_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.normal_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.normal_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.color_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.color_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.color_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.bool_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.bool_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.bool_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(test_pl_type_liquidShader_liquidShader2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(test_pl_type_liquidShader_liquidShader2,liquidShader)
                          >13 Visitor::visit_liquidShader(test_pl_type_liquidShader_liquidShader2)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader2)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader2)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                            >14 OutputHelper::beginRSL(test_type_pl,test_pl_type_liquidShader_liquidShader2)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.int_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.int_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.int_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.scalar_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.scalar_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.scalar_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.vector_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.vector_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.vector_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.point_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.point_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.point_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.normal_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.normal_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.normal_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.color_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.color_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.color_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_liquidShader2.bool_name)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.bool_name)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.bool_name)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader2)
                        >12 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader2)
                          >13 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader2)
                        >12 liqShader::getValidConnection(...)
                          >13 liqShader::getName()
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(test_pl_type_liquidShader_liquidShader2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(test_pl_type_liquidShader_liquidShader2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.int_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.int_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeInputVariable(test_pl_type_liquidShader_liquidShader2.int_name, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                          >13 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShader::getValidConnection(...)
                              >15 liqShader::getName()
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.scalar_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.scalar_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeInputVariable(test_pl_type_liquidShader_liquidShader2.scalar_name, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                          >13 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShader::getValidConnection(...)
                              >15 liqShader::getName()
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.vector_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.vector_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeInputVariable(test_pl_type_liquidShader_liquidShader2.vector_name, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                          >13 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShader::getValidConnection(...)
                              >15 liqShader::getName()
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.point_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.point_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeInputVariable(test_pl_type_liquidShader_liquidShader2.point_name, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                          >13 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShader::getValidConnection(...)
                              >15 liqShader::getName()
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.normal_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.normal_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeInputVariable(test_pl_type_liquidShader_liquidShader2.normal_name, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                          >13 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShader::getValidConnection(...)
                              >15 liqShader::getName()
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.color_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.color_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeInputVariable(test_pl_type_liquidShader_liquidShader2.color_name, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                          >13 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShader::getValidConnection(...)
                              >15 liqShader::getName()
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_liquidShader2.bool_name)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_liquidShader2.bool_name)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeInputVariable(test_pl_type_liquidShader_liquidShader2.bool_name, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_liquidShader1)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                          >13 ShaderMgr::getValidConnection(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_liquidShader1)
                            >14 liqShader::getValidConnection(...)
                              >15 liqShader::getName()
                      >11 Visitor::addShaderMethodBody(test_pl_type_liquidShader_liquidShader2,test_pl_type_liquidShader_liquidShader1_int_name124test_pl_type_liquidShader_liquidShader1_scalar_name124test_pl_type_liquidShader_liquidShader1_vector_name124test_pl_type_liquidShader_liquidShader1_point_name124test_pl_type_liquidShader_liquidShader1_normal_name124test_pl_type_liquidShader_liquidShader1_color_name124test_pl_type_liquidShader_liquidShader1_bool_name124,)
                      >11 Visitor::addShaderMethodBody(test_pl_type_liquidShader_liquidShader2,test_pl_type_liquidShader_liquidShader1_int_name124test_pl_type_liquidShader_liquidShader1_scalar_name124test_pl_type_liquidShader_liquidShader1_vector_name124test_pl_type_liquidShader_liquidShader1_point_name124test_pl_type_liquidShader_liquidShader1_normal_name124test_pl_type_liquidShader_liquidShader1_color_name124test_pl_type_liquidShader_liquidShader1_bool_name124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(test_pl_type_liquidShader_liquidShader2)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(liquidShader2SG)
                >8 ConvertShadingNetwork::outputShadingGroup(liquidShader2SG)
                  >9 Visitor::outputShadingGroup(liquidShader2SG)
                  >9 Visitor::outputShadingGroup(liquidShader2SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(liquidShader2SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                      >11 addLightGroupForLight(|pointLight1|pointLightShape1)
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
            >6 Renderer::writeLight_pre(|pointLight2|pointLightShape2,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight2|pointLightShape2,,perspShape,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight2|pointLightShape2,perspShape,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                      >11 addLightGroupForLight(|pointLight2|pointLightShape2)
            >6 Renderer::writeLight_post(|pointLight2|pointLightShape2,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
            >6 Renderer::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane3|pPlaneShape12,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane3|pPlaneShape12,perspShape)
                  >9 Renderer::_writeObject(|pPlane3|pPlaneShape12,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape12.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape12.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane3|pPlaneShape12,E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape12.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane3|pPlaneShape12,perspShape)
                            >14 liqRibHT::find(|pPlane3|pPlaneShape12,|pPlane3|pPlaneShape12,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane3|pPlaneShape12,0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane3|pPlaneShape12,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane3|pPlaneShape12,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane3|pPlaneShape12,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane3|pPlaneShape12)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane3|pPlaneShape12,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane3|pPlaneShape12,|pPlane3|pPlaneShape12,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane3|pPlaneShape12,|pPlane3|pPlaneShape12,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane3|pPlaneShape12,|pPlane3|pPlaneShape12,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane3|pPlaneShape12,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane3|pPlaneShape12,v=0,s=1,c=0,,|pPlane3|pPlaneShape12,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pPlane3|pPlaneShape12,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane3|pPlaneShape12)
                >8 Renderer::exportOneObject_reference(|pPlane3|pPlaneShape12,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane3|pPlaneShape12,perspShape)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
              >7 Renderer::render()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=test_pl_type_liquidShader_conIOFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
    >2 Renderer::~Renderer()
  >1 RendererMgr::unsetFactory()
