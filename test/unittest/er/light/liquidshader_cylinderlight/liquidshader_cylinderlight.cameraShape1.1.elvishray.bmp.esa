//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5 (buildtime=20:51:12.30)
//    Scene : R:/MyDocuments/maya/projects/default/liquidshader_cylinderlight
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,2);
ei_filter(4,3);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();
// shader(plastic,...)
ei_shader("plastic", "liquidSurface1");
ei_shader_param_vector("Cs",1,0,0);
ei_shader_param_vector("Kd",1,1,1);
ei_shader_param_scalar("Ks",0.5);
ei_shader_param_scalar("roughness",0.1);
ei_shader_param_vector("specularcolor",1,1,1);
ei_end_shader();
ei_material("liquidSurface1SG");
ei_surface_shader("liquidSurface1");
ei_end_material();
// shader(plastic,...)
ei_shader("plastic", "liquidSurface3");
ei_shader_param_vector("Cs",0,0,1);
ei_shader_param_vector("Kd",0.503349,0.503349,0.503349);
ei_shader_param_scalar("Ks",0.5);
ei_shader_param_scalar("roughness",0.1);
ei_shader_param_vector("specularcolor",1,1,1);
ei_end_shader();
ei_material("liquidSurface4SG");
ei_surface_shader("liquidSurface3");
ei_end_material();
ei_shader("maya_lambert", "lambert1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_param_vector("i_color",0.5,0.5,0.5);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_bool("i_refractions",0);
ei_shader_param_scalar("i_refractiveIndex",1);
ei_shader_param_index("i_refractionLimit",6);
ei_shader_param_scalar("i_lightAbsorbance",0);
ei_shader_param_scalar("i_shadowAttenuation",0.5);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("initialShadingGroup");
ei_surface_shader("lambert1");
ei_end_material();

//worldPrologue

// Renderer::exportLight("_areaLight1_areaLightShape1");

// Renderer::exportAreaLight()
// NOTE: I export maya area light to ambient light temporarily, but how to deal with the "spread","deltaangle" parameters?
// shader(cylinderlight,...)
ei_shader("cylinderlight", "liquidShader1");
ei_shader_param_scalar("intensity",5);
ei_shader_param_vector("lightcolor",1,1,0);
ei_shader_param_scalar("radius",1);
ei_shader_param_scalar("height",10);
ei_end_shader();
ei_light("|areaLight1|areaLightShape1_object");
ei_light_shader("liquidShader1");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(1);
ei_end_light();
ei_instance("|areaLight1|areaLightShape1");
ei_element("|areaLight1|areaLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -0.259175,3.87012,4.06733,1);
ei_declare("|pCube1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane3_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane4_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCubeShape1, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCubeShape1
//### UV(map1), size=14
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCubeShape1" );
{
eiTag tag;
//vertex positions(required), size=36
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_end_tab();
//### N ###(optional)
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.625000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_end_tab();
//### triangles(required) size=36
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_tab_add_index(6);
ei_tab_add_index(7);
ei_tab_add_index(8);
ei_tab_add_index(9);
ei_tab_add_index(10);
ei_tab_add_index(11);
ei_tab_add_index(12);
ei_tab_add_index(13);
ei_tab_add_index(14);
ei_tab_add_index(15);
ei_tab_add_index(16);
ei_tab_add_index(17);
ei_tab_add_index(18);
ei_tab_add_index(19);
ei_tab_add_index(20);
ei_tab_add_index(21);
ei_tab_add_index(22);
ei_tab_add_index(23);
ei_tab_add_index(24);
ei_tab_add_index(25);
ei_tab_add_index(26);
ei_tab_add_index(27);
ei_tab_add_index(28);
ei_tab_add_index(29);
ei_tab_add_index(30);
ei_tab_add_index(31);
ei_tab_add_index(32);
ei_tab_add_index(33);
ei_tab_add_index(34);
ei_tab_add_index(35);
ei_end_tab();
}//|pCube1|pCubeShape1
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane1|pPlaneShape1, 0, 0

//############################### mesh #
//shape full path name=|pPlane1|pPlaneShape1
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane1|pPlaneShape1" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -4.766757, -0.000000, 5.082920 );
ei_tab_add_vector( 4.766757, -0.000000, 5.082920 );
ei_tab_add_vector( -4.766757, 0.000000, -5.082920 );
ei_tab_add_vector( -4.766757, 0.000000, -5.082920 );
ei_tab_add_vector( 4.766757, -0.000000, 5.082920 );
ei_tab_add_vector( 4.766757, 0.000000, -5.082920 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 0.937799, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.937799, 0.000000 );
ei_tab_add_vector2( 0.937799, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane1|pPlaneShape1
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/liquidshader_cylinderlight.cameraShape1.1.elvishray.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(0.1,10000);
ei_end_camera();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape2, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape2
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape2" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -2.992789, -0.000000, 4.438420 );
ei_tab_add_vector( 2.992789, -0.000000, 4.438420 );
ei_tab_add_vector( -2.992789, 0.000000, -4.438420 );
ei_tab_add_vector( -2.992789, 0.000000, -4.438420 );
ei_tab_add_vector( 2.992789, -0.000000, 4.438420 );
ei_tab_add_vector( 2.992789, 0.000000, -4.438420 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 0.674291, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.674291, 0.000000 );
ei_tab_add_vector2( 0.674291, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape2
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane3|pPlaneShape3, 0, 0

//############################### mesh #
//shape full path name=|pPlane3|pPlaneShape3
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane3|pPlaneShape3" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -2.688745, -0.000000, 5.199368 );
ei_tab_add_vector( 2.688745, -0.000000, 5.199368 );
ei_tab_add_vector( -2.688745, 0.000000, -5.199368 );
ei_tab_add_vector( -2.688745, 0.000000, -5.199368 );
ei_tab_add_vector( 2.688745, -0.000000, 5.199368 );
ei_tab_add_vector( 2.688745, 0.000000, -5.199368 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 0.517129, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.517129, 0.000000 );
ei_tab_add_vector2( 0.517129, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane3|pPlaneShape3
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane4|pPlaneShape4, 0, 0

//############################### mesh #
//shape full path name=|pPlane4|pPlaneShape4
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane4|pPlaneShape4" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -4.709424, -0.000000, 1.855726 );
ei_tab_add_vector( 4.709424, -0.000000, 1.855726 );
ei_tab_add_vector( -4.709424, 0.000000, -1.855726 );
ei_tab_add_vector( -4.709424, 0.000000, -1.855726 );
ei_tab_add_vector( 4.709424, -0.000000, 1.855726 );
ei_tab_add_vector( 4.709424, 0.000000, -1.855726 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.394045 );
ei_tab_add_vector2( 0.000000, 0.394045 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.394045 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane4|pPlaneShape4
ei_end_object();
//--------------------------
//ribNode->name=|pCube1|pCubeShape1
//ribNode's transform node=|pCube1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCubeShape1
ei_instance("|pCube1");
//|pCube1|pCubeShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: liquidSurface1SG,
ei_mtl("liquidSurface1SG");
//shape name=|pCube1|pCubeShape1
//shape full path name=|pCube1|pCubeShape1
ei_element("|pCube1|pCubeShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,1,0,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane1|pPlaneShape1
//ribNode's transform node=|pPlane1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane1|pPlaneShape1
ei_instance("|pPlane1");
//|pPlane1|pPlaneShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: liquidSurface4SG,
ei_mtl("liquidSurface4SG");
//shape name=|pPlane1|pPlaneShape1
//shape full path name=|pPlane1|pPlaneShape1
ei_element("|pPlane1|pPlaneShape1");
ei_transform(0.950023,0,0,0,   0,0.950023,0,0,   0,0,2.32353,0,   0,-1.35239,4.38695,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1|cameraShape1
//ribNode's transform node=|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1|cameraShape1
ei_instance("|camera1");
//|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1|cameraShape1
//shape full path name=|camera1|cameraShape1
ei_element("|camera1|cameraShape1");
ei_transform(0.999781,1.0842e-019,0.0209424,0,   0.00175242,0.996493,-0.0836595,0,   -0.020869,0.0836778,0.996274,0,   -0.710755,3.37804,26.2825,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane2|pPlaneShape2
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape2
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape2 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pPlane2|pPlaneShape2
//shape full path name=|pPlane2|pPlaneShape2
ei_element("|pPlane2|pPlaneShape2");
ei_transform(3.45983e-016,1.55817,0,0,   -1,2.22045e-016,0,0,   0,0,2.44576,0,   5.47095,3.03237,4.2678,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane3|pPlaneShape3
//ribNode's transform node=|pPlane3
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane3|pPlaneShape3
ei_instance("|pPlane3");
//|pPlane3|pPlaneShape3 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pPlane3|pPlaneShape3
//shape full path name=|pPlane3|pPlaneShape3
ei_element("|pPlane3|pPlaneShape3");
ei_transform(3.45983e-016,-1.55817,-0,0,   1,2.22045e-016,0,0,   0,-0,2.44576,0,   -5.2279,3.06019,3.80176,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane3_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane4|pPlaneShape4
//ribNode's transform node=|pPlane4
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane4|pPlaneShape4
ei_instance("|pPlane4");
//|pPlane4|pPlaneShape4 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pPlane4|pPlaneShape4
//shape full path name=|pPlane4|pPlaneShape4
ei_element("|pPlane4|pPlaneShape4");
ei_transform(1,0,0,0,   0,2.22045e-016,1,0,   0,-2.42249,5.37902e-016,0,   0.210817,3.35958,-7.22003,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane4_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1");
//light(s)
ei_add_instance("|areaLight1|areaLightShape1");
//mesh(s)
ei_add_instance("|pCube1");
ei_add_instance("|pPlane1");
ei_add_instance("|pPlane2");
ei_add_instance("|pPlane3");
ei_add_instance("|pPlane4");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

