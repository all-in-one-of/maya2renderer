//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5 (buildtime=20:51:12.30)
//    Scene : R:/MyDocuments/maya/projects/default/quardlight
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,2);
ei_filter(4,3);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();
ei_shader("maya_phong", "phong2");
ei_shader_param_vector("color_",1,0,1);
ei_shader_param_vector("transparency",0,0,0);
ei_shader_param_vector("ambientColor",0,0,0);
ei_shader_param_vector("incandescence",0,0,0);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("normalCamera",1,1,1);
ei_shader_param_scalar("diffuse",0.8);
ei_shader_param_scalar("translucence",0);
ei_shader_param_scalar("translucenceDepth",0.5);
ei_shader_param_scalar("translucenceFocus",0.5);
ei_shader_param_scalar("cosinePower",20);
ei_shader_param_vector("specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("reflectivity",0.5);
ei_shader_param_vector("reflectedColor",0,0,0);
ei_shader_param_index("matteOpacityMode",2);
ei_shader_param_scalar("matteOpacity",1);
ei_shader_param_index("reflectionLimit",1);
ei_shader_param_vector("outColor",0,0,0);
ei_shader_param_vector("outTransparency",0,0,0);
ei_end_shader();

ei_material("phong2SG");
ei_surface_shader("phong2");
ei_end_material();
ei_shader("maya_phong", "phong1");
ei_shader_param_vector("color_",0.5,0.5,0.5);
ei_shader_param_vector("transparency",0,0,0);
ei_shader_param_vector("ambientColor",0,0,0);
ei_shader_param_vector("incandescence",0,0,0);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("normalCamera",1,1,1);
ei_shader_param_scalar("diffuse",0.8);
ei_shader_param_scalar("translucence",0);
ei_shader_param_scalar("translucenceDepth",0.5);
ei_shader_param_scalar("translucenceFocus",0.5);
ei_shader_param_scalar("cosinePower",20);
ei_shader_param_vector("specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("reflectivity",0.5);
ei_shader_param_vector("reflectedColor",0,0,0);
ei_shader_param_index("matteOpacityMode",2);
ei_shader_param_scalar("matteOpacity",1);
ei_shader_param_index("reflectionLimit",1);
ei_shader_param_vector("outColor",0,0,0);
ei_shader_param_vector("outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();

//worldPrologue

// Renderer::exportLight("_areaLight1_areaLightShape1");

// Renderer::exportAreaLight()
// NOTE: I export maya area light to ambient light temporarily, but how to deal with the "spread","deltaangle" parameters?
// shader(quadlight,...)
ei_shader("quadlight", "liquidShader1");
ei_shader_param_scalar("intensity",20);
ei_shader_param_vector("lightcolor",1,1,0);
ei_shader_param_scalar("deltaangle",1.5708);
ei_shader_param_vector("direction",0,0,-1);
ei_shader_param_scalar("spread",0.785398);
ei_shader_param_scalar("width",1);
ei_shader_param_scalar("height",1);
ei_end_shader();
ei_light("|areaLight1|areaLightShape1_object");
ei_light_shader("liquidShader1");
ei_origin(0,0,0);
ei_area_samples(16);
ei_adaptive(1);
ei_end_light();
ei_instance("|areaLight1|areaLightShape1");
ei_element("|areaLight1|areaLightShape1_object");
ei_transform(2,0,0,0,   0,2,0,0,   0,0,1,0,   0,1.71325,0,1);
ei_declare("|pPlane1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane1|pPlaneShape1, 0, 0

//############################### mesh #
//shape full path name=|pPlane1|pPlaneShape1
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane1|pPlaneShape1" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -4.766757, -0.000000, 5.082920 );
ei_tab_add_vector( 4.766757, -0.000000, 5.082920 );
ei_tab_add_vector( -4.766757, 0.000000, -5.082920 );
ei_tab_add_vector( -4.766757, 0.000000, -5.082920 );
ei_tab_add_vector( 4.766757, -0.000000, 5.082920 );
ei_tab_add_vector( 4.766757, 0.000000, -5.082920 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 0.937799, 0.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.000000, 1.000000 );
ei_tab_add_vector2( 0.937799, 0.000000 );
ei_tab_add_vector2( 0.937799, 1.000000 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane1|pPlaneShape1
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape2, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape2
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape2" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -12.812641, -0.000000, 3.791097 );
ei_tab_add_vector( 12.812641, -0.000000, 3.791097 );
ei_tab_add_vector( -12.812641, 0.000000, -3.791097 );
ei_tab_add_vector( -12.812641, 0.000000, -3.791097 );
ei_tab_add_vector( 12.812641, -0.000000, 3.791097 );
ei_tab_add_vector( 12.812641, 0.000000, -3.791097 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.295887 );
ei_tab_add_vector2( 0.000000, 0.295887 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.295887 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape2
ei_end_object();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/quardlight.cameraShape1.1.elvishray.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(0.1,10000);
ei_end_camera();
//--------------------------
//ribNode->name=|pPlane1|pPlaneShape1
//ribNode's transform node=|pPlane1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane1|pPlaneShape1
ei_instance("|pPlane1");
//|pPlane1|pPlaneShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong2SG,
ei_mtl("phong2SG");
//shape name=|pPlane1|pPlaneShape1
//shape full path name=|pPlane1|pPlaneShape1
ei_element("|pPlane1|pPlaneShape1");
ei_transform(3.46897,0,0,0,   0,3.46897,0,0,   0,0,3.46897,0,   0,-7.96804,0,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane2|pPlaneShape2
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape2
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape2 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane2|pPlaneShape2
//shape full path name=|pPlane2|pPlaneShape2
ei_element("|pPlane2|pPlaneShape2");
ei_transform(1,0,0,0,   0,-0.0251425,0.999684,0,   0,-2.46903,-0.0620971,0,   1.0872,0.798487,-0.521076,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1|cameraShape1
//ribNode's transform node=|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1|cameraShape1
ei_instance("|camera1");
//|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1|cameraShape1
//shape full path name=|camera1|cameraShape1
ei_element("|camera1|cameraShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0.0871344,1.71847,6.18514,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1");
//light(s)
ei_add_instance("|areaLight1|areaLightShape1");
//mesh(s)
ei_add_instance("|pPlane1");
ei_add_instance("|pPlane2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

