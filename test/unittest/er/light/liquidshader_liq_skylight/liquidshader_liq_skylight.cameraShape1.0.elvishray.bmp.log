>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(elvishray)
  >1 RendererMgr::install()
    >2 Renderer::Renderer()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/liquidshader_liq_skylight.cameraShape1.1.elvishray.bmp)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(liquidshader_liq_skylightFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(liquidShader1)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(liquidShader1)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidShader1)
          >5 liqShader::liqShader(liquidShader2)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(liquidShader2)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidShader2)
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,cameraShape1)
          >5 liqRibTranslator::generateFileName(5,cameraShape1)
            >6 liqRibTranslator::generateImageName(, job(cameraShape1)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|spotLight3|spotLightShape3,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|spotLight3|spotLightShape3,0)
              >7 liqRibHT::find(|spotLight3|spotLightShape3,|spotLight3|spotLightShape3,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|spotLight3|spotLightShape3,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(spotLight3,,2)
                >8 liqRibNode::parseVectorAttributes(spotLight3,,3)
                >8 liqRibNode::parseVectorAttributes(spotLight3,,4)
                >8 liqRibNode::findShadingGroup(|spotLight3|spotLightShape3,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|spotLight3|spotLightShape3,3)
                  >9 liqRibLightData::liqRibLightData(|spotLight3|spotLightShape3)
                    >10 liqShaderFactory::getShader(liquidShader1)
                      >11 liqShader::liqShader(liquidShader1)
                        >12 liqShaderFactory::getUniqueShaderHandler()
                        >12 liqGetSloInfo::setShaderNode(liquidShader1)
                    >10 liqRibData::addAdditionalSurfaceParameters(spotLightShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pSphere1|pSphereShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pSphere1|pSphereShape1,1)
              >7 liqRibHT::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pSphere1|pSphereShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pSphere1,,2)
                >8 liqRibNode::parseVectorAttributes(pSphere1,,3)
                >8 liqRibNode::parseVectorAttributes(pSphere1,,4)
                >8 liqRibNode::findShadingGroup(|pSphere1|pSphereShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pSphere1|pSphereShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pSphere1|pSphereShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pSphereShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,2)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|camera1|cameraShape1,)
              >7 liqRibTranslator::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
            >6 liqRibTranslator::getCameraFilmOffset(|camera1|cameraShape1,)
            >6 liqRibTranslator::getCameraTransform(|camera1|cameraShape1,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_begin(cameraShape1)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/liquidshader_liq_skylight,yaoyansi,time)
            >6 Renderer::ribPrologue_options(cameraShape1)
          >5 liqRibTranslatorNew::framePrologue__(1,cameraShape1)
            >6 Renderer::framePrologue(1,cameraShape1)
              >7 Renderer::framePrologue_camera(1,cameraShape1)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|camera1|cameraShape1,liqEnvironmentShader)
                  >9 liqShaderFactory::getShader(liquidShader2)
                    >10 liqShaderFactory::getShader(liquidShader2)
                      >11 liqShader::liqShader(liquidShader2)
                        >12 liqShaderFactory::getUniqueShaderHandler()
                        >12 liqGetSloInfo::setShaderNode(liquidShader2)
                  >9 liqShader::write()
                    >10 liqShader::getName()
                    >10 shader_UserDefinedShader(liquidShader2)
                      >11 liqShader::getShaderFileName()
                      >11 liqShader::getName()
                      >11 Renderer::shader_environment(liquidShader2,tokenPointerArray)
                        >12 liqShader::getName()
                        >12 Renderer::_UserDefinedShader(liquidShader2, tokenPointerArray)
                          >13 liqShader::getName()
                          >13 liqShader::getShaderFileName()
                >8 Renderer::cameraOutput(cameraShape1)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert6SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert6)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert6)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert6,surfaceShader)
                    >10 Visitor::initShaderData(lambert6,surfaceShader)
                    >10 Visitor::initShaderData(lambert6,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert6, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert6)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert6)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                    >10 Visitor::preOutput(lambert6)
                    >10 Visitor::preOutput(lambert6)
                    >10 Visitor::outputBegin(lambert6)
                    >10 Visitor::outputBegin(lambert6)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(lambert6)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert6,lambert)
                          >13 Visitor::visitLambert(lambert6)
                            >14 OutputHelper::beginRSL(maya_lambert_transparent,lambert6)
                            >14 ShaderMgr::convertibleConnection(lambert6.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                            >14 ShaderMgr::convertibleConnection(lambert6.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert6.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert6.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert6.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert6.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert6.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert6)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert6,lambert)
                          >13 Visitor::visitLambert(lambert6)
                            >14 OutputHelper::beginRSL(maya_lambert_transparent,lambert6)
                            >14 ShaderMgr::convertibleConnection(lambert6.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                            >14 ShaderMgr::convertibleConnection(lambert6.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert6.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert6.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert6.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert6.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert6.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert6)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert6, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert6, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert6,,)
                      >11 Visitor::addShaderMethodBody(lambert6,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert6)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert6SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert6SG)
                  >9 Visitor::outputShadingGroup(lambert6SG)
                  >9 Visitor::outputShadingGroup(lambert6SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert6SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|spotLight3|spotLightShape3,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|spotLight3|spotLightShape3,,cameraShape1,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|spotLight3|spotLightShape3,cameraShape1,...)
                    >10 Renderer::exportAreaLight(spotLightShape3,cameraShape1)
                      >11 liqShader::getName()
                      >11 shader_UserDefinedShader(liquidShader1)
                        >12 liqShader::getShaderFileName()
                        >12 liqShader::getName()
                        >12 Renderer::shader_light(liquidShader1, tokenPointerArray)
                          >13 liqShader::getName()
                          >13 Renderer::_UserDefinedShader(liquidShader1, tokenPointerArray)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                      >11 liqShader::getName()
                      >11 addLightGroupForLight(|spotLight3|spotLightShape3)
            >6 Renderer::writeLight_post(|spotLight3|spotLightShape3,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
            >6 Renderer::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pSphere1|pSphereShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|pSphere1|pSphereShape1,cameraShape1)
                  >9 Renderer::_writeObject(|pSphere1|pSphereShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pSphere1|pSphereShape1,R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pSphere1|pSphereShape1,cameraShape1)
                            >14 liqRibHT::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pSphere1|pSphereShape1,0)
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere1|pSphereShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere1|pSphereShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere1|pSphereShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pSphere1|pSphereShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|pSphere1|pSphereShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere1|pSphereShape1,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pSphere1|pSphereShape1,v=0,s=0,c=0,,|pSphere1|pSphereShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere1|pSphereShape1)
                >8 Renderer::exportOneObject_reference(|pSphere1|pSphereShape1,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pSphere1|pSphereShape1,cameraShape1)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
              >7 Renderer::cookInstanceGroup()
              >7 Renderer::render()
        >4 Renderer::HeroPassEnd(cameraShape1)
      >3 liqRenderScript::addJob(job.title=liquidshader_liq_skylightFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
    >2 Renderer::~Renderer()
  >1 RendererMgr::unsetFactory()
