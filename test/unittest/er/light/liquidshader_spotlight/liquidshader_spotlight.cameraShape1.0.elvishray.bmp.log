>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(elvishray)
  >1 RendererMgr::install()
    >2 Renderer::Renderer()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/liquidshader_spotlight.cameraShape1.1.elvishray.bmp)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(liquidshader_spotlightFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(liquidShader1)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(liquidShader1)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidShader1)
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,cameraShape1)
          >5 liqRibTranslator::generateFileName(5,cameraShape1)
            >6 liqRibTranslator::generateImageName(, job(cameraShape1)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqShaderFactory::getShader(liquidShader1)
                      >11 liqShader::liqShader(liquidShader1)
                        >12 liqShaderFactory::getUniqueShaderHandler()
                        >12 liqGetSloInfo::setShaderNode(liquidShader1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pCube1|pCubeShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pCube1|pCubeShape1,1)
              >7 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube1,,2)
                >8 liqRibNode::parseVectorAttributes(pCube1,,3)
                >8 liqRibNode::parseVectorAttributes(pCube1,,4)
                >8 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane1|pPlaneShape1,2)
              >7 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape2,3)
              >7 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,4)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|camera1|cameraShape1,)
              >7 liqRibTranslator::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
            >6 liqRibTranslator::getCameraFilmOffset(|camera1|cameraShape1,)
            >6 liqRibTranslator::getCameraTransform(|camera1|cameraShape1,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_begin(cameraShape1)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/liquidshader_spotlight,yaoyansi,time)
            >6 Renderer::ribPrologue_options(cameraShape1)
          >5 liqRibTranslatorNew::framePrologue__(1,cameraShape1)
            >6 Renderer::framePrologue(1,cameraShape1)
              >7 Renderer::framePrologue_camera(1,cameraShape1)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|camera1|cameraShape1,liqEnvironmentShader)
                >8 Renderer::cameraOutput(cameraShape1)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(phong2SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong2)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong2)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong2,surfaceShader)
                    >10 Visitor::initShaderData(phong2,surfaceShader)
                    >10 Visitor::initShaderData(phong2,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong2, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong2)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong2)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                    >10 Visitor::preOutput(phong2)
                    >10 Visitor::preOutput(phong2)
                    >10 Visitor::outputBegin(phong2)
                    >10 Visitor::outputBegin(phong2)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong2,phong)
                          >13 Visitor::visitPhong(phong2)
                            >14 OutputHelper::beginRSL(maya_phong,phong2)
                            >14 ShaderMgr::convertibleConnection(phong2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                            >14 ShaderMgr::convertibleConnection(phong2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                            >14 ShaderMgr::convertibleConnection(phong2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                            >14 OutputHelper::add_liq_UserDefinedNormal(phong2)
                            >14 ShaderMgr::convertibleConnection(phong2.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong2.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong2.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong2.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong2,phong)
                          >13 Visitor::visitPhong(phong2)
                            >14 OutputHelper::beginRSL(maya_phong,phong2)
                            >14 ShaderMgr::convertibleConnection(phong2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                            >14 ShaderMgr::convertibleConnection(phong2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                            >14 ShaderMgr::convertibleConnection(phong2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                            >14 OutputHelper::add_liq_UserDefinedNormal(phong2)
                            >14 ShaderMgr::convertibleConnection(phong2.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong2.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong2.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong2.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong2, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong2,,,)
                      >11 Visitor::addShaderMethodBody(phong2,,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong2)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong2SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong2SG)
                  >9 Visitor::outputShadingGroup(phong2SG)
                  >9 Visitor::outputShadingGroup(phong2SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong2SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong1)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong1)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 OutputHelper::add_liq_UserDefinedNormal(phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 OutputHelper::add_liq_UserDefinedNormal(phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong1, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong1,,,)
                      >11 Visitor::addShaderMethodBody(phong1,,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert1)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1,surfaceShader)
                    >10 Visitor::initShaderData(lambert1,surfaceShader)
                    >10 Visitor::initShaderData(lambert1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert1)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                    >10 Visitor::preOutput(lambert1)
                    >10 Visitor::preOutput(lambert1)
                    >10 Visitor::outputBegin(lambert1)
                    >10 Visitor::outputBegin(lambert1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(lambert1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                          >13 Visitor::visitLambert(lambert1)
                            >14 OutputHelper::beginRSL(maya_lambert_transparent,lambert1)
                            >14 ShaderMgr::convertibleConnection(lambert1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                            >14 ShaderMgr::convertibleConnection(lambert1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                          >13 Visitor::visitLambert(lambert1)
                            >14 OutputHelper::beginRSL(maya_lambert_transparent,lambert1)
                            >14 ShaderMgr::convertibleConnection(lambert1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                            >14 ShaderMgr::convertibleConnection(lambert1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert1,,,)
                      >11 Visitor::addShaderMethodBody(lambert1,,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                >8 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                  >9 Visitor::outputShadingGroup(initialShadingGroup)
                  >9 Visitor::outputShadingGroup(initialShadingGroup)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,cameraShape1,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,cameraShape1,...)
                    >10 Renderer::exportAreaLight(pointLightShape1,cameraShape1)
                      >11 liqShader::getName()
                      >11 shader_UserDefinedShader(liquidShader1)
                        >12 liqShader::getShaderFileName()
                        >12 liqShader::getName()
                        >12 Renderer::shader_light(liquidShader1, tokenPointerArray)
                          >13 liqShader::getName()
                          >13 Renderer::_UserDefinedShader(liquidShader1, tokenPointerArray)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                      >11 liqShader::getName()
                      >11 addLightGroupForLight(|pointLight1|pointLightShape1)
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
            >6 Renderer::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|pCube1|pCubeShape1,cameraShape1)
                  >9 Renderer::_writeObject(|pCube1|pCubeShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube1|pCubeShape1,R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write1(|pCube1|pCubeShape1,cameraShape1)
                            >14 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                            >14 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
                            >14 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write1(|pPlane1|pPlaneShape1,cameraShape1)
                            >14 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                            >14 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                            >14 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write1(|pPlane2|pPlaneShape2,cameraShape1)
                            >14 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                            >14 _exportVertexFromNodePlug(|pPlane2|pPlaneShape2,0)
                            >14 liqRibData::getFullPathName()
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pCube1|pCubeShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=0,c=0,,|pCube1|pCubeShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                >8 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane2|pPlaneShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,cameraShape1)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
              >7 Renderer::cookInstanceGroup()
              >7 Renderer::render()
        >4 Renderer::HeroPassEnd(cameraShape1)
      >3 liqRenderScript::addJob(job.title=liquidshader_spotlightFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
    >2 Renderer::~Renderer()
  >1 RendererMgr::unsetFactory()
