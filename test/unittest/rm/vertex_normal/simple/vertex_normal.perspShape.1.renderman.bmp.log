  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(renderman)
    >2 RendererMgr::install()
      >3 ShaderMgr::setValidConnection()
      >3 ShaderMgr::getShaderConnectionMap()
      >3 RNodeVisitorMgr::setValidConnection(...)
        >4 FlatNodeVisitor::setValidConnection(...)
        >4 OccLightNodeVisitor::setValidConnection(...)
        >4 PhysicalsunNodeVisitor::setValidConnection(...)
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/vertex_normal.perspShape.1.renderman.bmp)(but do nothing now)
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(vertex_normalFrame1)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tLightMgr::buildShadowJob(thisJob___, 0)
              >7 tLightMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,perspShape)
            >6 liqRibTranslator::generateFileName(5,perspShape)
              >7 liqRibTranslator::generateImageName(, job(perspShape)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(1)
          >5 liqRibTranslatorNew::scanScene__(1,0)
            >6 tLightMgr::scanScene(1,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|pointLight1|pointLightShape1,0)
                >8 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,1,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,1)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,2,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,2)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,3)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,4)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube1|pCubeShape1,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|pCube1|pCubeShape1,5)
                >8 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,4)
                  >9 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|pPlane1|pPlaneShape1,6)
                >8 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pSphere1|pSphereShape1,lframe,0,0,7,matrix,,-1)
                >8 liqRibHT::hash(|pSphere1|pSphereShape1,7)
                >8 liqRibHT::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pSphere1|pSphereShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pSphere1,,2)
                  >9 liqRibNode::parseVectorAttributes(pSphere1,,3)
                  >9 liqRibNode::parseVectorAttributes(pSphere1,,4)
                  >9 liqRibNode::findShadingGroup(|pSphere1|pSphereShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pSphere1|pSphereShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pSphere1|pSphereShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pSphereShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pSphere2|pSphereShape2,lframe,0,0,8,matrix,,-1)
                >8 liqRibHT::hash(|pSphere2|pSphereShape2,8)
                >8 liqRibHT::find(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pSphere2|pSphereShape2,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,2)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,3)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,4)
                  >9 liqRibNode::findShadingGroup(|pSphere2|pSphereShape2,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pSphere2|pSphereShape2,0)
                    >10 liqRibMeshData::liqRibMeshData(|pSphere2|pSphereShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pSphereShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pSphere2|polySurfaceShape1,lframe,0,0,9,matrix,,-1)
                >8 liqRibHT::hash(|pSphere2|polySurfaceShape1,9)
                >8 liqRibHT::find(|pSphere2|polySurfaceShape1,|pSphere2|polySurfaceShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pSphere2|polySurfaceShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,2)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,3)
                  >9 liqRibNode::parseVectorAttributes(pSphere2,,4)
                  >9 liqRibNode::findShadingGroup(|pSphere2|polySurfaceShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pSphere2|polySurfaceShape1,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube2|pCubeShape2,lframe,0,0,10,matrix,,-1)
                >8 liqRibHT::hash(|pCube2|pCubeShape2,10)
                >8 liqRibHT::find(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube2|pCubeShape2,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube2,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube2,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube2,,4)
                  >9 liqRibNode::findShadingGroup(|pCube2|pCubeShape2,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube2|pCubeShape2,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube2|pCubeShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,11)
            >6 tCameraMgr::getCameraData(perspShape,0)
              >7 tCameraMgr::getCameraInfo(|persp|perspShape,)
                >8 tCameraMgr::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                  >9 tCameraMgr::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
              >7 tCameraMgr::getCameraFilmOffset(|persp|perspShape,)
              >7 tCameraMgr::getCameraTransform(|persp|perspShape,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 rm::Renderer::doTextures(txtList.size()=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 rm::Renderer::doShadows(shadowList_.size()=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
            >6 Renderer::_RiOption_format_compress(0,0)
          >5 Renderer::isHeroPassReady(perspShape)
          >5 Renderer::HeroPassBegin(perspShape)
          >5 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
            >6 liqRibTranslatorNew::ribPrologue__(perspShape)
              >7 Renderer::ribPrologue_begin(perspShape)
                >8 RiBegin_liq(R:/MyDocuments/maya/projects/default/rib/vertex_normal_perspShape.0001..rib(strlen=75)
              >7 Renderer::ribPrologue_comment(2.3.5,R:/MyDocuments/maya/projects/default/vertex_normal,yaoyansi,time)
              >7 Renderer::ribPrologue_options(perspShape)
                >8 Renderer::ribPrologue_writeSearthPath()
                >8 tHeroRibWriterMgr::ribPrologue_hider(0)
                >8 tHeroRibWriterMgr::ribPrologue_samples(4,4)
                >8 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
                >8 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
                >8 tHeroRibWriterMgr::ribPrologue_pass(beauty)
            >6 liqRibTranslatorNew::framePrologue__(1,perspShape)
              >7 Renderer::framePrologue(1,perspShape)
                >8 tHeroRibWriterMgr::framePrologue_display(perspShape)
                  >9 exportJobCamera(perspShape,,)
                >8 Renderer::framePrologue_camera(1,perspShape)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                  >9 ShadingNetworkUser::beforeExport_user()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong1SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(phong1)
                          >13 ConvertShadingNetwork::canShaderExported(phong1)
                          >13 ConvertShadingNetwork::exportShaderBegin(phong1)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1)
                            >14 Visitor::initShaderData(phong1)
                              >15 NodePlugConnectionMgr::setNodePlugMgr(...)
                              >15 NodePlugConnectionMgr::reset()
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                              >15 ConvertShadingNetwork::nodeIsConvertible(phong1)
                                >16 ShaderMgr::hasShaderType(phong)
                              >15 ShaderMgr::getValidConnection(phong1)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 Visitor::preOutput(phong1)
                            >14 Visitor::outputBegin(phong1), open shader file
                              >15 getShaderFilePath_SRC(phong1)
                                >16 getShaderFilePath_NoExt(phong1)
                              >15 Visitor::getSurfaceShaderAOVOutputParametersString()
                              >15 Visitor::defineAOVVariables(phong1)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(phong1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                                  >17 Visitor::visitPhong(phong1)
                                    >18 OutputHelper::addInclude(phong.h)
                                    >18 OutputHelper::beginRSL(phong1)
                                    >18 ShaderMgr::convertibleConnection(phong1.ambientColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                    >18 NodePlugInfo::add(phong1,ambientColor,color)
                                      >19 NodePlug::add(ambientColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong1.color)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                    >18 NodePlugInfo::add(phong1,color,color)
                                      >19 NodePlug::add(color, color)
                                    >18 ShaderMgr::convertibleConnection(phong1.cosinePower)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                                    >18 NodePlugInfo::add(phong1,cosinePower,float)
                                      >19 NodePlug::add(cosinePower, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.diffuse)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                    >18 NodePlugInfo::add(phong1,diffuse,float)
                                      >19 NodePlug::add(diffuse, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.incandescence)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                                    >18 NodePlugInfo::add(phong1,incandescence,color)
                                      >19 NodePlug::add(incandescence, color)
                                    >18 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                                    >18 NodePlugInfo::add(phong1,matteOpacity,float)
                                      >19 NodePlug::add(matteOpacity, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                                    >18 NodePlugInfo::add(phong1,matteOpacityMode,float)
                                      >19 NodePlug::add(matteOpacityMode, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.specularColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                                    >18 NodePlugInfo::add(phong1,specularColor,color)
                                      >19 NodePlug::add(specularColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong1.reflectivity)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                                    >18 NodePlugInfo::add(phong1,reflectivity,float)
                                      >19 NodePlug::add(reflectivity, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                                    >18 NodePlugInfo::add(phong1,reflectedColor,color)
                                      >19 NodePlug::add(reflectedColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong1.refractions)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.refractions)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.refractions)
                                    >18 NodePlugInfo::add(phong1,refractions,float)
                                      >19 NodePlug::add(refractions, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.refractiveIndex)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.refractiveIndex)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.refractiveIndex)
                                    >18 NodePlugInfo::add(phong1,refractiveIndex,float)
                                      >19 NodePlug::add(refractiveIndex, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.refractionLimit)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.refractionLimit)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.refractionLimit)
                                    >18 NodePlugInfo::add(phong1,refractionLimit,float)
                                      >19 NodePlug::add(refractionLimit, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.lightAbsorbance)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.lightAbsorbance)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.lightAbsorbance)
                                    >18 NodePlugInfo::add(phong1,lightAbsorbance,float)
                                      >19 NodePlug::add(lightAbsorbance, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.shadowAttenuation)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.shadowAttenuation)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.shadowAttenuation)
                                    >18 NodePlugInfo::add(phong1,shadowAttenuation,float)
                                      >19 NodePlug::add(shadowAttenuation, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                                    >18 NodePlugInfo::add(phong1,reflectionLimit,float)
                                      >19 NodePlug::add(reflectionLimit, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.translucence)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                                    >18 NodePlugInfo::add(phong1,translucence,float)
                                      >19 NodePlug::add(translucence, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                                    >18 NodePlugInfo::add(phong1,translucenceDepth,float)
                                      >19 NodePlug::add(translucenceDepth, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                                    >18 NodePlugInfo::add(phong1,translucenceFocus,float)
                                      >19 NodePlug::add(translucenceFocus, float)
                                    >18 ShaderMgr::convertibleConnection(phong1.transparency)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                    >18 NodePlugInfo::add(phong1,transparency,color)
                                      >19 NodePlug::add(transparency, color)
                                    >18 ShaderMgr::convertibleConnection(phong1.outColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                          >21 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 NodePlugInfo::add(phong1,outColor,color)
                                      >19 NodePlug::add(outColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong1.outTransparency)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                                    >18 NodePlugInfo::add(phong1,outTransparency,color)
                                      >19 NodePlug::add(outTransparency, color)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(phong1)
                              >15 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                              >15 ConvertShadingNetwork::getNodeVariables(phong1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                              >15 Visitor::addShaderMethodBody(phong1,,,)
                                >16 NodePlugConnectionMgr::add(phong1)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                                >16 NodePlugConnectionMgr::cookRSLFunctionCallString(0)
                                >16 NodePlugConnectionMgr::log(0)
                            >14 Visitor::outputEnd(), close shader file
                            >14 Visitor::postOutput()
                              >15 getShaderFilePath_SLO(phong1)
                                >16 getShaderFilePath_NoExt(phong1)
                              >15 getShaderFilePath_SRC(phong1)
                                >16 getShaderFilePath_NoExt(phong1)
                          >13 ConvertShadingNetwork::exportShaderEnd(phong1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong1SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong1SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                    >10 Visitor::outputShadingGroup(phong1SG)
                      >11 Visitor::outputShadingGroup(phong1SG,0)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong2SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong2SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(phong2)
                          >13 ConvertShadingNetwork::canShaderExported(phong2)
                          >13 ConvertShadingNetwork::exportShaderBegin(phong2)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(phong2)
                            >14 Visitor::initShaderData(phong2)
                              >15 NodePlugConnectionMgr::setNodePlugMgr(...)
                              >15 NodePlugConnectionMgr::reset()
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong2, nodes, numConnections)
                              >15 ConvertShadingNetwork::nodeIsConvertible(phong2)
                                >16 ShaderMgr::hasShaderType(phong)
                              >15 ShaderMgr::getValidConnection(phong2)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                            >14 Visitor::preOutput(phong2)
                            >14 Visitor::outputBegin(phong2), open shader file
                              >15 getShaderFilePath_SRC(phong2)
                                >16 getShaderFilePath_NoExt(phong2)
                              >15 Visitor::getSurfaceShaderAOVOutputParametersString()
                              >15 Visitor::defineAOVVariables(phong2)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(phong2)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(phong2,phong)
                                  >17 Visitor::visitPhong(phong2)
                                    >18 OutputHelper::addInclude(phong.h)
                                    >18 OutputHelper::beginRSL(phong2)
                                    >18 ShaderMgr::convertibleConnection(phong2.ambientColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                                    >18 NodePlugInfo::add(phong2,ambientColor,color)
                                      >19 NodePlug::add(ambientColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong2.color)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                                    >18 NodePlugInfo::add(phong2,color,color)
                                      >19 NodePlug::add(color, color)
                                    >18 ShaderMgr::convertibleConnection(phong2.cosinePower)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                                    >18 NodePlugInfo::add(phong2,cosinePower,float)
                                      >19 NodePlug::add(cosinePower, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.diffuse)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                                    >18 NodePlugInfo::add(phong2,diffuse,float)
                                      >19 NodePlug::add(diffuse, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.incandescence)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                                    >18 NodePlugInfo::add(phong2,incandescence,color)
                                      >19 NodePlug::add(incandescence, color)
                                    >18 ShaderMgr::convertibleConnection(phong2.matteOpacity)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                                    >18 NodePlugInfo::add(phong2,matteOpacity,float)
                                      >19 NodePlug::add(matteOpacity, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.matteOpacityMode)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                                    >18 NodePlugInfo::add(phong2,matteOpacityMode,float)
                                      >19 NodePlug::add(matteOpacityMode, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.specularColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                                    >18 NodePlugInfo::add(phong2,specularColor,color)
                                      >19 NodePlug::add(specularColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong2.reflectivity)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                                    >18 NodePlugInfo::add(phong2,reflectivity,float)
                                      >19 NodePlug::add(reflectivity, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.reflectedColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                                    >18 NodePlugInfo::add(phong2,reflectedColor,color)
                                      >19 NodePlug::add(reflectedColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong2.refractions)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.refractions)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.refractions)
                                    >18 NodePlugInfo::add(phong2,refractions,float)
                                      >19 NodePlug::add(refractions, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.refractiveIndex)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.refractiveIndex)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.refractiveIndex)
                                    >18 NodePlugInfo::add(phong2,refractiveIndex,float)
                                      >19 NodePlug::add(refractiveIndex, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.refractionLimit)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.refractionLimit)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.refractionLimit)
                                    >18 NodePlugInfo::add(phong2,refractionLimit,float)
                                      >19 NodePlug::add(refractionLimit, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.lightAbsorbance)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.lightAbsorbance)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.lightAbsorbance)
                                    >18 NodePlugInfo::add(phong2,lightAbsorbance,float)
                                      >19 NodePlug::add(lightAbsorbance, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.shadowAttenuation)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.shadowAttenuation)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.shadowAttenuation)
                                    >18 NodePlugInfo::add(phong2,shadowAttenuation,float)
                                      >19 NodePlug::add(shadowAttenuation, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.reflectionLimit)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                                    >18 NodePlugInfo::add(phong2,reflectionLimit,float)
                                      >19 NodePlug::add(reflectionLimit, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.translucence)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                                    >18 NodePlugInfo::add(phong2,translucence,float)
                                      >19 NodePlug::add(translucence, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.translucenceDepth)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                                    >18 NodePlugInfo::add(phong2,translucenceDepth,float)
                                      >19 NodePlug::add(translucenceDepth, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.translucenceFocus)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                                    >18 NodePlugInfo::add(phong2,translucenceFocus,float)
                                      >19 NodePlug::add(translucenceFocus, float)
                                    >18 ShaderMgr::convertibleConnection(phong2.transparency)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                                    >18 NodePlugInfo::add(phong2,transparency,color)
                                      >19 NodePlug::add(transparency, color)
                                    >18 ShaderMgr::convertibleConnection(phong2.outColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                          >21 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 NodePlugInfo::add(phong2,outColor,color)
                                      >19 NodePlug::add(outColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong2.outTransparency)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                                    >18 NodePlugInfo::add(phong2,outTransparency,color)
                                      >19 NodePlug::add(outTransparency, color)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(phong2)
                              >15 ConvertShadingNetwork::decrementDownstreamConnections(phong2, nodes, numConnections, validConnections)
                              >15 ConvertShadingNetwork::getNodeVariables(phong2, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                              >15 Visitor::addShaderMethodBody(phong2,,,)
                                >16 NodePlugConnectionMgr::add(phong2)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                                >16 NodePlugConnectionMgr::cookRSLFunctionCallString(0)
                                >16 NodePlugConnectionMgr::log(0)
                            >14 Visitor::outputEnd(), close shader file
                            >14 Visitor::postOutput()
                              >15 getShaderFilePath_SLO(phong2)
                                >16 getShaderFilePath_NoExt(phong2)
                              >15 getShaderFilePath_SRC(phong2)
                                >16 getShaderFilePath_NoExt(phong2)
                          >13 ConvertShadingNetwork::exportShaderEnd(phong2)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong2SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong2SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong2SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong2SG)
                    >10 Visitor::outputShadingGroup(phong2SG)
                      >11 Visitor::outputShadingGroup(phong2SG,0)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong2SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong3SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong3SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong3SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(phong3)
                          >13 ConvertShadingNetwork::canShaderExported(phong3)
                          >13 ConvertShadingNetwork::exportShaderBegin(phong3)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(phong3)
                            >14 Visitor::initShaderData(phong3)
                              >15 NodePlugConnectionMgr::setNodePlugMgr(...)
                              >15 NodePlugConnectionMgr::reset()
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong3, nodes, numConnections)
                              >15 ConvertShadingNetwork::nodeIsConvertible(phong3)
                                >16 ShaderMgr::hasShaderType(phong)
                              >15 ShaderMgr::getValidConnection(phong3)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.colorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.colorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.colorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.colorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.colorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.colorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.transparencyR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.transparencyG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.transparencyB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraX)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraX)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraY)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraY)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraZ)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraZ)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.specularColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.specularColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.specularColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outColorR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outColorR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outColorG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outColorG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outColorB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outColorB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyR)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyR)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyG)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyG)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyB)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyB)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                              >15 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                                >16 ShaderMgr::getValidConnection(file1)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong3)
                                    >18 ShaderMgr::hasShaderType(phong)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                >16 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                  >17 ShaderMgr::getValidConnection(place2dTexture1)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                            >14 Visitor::preOutput(phong3)
                            >14 Visitor::outputBegin(phong3), open shader file
                              >15 getShaderFilePath_SRC(phong3)
                                >16 getShaderFilePath_NoExt(phong3)
                              >15 Visitor::getSurfaceShaderAOVOutputParametersString()
                              >15 Visitor::defineAOVVariables(phong3)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(place2dTexture1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                                  >17 Visitor::visitPlace2dTexture(place2dTexture1)
                                    >18 OutputHelper::addInclude(place2dTexture.h)
                                    >18 OutputHelper::beginRSL(place2dTexture1)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.coverage)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,coverage,float2)
                                      >19 NodePlug::add(coverage, float2)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,mirrorU,float)
                                      >19 NodePlug::add(mirrorU, float)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,mirrorV,float)
                                      >19 NodePlug::add(mirrorV, float)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.noiseUV)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,noiseUV,float2)
                                      >19 NodePlug::add(noiseUV, float2)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.offset)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,offset,float2)
                                      >19 NodePlug::add(offset, float2)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.repeatUV)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,repeatUV,float2)
                                      >19 NodePlug::add(repeatUV, float2)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,rotateFrame,float)
                                      >19 NodePlug::add(rotateFrame, float)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,rotateUV,float)
                                      >19 NodePlug::add(rotateUV, float)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,stagger,float)
                                      >19 NodePlug::add(stagger, float)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.translateFrame)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,translateFrame,float2)
                                      >19 NodePlug::add(translateFrame, float2)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,wrapU,float)
                                      >19 NodePlug::add(wrapU, float)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,wrapV,float)
                                      >19 NodePlug::add(wrapV, float)
                                    >18 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                                      >19 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                        >20 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(place2dTexture1,outUV,float2)
                                      >19 NodePlug::add(outUV, float2)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(place2dTexture1)
                              >15 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                              >15 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                              >15 Visitor::addShaderMethodBody(place2dTexture1,,,place2dTexture1.coverage124place2dTexture1.mirrorU124place2dTexture1.mirrorV124place2dTexture1.noiseUV124place2dTexture1.offset124place2dTexture1.repeatUV124place2dTexture1.rotateFrame124place2dTexture1.rotateUV124place2dTexture1.stagger124place2dTexture1.translateFrame124place2dTexture1.wrapU124place2dTexture1.wrapV124place2dTexture1.outUV124)
                                >16 NodePlugConnectionMgr::add(place2dTexture1)
                              >15 Visitor::outputUpstreamShader(file1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                                  >17 Visitor::visitFile(file1)
                                    >18 OutputHelper::addInclude(file.h)
                                    >18 OutputHelper::beginRSL(file1)
                                    >18 Renderer::getTextureExt()
                                    >18 ShaderMgr::convertibleConnection(file1.alphaGain)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                                    >18 NodePlugInfo::add(file1,alphaGain,float)
                                      >19 NodePlug::add(alphaGain, float)
                                    >18 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                                    >18 NodePlugInfo::add(file1,alphaIsLuminance,float)
                                      >19 NodePlug::add(alphaIsLuminance, float)
                                    >18 ShaderMgr::convertibleConnection(file1.alphaOffset)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                                    >18 NodePlugInfo::add(file1,alphaOffset,float)
                                      >19 NodePlug::add(alphaOffset, float)
                                    >18 ShaderMgr::convertibleConnection(file1.colorGain)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                                    >18 NodePlugInfo::add(file1,colorGain,color)
                                      >19 NodePlug::add(colorGain, color)
                                    >18 ShaderMgr::convertibleConnection(file1.colorOffset)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                                    >18 NodePlugInfo::add(file1,colorOffset,color)
                                      >19 NodePlug::add(colorOffset, color)
                                    >18 ShaderMgr::convertibleConnection(file1.defaultColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                                    >18 NodePlugInfo::add(file1,defaultColor,color)
                                      >19 NodePlug::add(defaultColor, color)
                                    >18 ShaderMgr::convertibleConnection(file1.filterType)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                                    >18 NodePlugInfo::add(file1,filterType,float)
                                      >19 NodePlug::add(filterType, float)
                                    >18 ShaderMgr::convertibleConnection(file1.filter)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                                    >18 NodePlugInfo::add(file1,filter,float)
                                      >19 NodePlug::add(filter, float)
                                    >18 ShaderMgr::convertibleConnection(file1.filterOffset)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                                    >18 NodePlugInfo::add(file1,filterOffset,float)
                                      >19 NodePlug::add(filterOffset, float)
                                    >18 ShaderMgr::convertibleConnection(file1.frameExtension)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.frameExtension)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.frameExtension)
                                    >18 NodePlugInfo::add(file1,frameExtension,float)
                                      >19 NodePlug::add(frameExtension, float)
                                    >18 ShaderMgr::convertibleConnection(file1.frameOffset)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.frameOffset)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.frameOffset)
                                    >18 NodePlugInfo::add(file1,frameOffset,float)
                                      >19 NodePlug::add(frameOffset, float)
                                    >18 ShaderMgr::convertibleConnection(file1.invert)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                                    >18 NodePlugInfo::add(file1,invert,float)
                                      >19 NodePlug::add(invert, float)
                                    >18 ShaderMgr::convertibleConnection(file1.useFrameExtension)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.useFrameExtension)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.useFrameExtension)
                                    >18 NodePlugInfo::add(file1,useFrameExtension,float)
                                      >19 NodePlug::add(useFrameExtension, float)
                                    >18 ShaderMgr::convertibleConnection(file1.uvCoord)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                          >21 ShaderMgr::hasShaderType(place2dTexture)
                                    >18 NodePlugInfo::add(file1,uvCoord,float2)
                                      >19 NodePlug::add(uvCoord, float2)
                                    >18 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                                    >18 NodePlugInfo::add(file1,fileHasAlpha,float)
                                      >19 NodePlug::add(fileHasAlpha, float)
                                    >18 ShaderMgr::convertibleConnection(file1.outAlpha)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                                    >18 NodePlugInfo::add(file1,outAlpha,float)
                                      >19 NodePlug::add(outAlpha, float)
                                    >18 ShaderMgr::convertibleConnection(file1.outColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(phong3)
                                          >21 ShaderMgr::hasShaderType(phong)
                                    >18 NodePlugInfo::add(file1,outColor,color)
                                      >19 NodePlug::add(outColor, color)
                                    >18 ShaderMgr::convertibleConnection(file1.outTransparency)
                                      >19 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                        >20 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                    >18 NodePlugInfo::add(file1,outTransparency,color)
                                      >19 NodePlug::add(outTransparency, color)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(file1)
                              >15 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                              >15 ConvertShadingNetwork::getNodeVariables(file1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                >16 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                  >17 ShaderMgr::getValidConnection(place2dTexture1)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong3)
                                    >18 ShaderMgr::hasShaderType(phong)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                              >15 Visitor::addShaderMethodBody(file1,place2dTexture1.outUV124,file1.uvCoord124,file1.outColor124)
                                >16 NodePlugConnectionMgr::add(file1)
                              >15 Visitor::outputUpstreamShader(phong3)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(phong3,phong)
                                  >17 Visitor::visitPhong(phong3)
                                    >18 OutputHelper::addInclude(phong.h)
                                    >18 OutputHelper::beginRSL(phong3)
                                    >18 ShaderMgr::convertibleConnection(phong3.ambientColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                                    >18 NodePlugInfo::add(phong3,ambientColor,color)
                                      >19 NodePlug::add(ambientColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong3.color)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(file1)
                                          >21 ShaderMgr::hasShaderType(file)
                                    >18 NodePlugInfo::add(phong3,color,color)
                                      >19 NodePlug::add(color, color)
                                    >18 ShaderMgr::convertibleConnection(phong3.cosinePower)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                                    >18 NodePlugInfo::add(phong3,cosinePower,float)
                                      >19 NodePlug::add(cosinePower, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.diffuse)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                                    >18 NodePlugInfo::add(phong3,diffuse,float)
                                      >19 NodePlug::add(diffuse, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.incandescence)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                                    >18 NodePlugInfo::add(phong3,incandescence,color)
                                      >19 NodePlug::add(incandescence, color)
                                    >18 ShaderMgr::convertibleConnection(phong3.matteOpacity)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                                    >18 NodePlugInfo::add(phong3,matteOpacity,float)
                                      >19 NodePlug::add(matteOpacity, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.matteOpacityMode)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                                    >18 NodePlugInfo::add(phong3,matteOpacityMode,float)
                                      >19 NodePlug::add(matteOpacityMode, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.specularColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                                    >18 NodePlugInfo::add(phong3,specularColor,color)
                                      >19 NodePlug::add(specularColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong3.reflectivity)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                                    >18 NodePlugInfo::add(phong3,reflectivity,float)
                                      >19 NodePlug::add(reflectivity, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.reflectedColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                                    >18 NodePlugInfo::add(phong3,reflectedColor,color)
                                      >19 NodePlug::add(reflectedColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong3.refractions)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.refractions)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.refractions)
                                    >18 NodePlugInfo::add(phong3,refractions,float)
                                      >19 NodePlug::add(refractions, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.refractiveIndex)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.refractiveIndex)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.refractiveIndex)
                                    >18 NodePlugInfo::add(phong3,refractiveIndex,float)
                                      >19 NodePlug::add(refractiveIndex, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.refractionLimit)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.refractionLimit)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.refractionLimit)
                                    >18 NodePlugInfo::add(phong3,refractionLimit,float)
                                      >19 NodePlug::add(refractionLimit, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.lightAbsorbance)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.lightAbsorbance)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.lightAbsorbance)
                                    >18 NodePlugInfo::add(phong3,lightAbsorbance,float)
                                      >19 NodePlug::add(lightAbsorbance, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.shadowAttenuation)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.shadowAttenuation)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.shadowAttenuation)
                                    >18 NodePlugInfo::add(phong3,shadowAttenuation,float)
                                      >19 NodePlug::add(shadowAttenuation, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.reflectionLimit)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                                    >18 NodePlugInfo::add(phong3,reflectionLimit,float)
                                      >19 NodePlug::add(reflectionLimit, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.translucence)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                                    >18 NodePlugInfo::add(phong3,translucence,float)
                                      >19 NodePlug::add(translucence, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.translucenceDepth)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                                    >18 NodePlugInfo::add(phong3,translucenceDepth,float)
                                      >19 NodePlug::add(translucenceDepth, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.translucenceFocus)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                                    >18 NodePlugInfo::add(phong3,translucenceFocus,float)
                                      >19 NodePlug::add(translucenceFocus, float)
                                    >18 ShaderMgr::convertibleConnection(phong3.transparency)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                                    >18 NodePlugInfo::add(phong3,transparency,color)
                                      >19 NodePlug::add(transparency, color)
                                    >18 ShaderMgr::convertibleConnection(phong3.outColor)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                        >20 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                          >21 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 NodePlugInfo::add(phong3,outColor,color)
                                      >19 NodePlug::add(outColor, color)
                                    >18 ShaderMgr::convertibleConnection(phong3.outTransparency)
                                      >19 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                        >20 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                                    >18 NodePlugInfo::add(phong3,outTransparency,color)
                                      >19 NodePlug::add(outTransparency, color)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(phong3)
                              >15 ConvertShadingNetwork::decrementDownstreamConnections(phong3, nodes, numConnections, validConnections)
                              >15 ConvertShadingNetwork::getNodeVariables(phong3, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeInputVariable(phong3.color, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                  >17 ShaderMgr::getValidConnection(file1)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                              >15 Visitor::addShaderMethodBody(phong3,file1.outColor124,phong3.color124,)
                                >16 NodePlugConnectionMgr::add(phong3)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                                >16 NodePlugConnectionMgr::cookRSLFunctionCallString(0)
                                >16 NodePlugConnectionMgr::log(0)
                                >16 NodePlugConnectionMgr::cookRSLFunctionCallString(1)
                                  >17 NodePlugInfo::getPlugInfo(place2dTexture1.outUV)
                                    >18 NodePlugInfo::getPlugInfo(place2dTexture1,outUV)
                                      >19 NodePlug::getPlugInfo(outUV)
                                  >17 NodePlugInfo::getPlugInfo(file1.uvCoord)
                                    >18 NodePlugInfo::getPlugInfo(file1,uvCoord)
                                      >19 NodePlug::getPlugInfo(uvCoord)
                                >16 NodePlugConnectionMgr::log(1)
                                >16 NodePlugConnectionMgr::cookRSLFunctionCallString(2)
                                  >17 NodePlugInfo::getPlugInfo(file1.outColor)
                                    >18 NodePlugInfo::getPlugInfo(file1,outColor)
                                      >19 NodePlug::getPlugInfo(outColor)
                                  >17 NodePlugInfo::getPlugInfo(phong3.color)
                                    >18 NodePlugInfo::getPlugInfo(phong3,color)
                                      >19 NodePlug::getPlugInfo(color)
                                >16 NodePlugConnectionMgr::log(2)
                            >14 Visitor::outputEnd(), close shader file
                            >14 Visitor::postOutput()
                              >15 getShaderFilePath_SLO(phong3)
                                >16 getShaderFilePath_NoExt(phong3)
                              >15 getShaderFilePath_SRC(phong3)
                                >16 getShaderFilePath_NoExt(phong3)
                          >13 ConvertShadingNetwork::exportShaderEnd(phong3)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong3SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong3SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong3SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong3SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong3SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong3SG)
                    >10 Visitor::outputShadingGroup(phong3SG)
                      >11 Visitor::outputShadingGroup(phong3SG,0)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong3SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong3SG)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,miEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,miEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqVolumeShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqLensShader)
                  >9 ShadingNetworkUser::export_user()
                >8  ConvertShadingNetwork::afterExport()
                  >9 ShadingNetworkUser::afterExport_user()
            >6 liqRibTranslatorNew::worldPrologue__(perspShape)
              >7 Renderer::worldPrologue(perspShape)
            >6 liqRibTranslatorNew::lightBlock__(perspShape)
              >7 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                    >10 Helper::RiBeginRef()
                      >11 liqRibData::getFullPathName()
                    >10 rm_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 Helper::RiEndRef()
              >7 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibTranslatorNew::coordSysBlock__(perspShape)
              >7 Renderer::coordSysBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock__(perspShape)
              >7 liqRibTranslatorNew::objectBlock_data(perspShape)
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pCube1|pCubeShape1,perspShape)
                    >10 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube1|pCubeShape1,R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pSphere1|pSphereShape1,perspShape)
                    >10 Renderer::_writeObject(|pSphere1|pSphereShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pSphere1|pSphereShape1,R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::exportOneObject_data(|pSphere2|pSphereShape2,perspShape)
                    >10 Renderer::_writeObject(|pSphere2|pSphereShape2,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pSphere2|pSphereShape2,R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube2|pCubeShape2,perspShape)
                  >9 Renderer::exportOneObject_data(|pCube2|pCubeShape2,perspShape)
                    >10 Renderer::_writeObject(|pCube2|pCubeShape2,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube2|pCubeShape2,R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::objectBlock_reference(perspShape)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube1|pCubeShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,perspShape)
                    >10 objectNonShadowAttribute(|pCube1|pCubeShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=0,c=0,,|pCube1|pCubeShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                      >11 Renderer::F2(0,|pCube1|pCubeShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                    >10 Visitor::outputShadingGroup(phong1SG,1)
                      >11 _outputShadingGroup(phong1SG)
                        >12 getShaderFilePath_NoExt(phong1)
                  >9 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube1|pCubeShape1,R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pCube1|pCubeShape1,perspShape)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                    >10 objectNonShadowAttribute(|pPlane1|pPlaneShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                      >11 Renderer::F2(0,|pPlane1|pPlaneShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                    >10 Visitor::outputShadingGroup(phong2SG,1)
                      >11 _outputShadingGroup(phong2SG)
                        >12 getShaderFilePath_NoExt(phong2)
                  >9 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pPlane1|pPlaneShape1,perspShape)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere1|pSphereShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere1|pSphereShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pSphere1|pSphereShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere1|pSphereShape1,perspShape)
                    >10 objectNonShadowAttribute(|pSphere1|pSphereShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pSphere1|pSphereShape1,v=0,s=0,c=0,,|pSphere1|pSphereShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                      >11 Renderer::F2(0,|pSphere1|pSphereShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere1|pSphereShape1)
                    >10 Visitor::outputShadingGroup(phong3SG,1)
                      >11 _outputShadingGroup(phong3SG)
                        >12 getShaderFilePath_NoExt(phong3)
                  >9 Renderer::exportOneObject_reference(|pSphere1|pSphereShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pSphere1|pSphereShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pSphere1|pSphereShape1,R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pSphere1|pSphereShape1,perspShape)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pSphere1|pSphereShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere2|pSphereShape2,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere2|pSphereShape2)
                    >10 Renderer::exportLightLinks(perspShape,|pSphere2|pSphereShape2,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere2|pSphereShape2,perspShape)
                    >10 objectNonShadowAttribute(|pSphere2|pSphereShape2)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pSphere2|pSphereShape2,v=0,s=0,c=0,,|pSphere2|pSphereShape2,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                      >11 Renderer::F2(0,|pSphere2|pSphereShape2)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere2|pSphereShape2)
                    >10 Visitor::outputShadingGroup(phong3SG,1)
                      >11 _outputShadingGroup(phong3SG)
                        >12 getShaderFilePath_NoExt(phong3)
                  >9 Renderer::exportOneObject_reference(|pSphere2|pSphereShape2,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pSphere2|pSphereShape2,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pSphere2|pSphereShape2,R:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pSphere2|pSphereShape2,perspShape)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pSphere2|pSphereShape2,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube2|pCubeShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube2|pCubeShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube2|pCubeShape2,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube2|pCubeShape2)
                    >10 Renderer::exportLightLinks(perspShape,|pCube2|pCubeShape2,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube2|pCubeShape2,perspShape)
                    >10 objectNonShadowAttribute(|pCube2|pCubeShape2)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube2|pCubeShape2,v=0,s=0,c=0,,|pCube2|pCubeShape2,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                      >11 Renderer::F2(0,|pCube2|pCubeShape2)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube2|pCubeShape2)
                    >10 Visitor::outputShadingGroup(phong1SG,1)
                      >11 _outputShadingGroup(phong1SG)
                        >12 getShaderFilePath_NoExt(phong1)
                  >9 Renderer::exportOneObject_reference(|pCube2|pCubeShape2,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pCube2|pCubeShape2,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube2|pCubeShape2,R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pCube2|pCubeShape2,perspShape)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube2|pCubeShape2,perspShape)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(1)
              >7 Renderer::frameEpilogue(1)
            >6 liqRibTranslatorNew::ribEpilogue__(perspShape)
              >7 Renderer::ribPrologue_end(perspShape)
          >5 Renderer::HeroPassEnd(perspShape)
            >6 rm::Renderer::renderAll_local(R:/MyDocuments/maya/projects/default/rib/vertex_normal_perspShape.0001..rib)
              >7 liqProcessLauncher::_execute(renderdl,   "R:/MyDocuments/maya/projects/default/rib/vertex_normal_perspShape.0001..rib","R:/MyDocuments/maya/projects/default/", wait=0)
                >8 liqProcessLauncher::_execute(renderdl,   "R:/MyDocuments/maya/projects/default/rib/vertex_normal_perspShape.0001..rib","R:/MyDocuments/maya/projects/default/", wait=0)
        >4 liqRenderScript::addJob(job.title=vertex_normalFrame1,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
      >3 ShaderMgr::clearValidConnection()
    >2 RendererMgr::unsetFactory()
