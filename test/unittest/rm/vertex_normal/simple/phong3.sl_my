#include <liquidAOVMacroDef.h>
//surface shader name: phong3
surface phong3
(
#ifdef USE_AOV_aov_ambient
		output varying color aov_ambient = 0;
#endif
#ifdef USE_AOV_aov_diffuse
		output varying color aov_diffuse = 0;
#endif
#ifdef USE_AOV_aov_specular
		output varying color aov_specular = 0;
#endif
#ifdef USE_AOV_aov_reflection
		output varying color aov_reflection = 0;
#endif
#ifdef USE_AOV_aov_rt_reflection
		output varying color aov_rt_reflection = 0;
#endif
#ifdef USE_AOV_aov_rt_reflection_alpha
		output varying float aov_rt_reflection_alpha = 0;
#endif
#ifdef USE_AOV_aov_env_reflection
		output varying color aov_env_reflection = 0;
#endif
#ifdef USE_AOV_aov_refraction
		output varying color aov_refraction = 0;
#endif
#ifdef USE_AOV_aov_shadow
		output varying float aov_shadow = 0;
#endif
#ifdef USE_AOV_aov_incandescence
		output varying color aov_incandescence = 0;
#endif
#ifdef USE_AOV_aov_translucence
		output varying color aov_translucence = 0;
#endif
#ifdef USE_AOV_aov_ambient_no_shadow
		output varying color aov_ambient_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_diffuse_no_shadow
		output varying color aov_diffuse_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_diffuse_intensity
		output varying color aov_diffuse_intensity = 0;
#endif
#ifdef USE_AOV_aov_diffuse_intensity_no_shadow
		output varying color aov_diffuse_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_key_lights_diffuse_intensity
		output varying color aov_key_lights_diffuse_intensity = 0;
#endif
#ifdef USE_AOV_aov_key_lights_diffuse_intensity_no_shadow
		output varying color aov_key_lights_diffuse_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_luminance_depth
		output varying color aov_luminance_depth = 0;
#endif
#ifdef USE_AOV_aov_specular_no_shadow
		output varying color aov_specular_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_specular_intensity
		output varying color aov_specular_intensity = 0;
#endif
#ifdef USE_AOV_aov_specular_intensity_no_shadow
		output varying color aov_specular_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_key_lights_specular_intensity
		output varying color aov_key_lights_specular_intensity = 0;
#endif
#ifdef USE_AOV_aov_key_lights_specular_intensity_no_shadow
		output varying color aov_key_lights_specular_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_color_no_shadow
		output varying color aov_color_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_surface_color
		output varying color aov_surface_color = 0;
#endif
#ifdef USE_AOV_aov_camera_space_normal
		output varying normal aov_camera_space_normal = 0;
#endif
#ifdef USE_AOV_aov_facing_ratio
		output varying float aov_facing_ratio = 0;
#endif

)
{



// define some extern variables which are used in 3delight shaders -----------------------------
 color __transparency = color (1,1,1);
 uniform float __reflects = 0;
 uniform float __refracts = 0;



// define the shaders --------------------------------------------------------------------------
#include "place2dTexture.h"
//shader name: place2dTexture1
void place2dTexture1 (
 output float coverage[];
 output float mirrorU;
 output float mirrorV;
 output float noiseUV[];
 output float offset[];
 output float repeatUV[];
 output float rotateFrame;
 output float rotateUV;
 output float stagger;
 output float translateFrame[];
 output float wrapU;
 output float wrapV;
 output float outUV[];
)
{
 extern float s, t;
 float uvCoord[2];
 {
 //use renderman internal uv
 uvCoord[0] = s;
 uvCoord[1] = t;
 }
 uvCoord[1] = 1 - uvCoord[1];//adjust v for renderman
 coverage[0] = float 1;  coverage[1] = float 1; ;
 mirrorU = float 0;
 mirrorV = float 0;
 noiseUV[0] = float 0;  noiseUV[1] = float 0; ;
 offset[0] = float 0;  offset[1] = float 0; ;
 repeatUV[0] = float 1;  repeatUV[1] = float 1; ;
 rotateFrame = float 0;
 rotateUV = float 0;
 stagger = float 0;
 translateFrame[0] = float 0;  translateFrame[1] = float 0; ;
 wrapU = float 1;
 wrapV = float 1;
 outUV[0] = float 0;  outUV[1] = float 0; ;
   maya_place2dTexture(
	uvCoord,			
	coverage[0],		
	coverage[1],		
	mirrorU,			
	mirrorV,			
	noiseUV[0],		
	noiseUV[1],		
	offset[0],			
	offset[1],			
	repeatUV[0],		
	repeatUV[1],		
	rotateFrame,		
	rotateUV,			
	stagger,			
	translateFrame[0],	
	translateFrame[1],	
	wrapU,				
	wrapV,				
	outUV   
   );
}

#include "file.h"
//shader name: file1
void file1 (
 float uvCoord[];
 output color outColor;
)
{
  float alphaGain = float 1;
 uniform float alphaIsLuminance = float 0;
  float alphaOffset = float 0;
  color colorGain = color (1,1,1);
  color colorOffset = color (0,0,0);
  color defaultColor = color (0.5,0.5,0.5);
 uniform float filterType = float 3;
 uniform float filter = float 1;
  float filterOffset = float 0;
 uniform float frameExtension = float 1;
 uniform float frameOffset = float 0;
 uniform float invert = float 0;
 uniform float useFrameExtension = float 0;
//file1.uvCoord <-- place2dTexture1.outUV
 uniform float fileHasAlpha = float 0;
  float outAlpha = float 1;
 outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
   maya_file(alphaGain,         
	alphaIsLuminance,  
	alphaOffset,       
	colorGain,         
	colorOffset,       
	defaultColor,      
	"E:/dev/Autodesk/maya/myplugin/project/liquid_/test/texture/check12.tif.tif",   
	filterType,        
	filter,            
	filterOffset,      
	frameExtension,	
	frameOffset,		
	invert,            
	useFrameExtension,	
	uvCoord,           
	outAlpha,          
	outColor,          
	outTransparency    
  );
}

#include "phong.h"
//shader name: phong3
void phong3 (
 color i_color;
)
{
  color ambientColor = color (0,0,0);
//phong3.color <-- file1.outColor
  float cosinePower = float 20;
  float diffuse = float 0.8;
  color incandescence = color (0,0,0);
  float matteOpacity = float 1;
  float matteOpacityMode = float 2;
 normal normalCamera = N;
  color specularColor = color (0.5,0.5,0.5);
  float reflectivity = float 0.5;
  color reflectedColor = color (0,0,0);
 uniform float refractions = float 0;
  float refractiveIndex = float 1;
 uniform float refractionLimit = float 6;
  float lightAbsorbance = float 0;
  float shadowAttenuation = float 0.5;
 uniform float reflectionLimit = float 1;
  float translucence = float 0;
  float translucenceDepth = float 0.5;
  float translucenceFocus = float 0.5;
  color transparency = color (0,0,0);
 uniform float i_reflectionMaxDistance   =0;
 uniform float i_reflectionSamples       =0;
 uniform float i_reflectionBlur          =0;
 uniform float i_reflectionNoiseAmplitude=0;
 uniform float i_reflectionNoiseFrequency=0;
  color outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
   maya_phong(						
	ambientColor,				
	i_color,					
	cosinePower,				
	diffuse,					
	incandescence,				
	matteOpacity,				
	matteOpacityMode,			
	normalCamera,				
	specularColor,				
	reflectivity,				
	reflectedColor,			
	refractions,				
	refractiveIndex,			
	refractionLimit,			
	lightAbsorbance,			
	shadowAttenuation,			
	reflectionLimit,			
	translucence,				
	translucenceDepth,			
	translucenceFocus,			
	transparency,				
	i_reflectionMaxDistance,	
	i_reflectionSamples,		
	i_reflectionBlur,			
	i_reflectionNoiseAmplitude,
	i_reflectionNoiseFrequency,
	outColor,					
	outTransparency			
   );
    Ci             = Os * outColor;
    Oi             = Os * ( 1.0 - outTransparency );
}




// call the shaders ----------------------------------------------------------------------------
 float place2dTexture1_coverage[2];
 float place2dTexture1_mirrorU;
 float place2dTexture1_mirrorV;
 float place2dTexture1_noiseUV[2];
 float place2dTexture1_offset[2];
 float place2dTexture1_repeatUV[2];
 float place2dTexture1_rotateFrame;
 float place2dTexture1_rotateUV;
 float place2dTexture1_stagger;
 float place2dTexture1_translateFrame[2];
 float place2dTexture1_wrapU;
 float place2dTexture1_wrapV;
 float place2dTexture1_outUV[2];
 color file1_outColor;

place2dTexture1(place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV);
//inputSrc: 
//inputDes: 
//outputSrc: place2dTexture1.coverage, place2dTexture1.mirrorU, place2dTexture1.mirrorV, place2dTexture1.noiseUV, place2dTexture1.offset, place2dTexture1.repeatUV, place2dTexture1.rotateFrame, place2dTexture1.rotateUV, place2dTexture1.stagger, place2dTexture1.translateFrame, place2dTexture1.wrapU, place2dTexture1.wrapV, place2dTexture1.outUV, 

file1(place2dTexture1_outUV, file1_outColor);
//inputSrc: place2dTexture1.outUV, 
//inputDes: file1.uvCoord, 
//outputSrc: file1.outColor, 

phong3(file1_outColor);
//inputSrc: file1.outColor, 
//inputDes: phong3.color, 
//outputSrc: 

}
