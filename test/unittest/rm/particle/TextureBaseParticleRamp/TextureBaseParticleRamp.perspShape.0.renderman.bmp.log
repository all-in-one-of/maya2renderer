  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(renderman)
    >2 RendererMgr::install()
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/TextureBaseParticleRamp.perspShape.32.renderman.bmp)(but do nothing now)
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(TextureBaseParticleRampFrame0)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tJobScriptMgr::buildShadowJob(thisJob___, 0)
              >7 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,perspShape)
            >6 liqRibTranslator::generateFileName(5,perspShape)
              >7 liqRibTranslator::generateImageName(, job(perspShape)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(32)
          >5 liqRibTranslatorNew::scanScene__(32,0)
            >6 tJobScriptMgr::scanScene(32,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|directionalLight1|directionalLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|directionalLight1|directionalLightShape1,0)
                >8 liqRibHT::find(|directionalLight1|directionalLightShape1,|directionalLight1|directionalLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|directionalLight1|directionalLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(directionalLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(directionalLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(directionalLight1,,4)
                  >9 liqRibNode::findShadingGroup(|directionalLight1|directionalLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|directionalLight1|directionalLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|directionalLight1|directionalLightShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(directionalLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
              >7 liqRibHT::insert(|directionalLight2|directionalLightShape2,lframe,0,3,1,matrix,,-1)
                >8 liqRibHT::hash(|directionalLight2|directionalLightShape2,1)
                >8 liqRibHT::find(|directionalLight2|directionalLightShape2,|directionalLight2|directionalLightShape2,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|directionalLight2|directionalLightShape2,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(directionalLight2,,2)
                  >9 liqRibNode::parseVectorAttributes(directionalLight2,,3)
                  >9 liqRibNode::parseVectorAttributes(directionalLight2,,4)
                  >9 liqRibNode::findShadingGroup(|directionalLight2|directionalLightShape2,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|directionalLight2|directionalLightShape2,3)
                    >10 liqRibLightData::liqRibLightData(|directionalLight2|directionalLightShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(directionalLightShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
              >7 liqRibHT::insert(|directionalLight3|directionalLightShape3,lframe,0,3,2,matrix,,-1)
                >8 liqRibHT::hash(|directionalLight3|directionalLightShape3,2)
                >8 liqRibHT::find(|directionalLight3|directionalLightShape3,|directionalLight3|directionalLightShape3,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|directionalLight3|directionalLightShape3,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(directionalLight3,,2)
                  >9 liqRibNode::parseVectorAttributes(directionalLight3,,3)
                  >9 liqRibNode::parseVectorAttributes(directionalLight3,,4)
                  >9 liqRibNode::findShadingGroup(|directionalLight3|directionalLightShape3,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|directionalLight3|directionalLightShape3,3)
                    >10 liqRibLightData::liqRibLightData(|directionalLight3|directionalLightShape3)
                      >11 liqRibData::addAdditionalSurfaceParameters(directionalLightShape3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(32,0,htable__,count__,returnStatus__)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,3)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,4)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,5)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,6)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
              >7 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,7,matrix,,-1)
                >8 liqRibHT::hash(|pPlane1|pPlaneShape1,7)
                >8 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
              >7 liqRibHT::insert(|particle1|particleShape1,lframe,0,0,8,matrix,,-1)
                >8 liqRibHT::hash(|particle1|particleShape1,8)
                >8 liqRibHT::find(|particle1|particleShape1,|particle1|particleShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|particle1|particleShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(particle1,,2)
                  >9 liqRibNode::parseVectorAttributes(particle1,,3)
                  >9 liqRibNode::parseVectorAttributes(particle1,,4)
                  >9 liqRibNode::findShadingGroup(|particle1|particleShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|particle1|particleShape1,0)
                    >10 liqRibParticleData::liqRibParticleData(|particle1|particleShape1)
                      >11 liqRibParticleData::addAdditionalParticleParameters(particleShape1)
                        >12 liqRibParticleData::addAdditionalFloatParameters(particleShape1)
                        >12 liqRibParticleData::addAdditionalVectorParameters(particleShape1,rmanP,1)
                        >12 liqRibParticleData::addAdditionalVectorParameters(particleShape1,rmanV,2)
                        >12 liqRibParticleData::addAdditionalVectorParameters(particleShape1,rmanN,3)
                        >12 liqRibParticleData::addAdditionalVectorParameters(particleShape1,rmanC,4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,32,0,&count)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,32,9)
            >6 liqRibTranslatorNew::getCameraData(iter__,0)
              >7 liqRibTranslator::getCameraInfo(|persp|perspShape,)
                >8 liqRibTranslator::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                  >9 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
              >7 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
              >7 liqRibTranslator::getCameraTransform(|persp|perspShape,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 rm::Renderer::doTextures(txtList.size()=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 rm::Renderer::doShadows(shadowList_.size()=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
            >6 Renderer::_RiOption_format_compress(0,0)
          >5 Renderer::isHeroPassReady(perspShape)
          >5 Renderer::HeroPassBegin(perspShape)
          >5 tHeroRibWriterMgr::write(liqglo___,perspShape,32,0)
            >6 liqRibTranslatorNew::ribPrologue__(perspShape)
              >7 Renderer::ribPrologue_begin(perspShape)
                >8 RiBegin_liq(R:/MyDocuments/maya/projects/default/rib/TextureBaseParticleRamp_perspShape.0032..rib(strlen=85)
              >7 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/TextureBaseParticleRamp,yaoyansi,time)
              >7 Renderer::ribPrologue_options(perspShape)
                >8 Renderer::ribPrologue_writeSearthPath()
                >8 tHeroRibWriterMgr::ribPrologue_hider(0)
                >8 tHeroRibWriterMgr::ribPrologue_samples(4,4)
                >8 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
                >8 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
                >8 tHeroRibWriterMgr::ribPrologue_pass(beauty)
            >6 liqRibTranslatorNew::framePrologue__(32,perspShape)
              >7 Renderer::framePrologue(32,perspShape)
                >8 tHeroRibWriterMgr::framePrologue_display(perspShape)
                  >9 exportJobCamera(perspShape,,)
                >8 Renderer::framePrologue_camera(32,perspShape)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(lambert2SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,surfaceShader)
                    >10 ConvertShadingNetwork::canShaderExported(lambert2)
                    >10 ConvertShadingNetwork::exportShaderBegin(lambert2)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert2,surfaceShader)
                      >11 Visitor::initShaderData(lambert2,surfaceShader)
                        >12 NodePlugConnectionMgr::setNodePlugMgr(...)
                        >12 NodePlugConnectionMgr::reset()
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnection(lambert2)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(ramp1)
                            >14 ShaderMgr::hasShaderType(ramp)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                      >11 Visitor::preOutput(lambert2)
                      >11 Visitor::outputBegin(lambert2), open shader file
                        >12 getShaderFilePath_SRC(lambert2)
                          >13 getShaderFilePath_NoExt(lambert2)
                        >12 Visitor::getSurfaceShaderAOVOutputParametersString()
                        >12 Visitor::defineAOVVariables(lambert2)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                        >12 Visitor::outputUpstreamShader(lambert2)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(lambert2,lambert)
                            >14 Visitor::visitLambert(lambert2)
                              >15 OutputHelper::addInclude(lambert.h)
                              >15 OutputHelper::beginRSL(lambert2)
                              >15 ShaderMgr::convertibleConnection(lambert2.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                              >15 NodePlugInfo::add(lambert2,ambientColor,color)
                                >16 NodePlug::add(ambientColor, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(ramp1)
                                    >18 ShaderMgr::hasShaderType(ramp)
                              >15 NodePlugInfo::add(lambert2,color,color)
                                >16 NodePlug::add(color, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                              >15 NodePlugInfo::add(lambert2,diffuse,float)
                                >16 NodePlug::add(diffuse, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                              >15 NodePlugInfo::add(lambert2,incandescence,color)
                                >16 NodePlug::add(incandescence, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.matteOpacityMode)
                              >15 NodePlugInfo::add(lambert2,matteOpacityMode,float)
                                >16 NodePlug::add(matteOpacityMode, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.matteOpacity)
                              >15 NodePlugInfo::add(lambert2,matteOpacity,float)
                                >16 NodePlug::add(matteOpacity, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.refractions)
                              >15 NodePlugInfo::add(lambert2,refractions,float)
                                >16 NodePlug::add(refractions, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.refractiveIndex)
                              >15 NodePlugInfo::add(lambert2,refractiveIndex,float)
                                >16 NodePlug::add(refractiveIndex, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.refractionLimit)
                              >15 NodePlugInfo::add(lambert2,refractionLimit,float)
                                >16 NodePlug::add(refractionLimit, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.lightAbsorbance)
                              >15 NodePlugInfo::add(lambert2,lightAbsorbance,float)
                                >16 NodePlug::add(lightAbsorbance, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.shadowAttenuation)
                              >15 NodePlugInfo::add(lambert2,shadowAttenuation,float)
                                >16 NodePlug::add(shadowAttenuation, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                              >15 NodePlugInfo::add(lambert2,transparency,color)
                                >16 NodePlug::add(transparency, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.translucence)
                              >15 NodePlugInfo::add(lambert2,translucence,float)
                                >16 NodePlug::add(translucence, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceDepth)
                              >15 NodePlugInfo::add(lambert2,translucenceDepth,float)
                                >16 NodePlug::add(translucenceDepth, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceFocus)
                              >15 NodePlugInfo::add(lambert2,translucenceFocus,float)
                                >16 NodePlug::add(translucenceFocus, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                              >15 NodePlugInfo::add(lambert2,outColor,color)
                                >16 NodePlug::add(outColor, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                              >15 NodePlugInfo::add(lambert2,outTransparency,color)
                                >16 NodePlug::add(outTransparency, color)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(lambert2)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(lambert2, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(lambert2, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                            >14 ConvertShadingNetwork::nodeIsConvertible(ramp1)
                              >15 ShaderMgr::hasShaderType(ramp)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                        >12 Visitor::addShaderMethodBody(lambert2,,,)
                          >13 NodePlugConnectionMgr::add(lambert2)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                          >13 NodePlugConnectionMgr::cookRSLFunctionCallString(0)
                          >13 NodePlugConnectionMgr::log(0)
                      >11 Visitor::outputEnd(), close shader file
                      >11 Visitor::postOutput()
                        >12 getShaderFilePath_SLO(lambert2)
                          >13 getShaderFilePath_NoExt(lambert2)
                        >12 getShaderFilePath_SRC(lambert2)
                          >13 getShaderFilePath_NoExt(lambert2)
                    >10 ConvertShadingNetwork::exportShaderEnd(lambert2)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(lambert2SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(lambert2SG)
                    >10 Visitor::outputShadingGroup(lambert2SG)
                      >11 Visitor::outputShadingGroup(lambert2SG,0)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(lambert2SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(initialParticleSE)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialParticleSE,surfaceShader)
                    >10 ConvertShadingNetwork::canShaderExported(lambert1)
                    >10 ConvertShadingNetwork::exportShaderBegin(lambert1)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1,surfaceShader)
                      >11 Visitor::initShaderData(lambert1,surfaceShader)
                        >12 NodePlugConnectionMgr::setNodePlugMgr(...)
                        >12 NodePlugConnectionMgr::reset()
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnection(lambert1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 Visitor::preOutput(lambert1)
                      >11 Visitor::outputBegin(lambert1), open shader file
                        >12 getShaderFilePath_SRC(lambert1)
                          >13 getShaderFilePath_NoExt(lambert1)
                        >12 Visitor::getSurfaceShaderAOVOutputParametersString()
                        >12 Visitor::defineAOVVariables(lambert1)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                        >12 Visitor::outputUpstreamShader(lambert1)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                            >14 Visitor::visitLambert(lambert1)
                              >15 OutputHelper::addInclude(lambert.h)
                              >15 OutputHelper::beginRSL(lambert1)
                              >15 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                              >15 NodePlugInfo::add(lambert1,ambientColor,color)
                                >16 NodePlug::add(ambientColor, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                              >15 NodePlugInfo::add(lambert1,color,color)
                                >16 NodePlug::add(color, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                              >15 NodePlugInfo::add(lambert1,diffuse,float)
                                >16 NodePlug::add(diffuse, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                              >15 NodePlugInfo::add(lambert1,incandescence,color)
                                >16 NodePlug::add(incandescence, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacityMode)
                              >15 NodePlugInfo::add(lambert1,matteOpacityMode,float)
                                >16 NodePlug::add(matteOpacityMode, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacity)
                              >15 NodePlugInfo::add(lambert1,matteOpacity,float)
                                >16 NodePlug::add(matteOpacity, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.refractions)
                              >15 NodePlugInfo::add(lambert1,refractions,float)
                                >16 NodePlug::add(refractions, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.refractiveIndex)
                              >15 NodePlugInfo::add(lambert1,refractiveIndex,float)
                                >16 NodePlug::add(refractiveIndex, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.refractionLimit)
                              >15 NodePlugInfo::add(lambert1,refractionLimit,float)
                                >16 NodePlug::add(refractionLimit, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.lightAbsorbance)
                              >15 NodePlugInfo::add(lambert1,lightAbsorbance,float)
                                >16 NodePlug::add(lightAbsorbance, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.shadowAttenuation)
                              >15 NodePlugInfo::add(lambert1,shadowAttenuation,float)
                                >16 NodePlug::add(shadowAttenuation, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                              >15 NodePlugInfo::add(lambert1,transparency,color)
                                >16 NodePlug::add(transparency, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                              >15 NodePlugInfo::add(lambert1,translucence,float)
                                >16 NodePlug::add(translucence, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                              >15 NodePlugInfo::add(lambert1,translucenceDepth,float)
                                >16 NodePlug::add(translucenceDepth, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                              >15 NodePlugInfo::add(lambert1,translucenceFocus,float)
                                >16 NodePlug::add(translucenceFocus, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                              >15 NodePlugInfo::add(lambert1,outColor,color)
                                >16 NodePlug::add(outColor, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                              >15 NodePlugInfo::add(lambert1,outTransparency,color)
                                >16 NodePlug::add(outTransparency, color)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(lambert1)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(lambert1, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                        >12 Visitor::addShaderMethodBody(lambert1,,,)
                          >13 NodePlugConnectionMgr::add(lambert1)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                          >13 NodePlugConnectionMgr::cookRSLFunctionCallString(0)
                          >13 NodePlugConnectionMgr::log(0)
                      >11 Visitor::outputEnd(), close shader file
                      >11 Visitor::postOutput()
                        >12 getShaderFilePath_SLO(lambert1)
                          >13 getShaderFilePath_NoExt(lambert1)
                        >12 getShaderFilePath_SRC(lambert1)
                          >13 getShaderFilePath_NoExt(lambert1)
                    >10 ConvertShadingNetwork::exportShaderEnd(lambert1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialParticleSE,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialParticleSE,volumeShader)
                    >10 ConvertShadingNetwork::canShaderExported(particleCloud1)
                    >10 ConvertShadingNetwork::exportShaderBegin(particleCloud1)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(particleCloud1,volumeShader)
                      >11 Visitor::initShaderData(particleCloud1,volumeShader)
                        >12 NodePlugConnectionMgr::setNodePlugMgr(...)
                        >12 NodePlugConnectionMgr::reset()
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(particleCloud1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(particleCloud1)
                          >13 ShaderMgr::hasShaderType(particleCloud)
                      >11 Visitor::preOutput(particleCloud1)
                      >11 Visitor::outputBegin(particleCloud1), open shader file
                        >12 getShaderFilePath_SRC(particleCloud1)
                          >13 getShaderFilePath_NoExt(particleCloud1)
                        >12 Visitor::getSurfaceShaderAOVOutputParametersString()
                        >12 Visitor::defineAOVVariables(particleCloud1)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                      >11 Visitor::outputEnd(), close shader file
                      >11 Visitor::postOutput()
                        >12 getShaderFilePath_SLO(particleCloud1)
                          >13 getShaderFilePath_NoExt(particleCloud1)
                        >12 getShaderFilePath_SRC(particleCloud1)
                          >13 getShaderFilePath_NoExt(particleCloud1)
                    >10 ConvertShadingNetwork::exportShaderEnd(particleCloud1)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(initialParticleSE)
                  >9 ConvertShadingNetwork::outputShadingGroup(initialParticleSE)
                    >10 Visitor::outputShadingGroup(initialParticleSE)
                      >11 Visitor::outputShadingGroup(initialParticleSE,0)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(initialParticleSE)
                >8  ConvertShadingNetwork::afterExport()
            >6 liqRibTranslatorNew::worldPrologue__(perspShape)
              >7 Renderer::worldPrologue(perspShape)
            >6 liqRibTranslatorNew::lightBlock__(perspShape)
              >7 Renderer::writeLight_pre(|directionalLight1|directionalLightShape1,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|directionalLight1|directionalLightShape1,,perspShape,ref=0)
                    >10 Helper::RiBeginRef()
                      >11 liqRibData::getFullPathName()
                    >10 rm_writeLightData.cpp::_write(|directionalLight1|directionalLightShape1,perspShape,...)
                      >11 Renderer::exportDistantLight(distantlight,directionalLightShape1,...)
                    >10 Helper::RiEndRef()
              >7 Renderer::writeLight_post(|directionalLight1|directionalLightShape1,perspShape)
              >7 Renderer::writeLight_pre(|directionalLight2|directionalLightShape2,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|directionalLight2|directionalLightShape2,,perspShape,ref=0)
                    >10 Helper::RiBeginRef()
                      >11 liqRibData::getFullPathName()
                    >10 rm_writeLightData.cpp::_write(|directionalLight2|directionalLightShape2,perspShape,...)
                      >11 Renderer::exportDistantLight(distantlight,directionalLightShape2,...)
                    >10 Helper::RiEndRef()
              >7 Renderer::writeLight_post(|directionalLight2|directionalLightShape2,perspShape)
              >7 Renderer::writeLight_pre(|directionalLight3|directionalLightShape3,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|directionalLight3|directionalLightShape3,,perspShape,ref=0)
                    >10 Helper::RiBeginRef()
                      >11 liqRibData::getFullPathName()
                    >10 rm_writeLightData.cpp::_write(|directionalLight3|directionalLightShape3,perspShape,...)
                      >11 Renderer::exportDistantLight(distantlight,directionalLightShape3,...)
                    >10 Helper::RiEndRef()
              >7 Renderer::writeLight_post(|directionalLight3|directionalLightShape3,perspShape)
            >6 liqRibTranslatorNew::coordSysBlock__(perspShape)
              >7 Renderer::coordSysBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock__(perspShape)
              >7 liqRibTranslatorNew::objectBlock_data(perspShape)
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.32.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.32.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.32.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|particle1|particleShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|particle1|particleShape1,perspShape)
                    >10 Renderer::_writeObject(|particle1|particleShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_particle1_particleShape1.32.rib,perspShape,0)
                        >12 liqRibParticleData::write(R:/MyDocuments/maya/projects/default/rib/_particle1_particleShape1.32.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|particle1|particleShape1,R:/MyDocuments/maya/projects/default/rib/_particle1_particleShape1.32.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::objectBlock_reference(perspShape)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=3)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                    >10 objectNonShadowAttribute(|pPlane1|pPlaneShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                      >11 Renderer::F2(0,|pPlane1|pPlaneShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                    >10 Visitor::outputShadingGroup(lambert2SG,1)
                      >11 _outputShadingGroup(lambert2SG)
                        >12 getShaderFilePath_NoExt(lambert2)
                  >9 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.32.rib,perspShape,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.32.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.32.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pPlane1|pPlaneShape1,perspShape)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|particle1|particleShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|particle1|particleShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|particle1|particleShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|particle1|particleShape1)
                    >10 Renderer::exportLightLinks(perspShape,|particle1|particleShape1,lightedByWhichLightShapes.size=3)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|particle1|particleShape1,|particle1|particleShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|particle1|particleShape1,|particle1|particleShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|particle1|particleShape1,|particle1|particleShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|particle1|particleShape1,perspShape)
                    >10 objectNonShadowAttribute(|particle1|particleShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|particle1|particleShape1,v=0,s=0,c=0,,|particle1|particleShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|particle1|particleShape1,|particle1|particleShape1,0)
                      >11 Renderer::F2(0,|particle1|particleShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|particle1|particleShape1)
                    >10 Visitor::outputShadingGroup(initialParticleSE,1)
                      >11 _outputShadingGroup(initialParticleSE)
                        >12 getShaderFilePath_NoExt(lambert1)
                        >12 getShaderFilePath_NoExt(particleCloud1)
                  >9 Renderer::exportOneObject_reference(|particle1|particleShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|particle1|particleShape1,|particle1|particleShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|particle1|particleShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_particle1_particleShape1.32.rib,perspShape,1)
                        >12 liqRibParticleData::write(R:/MyDocuments/maya/projects/default/rib/_particle1_particleShape1.32.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|particle1|particleShape1,R:/MyDocuments/maya/projects/default/rib/_particle1_particleShape1.32.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeParticleData.cpp::write(|particle1|particleShape1,perspShape,...)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|particle1|particleShape1,perspShape)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(32)
              >7 Renderer::frameEpilogue(32)
            >6 liqRibTranslatorNew::ribEpilogue__(perspShape)
              >7 Renderer::ribPrologue_end(perspShape)
          >5 Renderer::HeroPassEnd(perspShape)
            >6 rm::Renderer::renderAll_local(R:/MyDocuments/maya/projects/default/rib/TextureBaseParticleRamp_perspShape.0032..rib)
              >7 liqProcessLauncher::_execute(renderdl,   "R:/MyDocuments/maya/projects/default/rib/TextureBaseParticleRamp_perspShape.0032..rib","R:/MyDocuments/maya/projects/default/", wait=0)
                >8 liqProcessLauncher::_execute(renderdl,   "R:/MyDocuments/maya/projects/default/rib/TextureBaseParticleRamp_perspShape.0032..rib","R:/MyDocuments/maya/projects/default/", wait=0)
        >4 liqRenderScript::addJob(job.title=TextureBaseParticleRampFrame0,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
    >2 RendererMgr::unsetFactory()
