  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(renderman)
    >2 RendererMgr::install()
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/particleColorChangeOnCollisionMethod1.perspShape.2.renderman.bmp)(but do nothing now)
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(particleColorChangeOnCollisionMethod1Frame0)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tJobScriptMgr::buildShadowJob(thisJob___, 0)
              >7 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,perspShape)
            >6 liqRibTranslator::generateFileName(5,perspShape)
              >7 liqRibTranslator::generateImageName(, job(perspShape)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(2)
          >5 liqRibTranslatorNew::scanScene__(2,0)
            >6 tJobScriptMgr::scanScene(2,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|pointLight1|pointLightShape1,0)
                >8 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
              >7 liqRibHT::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
                >8 liqRibHT::hash(|pointLight2|pointLightShape2,1)
                >8 liqRibHT::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight2,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight2,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight2,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(2,0,htable__,count__,returnStatus__)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,2,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,2)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,3)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,4)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,5)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|pPlane1|pPlaneShape1,6)
                >8 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|nParticle1|nParticleShape1,lframe,0,0,7,matrix,,-1)
                >8 liqRibHT::hash(|nParticle1|nParticleShape1,7)
                >8 liqRibHT::find(|nParticle1|nParticleShape1,|nParticle1|nParticleShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|nParticle1|nParticleShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(nParticle1,,2)
                  >9 liqRibNode::parseVectorAttributes(nParticle1,,3)
                  >9 liqRibNode::parseVectorAttributes(nParticle1,,4)
                  >9 liqRibNode::findShadingGroup(|nParticle1|nParticleShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|nParticle1|nParticleShape1,0)
                    >10 liqRibParticleData::liqRibParticleData(|nParticle1|nParticleShape1)
                      >11 liqRibParticleData::addAdditionalParticleParameters(nParticleShape1)
                        >12 liqRibParticleData::addAdditionalFloatParameters(nParticleShape1)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nParticleShape1,rmanP,1)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nParticleShape1,rmanV,2)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nParticleShape1,rmanN,3)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nParticleShape1,rmanC,4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|pSphere1|pSphereShape1,lframe,0,0,8,matrix,,-1)
                >8 liqRibHT::hash(|pSphere1|pSphereShape1,8)
                >8 liqRibHT::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pSphere1|pSphereShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pSphere1,,2)
                  >9 liqRibNode::parseVectorAttributes(pSphere1,,3)
                  >9 liqRibNode::parseVectorAttributes(pSphere1,,4)
                  >9 liqRibNode::findShadingGroup(|pSphere1|pSphereShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pSphere1|pSphereShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pSphere1|pSphereShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pSphereShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|nRigid1|nRigidShape1,lframe,0,0,9,matrix,,-1)
                >8 liqRibHT::hash(|nRigid1|nRigidShape1,9)
                >8 liqRibHT::find(|nRigid1|nRigidShape1,|nRigid1|nRigidShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|nRigid1|nRigidShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(nRigid1,,2)
                  >9 liqRibNode::parseVectorAttributes(nRigid1,,3)
                  >9 liqRibNode::parseVectorAttributes(nRigid1,,4)
                  >9 liqRibNode::findShadingGroup(|nRigid1|nRigidShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|nRigid1|nRigidShape1,0)
                    >10 liqRibParticleData::liqRibParticleData(|nRigid1|nRigidShape1)
                      >11 liqRibParticleData::addAdditionalParticleParameters(nRigidShape1)
                        >12 liqRibParticleData::addAdditionalFloatParameters(nRigidShape1)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nRigidShape1,rmanP,1)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nRigidShape1,rmanV,2)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nRigidShape1,rmanN,3)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nRigidShape1,rmanC,4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|pTorus1|pTorusShape1,lframe,0,0,10,matrix,,-1)
                >8 liqRibHT::hash(|pTorus1|pTorusShape1,10)
                >8 liqRibHT::find(|pTorus1|pTorusShape1,|pTorus1|pTorusShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pTorus1|pTorusShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pTorus1,,2)
                  >9 liqRibNode::parseVectorAttributes(pTorus1,,3)
                  >9 liqRibNode::parseVectorAttributes(pTorus1,,4)
                  >9 liqRibNode::findShadingGroup(|pTorus1|pTorusShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pTorus1|pTorusShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pTorus1|pTorusShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pTorusShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
              >7 liqRibHT::insert(|nRigid2|nRigidShape2,lframe,0,0,11,matrix,,-1)
                >8 liqRibHT::hash(|nRigid2|nRigidShape2,11)
                >8 liqRibHT::find(|nRigid2|nRigidShape2,|nRigid2|nRigidShape2,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|nRigid2|nRigidShape2,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(nRigid2,,2)
                  >9 liqRibNode::parseVectorAttributes(nRigid2,,3)
                  >9 liqRibNode::parseVectorAttributes(nRigid2,,4)
                  >9 liqRibNode::findShadingGroup(|nRigid2|nRigidShape2,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|nRigid2|nRigidShape2,0)
                    >10 liqRibParticleData::liqRibParticleData(|nRigid2|nRigidShape2)
                      >11 liqRibParticleData::addAdditionalParticleParameters(nRigidShape2)
                        >12 liqRibParticleData::addAdditionalFloatParameters(nRigidShape2)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nRigidShape2,rmanP,1)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nRigidShape2,rmanV,2)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nRigidShape2,rmanN,3)
                        >12 liqRibParticleData::addAdditionalVectorParameters(nRigidShape2,rmanC,4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,2,0,&count)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,2,12)
            >6 liqRibTranslatorNew::getCameraData(iter__,0)
              >7 liqRibTranslator::getCameraInfo(|persp|perspShape,)
                >8 liqRibTranslator::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                  >9 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
              >7 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
              >7 liqRibTranslator::getCameraTransform(|persp|perspShape,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 rm::Renderer::doTextures(txtList.size()=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 rm::Renderer::doShadows(shadowList_.size()=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
            >6 Renderer::_RiOption_format_compress(0,0)
          >5 Renderer::isHeroPassReady(perspShape)
          >5 Renderer::HeroPassBegin(perspShape)
          >5 tHeroRibWriterMgr::write(liqglo___,perspShape,2,0)
            >6 liqRibTranslatorNew::ribPrologue__(perspShape)
              >7 Renderer::ribPrologue_begin(perspShape)
                >8 RiBegin_liq(R:/MyDocuments/maya/projects/default/rib/particleColorChangeOnCollisionMethod1_perspShape.0002..rib(strlen=99)
              >7 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/particleColorChangeOnCollisionMethod1,yaoyansi,time)
              >7 Renderer::ribPrologue_options(perspShape)
                >8 Renderer::ribPrologue_writeSearthPath()
                >8 tHeroRibWriterMgr::ribPrologue_hider(0)
                >8 tHeroRibWriterMgr::ribPrologue_samples(4,4)
                >8 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
                >8 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
                >8 tHeroRibWriterMgr::ribPrologue_pass(beauty)
            >6 liqRibTranslatorNew::framePrologue__(2,perspShape)
              >7 Renderer::framePrologue(2,perspShape)
                >8 tHeroRibWriterMgr::framePrologue_display(perspShape)
                  >9 exportJobCamera(perspShape,,)
                >8 Renderer::framePrologue_camera(2,perspShape)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(nParticleCloudSE)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(nParticleCloudSE,surfaceShader)
                    >10 ConvertShadingNetwork::canShaderExported(npCloudBlinn)
                    >10 ConvertShadingNetwork::exportShaderBegin(npCloudBlinn)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(npCloudBlinn,surfaceShader)
                      >11 Visitor::initShaderData(npCloudBlinn,surfaceShader)
                        >12 NodePlugConnectionMgr::setNodePlugMgr(...)
                        >12 NodePlugConnectionMgr::reset()
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(npCloudBlinn, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(npCloudBlinn)
                          >13 ShaderMgr::hasShaderType(blinn)
                        >12 ShaderMgr::getValidConnection(npCloudBlinn)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(particleSamplerInfo1)
                            >14 ShaderMgr::hasShaderType(particleSamplerInfo)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.incandescence)
                          >13 ConvertShadingNetwork::nodeIsConvertible(particleSamplerInfo1)
                            >14 ShaderMgr::hasShaderType(particleSamplerInfo)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.refractions)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.refractions)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.refractiveIndex)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.refractiveIndex)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.refractionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.refractionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.lightAbsorbance)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.lightAbsorbance)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.shadowAttenuation)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.shadowAttenuation)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(particleSamplerInfo1)
                            >14 ShaderMgr::hasShaderType(particleSamplerInfo)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(nParticleCloudSE)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outTransparency)
                      >11 Visitor::preOutput(npCloudBlinn)
                      >11 Visitor::outputBegin(npCloudBlinn), open shader file
                        >12 getShaderFilePath_SRC(npCloudBlinn)
                          >13 getShaderFilePath_NoExt(npCloudBlinn)
                        >12 Visitor::getSurfaceShaderAOVOutputParametersString()
                        >12 Visitor::defineAOVVariables(npCloudBlinn)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                        >12 Visitor::outputUpstreamShader(npCloudBlinn)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(npCloudBlinn,blinn)
                            >14 Visitor::visitBlinn(npCloudBlinn)
                              >15 OutputHelper::addInclude(blinn.h)
                              >15 OutputHelper::beginRSL(npCloudBlinn)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.ambientColor)
                              >15 NodePlugInfo::add(npCloudBlinn,ambientColor,color)
                                >16 NodePlug::add(ambientColor, color)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.color)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(particleSamplerInfo1)
                                    >18 ShaderMgr::hasShaderType(particleSamplerInfo)
                              >15 NodePlugInfo::add(npCloudBlinn,color,color)
                                >16 NodePlug::add(color, color)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.diffuse)
                              >15 NodePlugInfo::add(npCloudBlinn,diffuse,float)
                                >16 NodePlug::add(diffuse, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.eccentricity)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.eccentricity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.eccentricity)
                              >15 NodePlugInfo::add(npCloudBlinn,eccentricity,float)
                                >16 NodePlug::add(eccentricity, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.incandescence)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(particleSamplerInfo1)
                                    >18 ShaderMgr::hasShaderType(particleSamplerInfo)
                              >15 NodePlugInfo::add(npCloudBlinn,incandescence,color)
                                >16 NodePlug::add(incandescence, color)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.matteOpacityMode)
                              >15 NodePlugInfo::add(npCloudBlinn,matteOpacityMode,float)
                                >16 NodePlug::add(matteOpacityMode, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.matteOpacity)
                              >15 NodePlugInfo::add(npCloudBlinn,matteOpacity,float)
                                >16 NodePlug::add(matteOpacity, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularColor)
                              >15 NodePlugInfo::add(npCloudBlinn,specularColor,color)
                                >16 NodePlug::add(specularColor, color)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.specularRollOff)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularRollOff)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularRollOff)
                              >15 NodePlugInfo::add(npCloudBlinn,specularRollOff,float)
                                >16 NodePlug::add(specularRollOff, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectivity)
                              >15 NodePlugInfo::add(npCloudBlinn,reflectivity,float)
                                >16 NodePlug::add(reflectivity, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectedColor)
                              >15 NodePlugInfo::add(npCloudBlinn,reflectedColor,color)
                                >16 NodePlug::add(reflectedColor, color)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.refractions)
                              >15 NodePlugInfo::add(npCloudBlinn,refractions,float)
                                >16 NodePlug::add(refractions, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.refractiveIndex)
                              >15 NodePlugInfo::add(npCloudBlinn,refractiveIndex,float)
                                >16 NodePlug::add(refractiveIndex, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.refractionLimit)
                              >15 NodePlugInfo::add(npCloudBlinn,refractionLimit,float)
                                >16 NodePlug::add(refractionLimit, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.lightAbsorbance)
                              >15 NodePlugInfo::add(npCloudBlinn,lightAbsorbance,float)
                                >16 NodePlug::add(lightAbsorbance, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.shadowAttenuation)
                              >15 NodePlugInfo::add(npCloudBlinn,shadowAttenuation,float)
                                >16 NodePlug::add(shadowAttenuation, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectionLimit)
                              >15 NodePlugInfo::add(npCloudBlinn,reflectionLimit,float)
                                >16 NodePlug::add(reflectionLimit, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.translucence)
                              >15 NodePlugInfo::add(npCloudBlinn,translucence,float)
                                >16 NodePlug::add(translucence, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.translucenceDepth)
                              >15 NodePlugInfo::add(npCloudBlinn,translucenceDepth,float)
                                >16 NodePlug::add(translucenceDepth, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.translucenceFocus)
                              >15 NodePlugInfo::add(npCloudBlinn,translucenceFocus,float)
                                >16 NodePlug::add(translucenceFocus, float)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.transparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(particleSamplerInfo1)
                                    >18 ShaderMgr::hasShaderType(particleSamplerInfo)
                              >15 NodePlugInfo::add(npCloudBlinn,transparency,color)
                                >16 NodePlug::add(transparency, color)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(nParticleCloudSE)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                              >15 NodePlugInfo::add(npCloudBlinn,outColor,color)
                                >16 NodePlug::add(outColor, color)
                              >15 ShaderMgr::convertibleConnection(npCloudBlinn.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outTransparency)
                              >15 NodePlugInfo::add(npCloudBlinn,outTransparency,color)
                                >16 NodePlug::add(outTransparency, color)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(npCloudBlinn)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(npCloudBlinn, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(npCloudBlinn, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.color)
                            >14 ConvertShadingNetwork::nodeIsConvertible(particleSamplerInfo1)
                              >15 ShaderMgr::hasShaderType(particleSamplerInfo)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.eccentricity)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.eccentricity)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.incandescence)
                            >14 ConvertShadingNetwork::nodeIsConvertible(particleSamplerInfo1)
                              >15 ShaderMgr::hasShaderType(particleSamplerInfo)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.matteOpacityMode)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.matteOpacityMode)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.matteOpacity)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.matteOpacity)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularColor)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.specularRollOff)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.specularRollOff)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectivity)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectivity)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectedColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectedColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectedColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectedColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectedColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectedColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectedColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectedColor)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.refractions)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.refractions)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.refractiveIndex)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.refractiveIndex)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.refractionLimit)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.refractionLimit)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.lightAbsorbance)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.lightAbsorbance)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.shadowAttenuation)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.shadowAttenuation)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.reflectionLimit)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.reflectionLimit)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.transparency)
                            >14 ConvertShadingNetwork::nodeIsConvertible(particleSamplerInfo1)
                              >15 ShaderMgr::hasShaderType(particleSamplerInfo)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(nParticleCloudSE)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(npCloudBlinn.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(npCloudBlinn.outTransparency)
                        >12 Visitor::addShaderMethodBody(npCloudBlinn,,,)
                          >13 NodePlugConnectionMgr::add(npCloudBlinn)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                          >13 NodePlugConnectionMgr::cookRSLFunctionCallString(0)
                          >13 NodePlugConnectionMgr::log(0)
                      >11 Visitor::outputEnd(), close shader file
                      >11 Visitor::postOutput()
                        >12 getShaderFilePath_SLO(npCloudBlinn)
                          >13 getShaderFilePath_NoExt(npCloudBlinn)
                        >12 getShaderFilePath_SRC(npCloudBlinn)
                          >13 getShaderFilePath_NoExt(npCloudBlinn)
                    >10 ConvertShadingNetwork::exportShaderEnd(npCloudBlinn)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(nParticleCloudSE,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(nParticleCloudSE,volumeShader)
                    >10 ConvertShadingNetwork::canShaderExported(npCloudVolume)
                    >10 ConvertShadingNetwork::exportShaderBegin(npCloudVolume)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(npCloudVolume,volumeShader)
                      >11 Visitor::initShaderData(npCloudVolume,volumeShader)
                        >12 NodePlugConnectionMgr::setNodePlugMgr(...)
                        >12 NodePlugConnectionMgr::reset()
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(npCloudVolume, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(npCloudVolume)
                          >13 ShaderMgr::hasShaderType(particleCloud)
                      >11 Visitor::preOutput(npCloudVolume)
                      >11 Visitor::outputBegin(npCloudVolume), open shader file
                        >12 getShaderFilePath_SRC(npCloudVolume)
                          >13 getShaderFilePath_NoExt(npCloudVolume)
                        >12 Visitor::getSurfaceShaderAOVOutputParametersString()
                        >12 Visitor::defineAOVVariables(npCloudVolume)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                      >11 Visitor::outputEnd(), close shader file
                      >11 Visitor::postOutput()
                        >12 getShaderFilePath_SLO(npCloudVolume)
                          >13 getShaderFilePath_NoExt(npCloudVolume)
                        >12 getShaderFilePath_SRC(npCloudVolume)
                          >13 getShaderFilePath_NoExt(npCloudVolume)
                    >10 ConvertShadingNetwork::exportShaderEnd(npCloudVolume)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(nParticleCloudSE)
                  >9 ConvertShadingNetwork::outputShadingGroup(nParticleCloudSE)
                    >10 Visitor::outputShadingGroup(nParticleCloudSE)
                      >11 Visitor::outputShadingGroup(nParticleCloudSE,0)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(nParticleCloudSE)
                  >9 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,surfaceShader)
                    >10 ConvertShadingNetwork::canShaderExported(lambert1)
                    >10 ConvertShadingNetwork::exportShaderBegin(lambert1)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1,surfaceShader)
                      >11 Visitor::initShaderData(lambert1,surfaceShader)
                        >12 NodePlugConnectionMgr::setNodePlugMgr(...)
                        >12 NodePlugConnectionMgr::reset()
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnection(lambert1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 Visitor::preOutput(lambert1)
                      >11 Visitor::outputBegin(lambert1), open shader file
                        >12 getShaderFilePath_SRC(lambert1)
                          >13 getShaderFilePath_NoExt(lambert1)
                        >12 Visitor::getSurfaceShaderAOVOutputParametersString()
                        >12 Visitor::defineAOVVariables(lambert1)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                        >12 Visitor::outputUpstreamShader(lambert1)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                            >14 Visitor::visitLambert(lambert1)
                              >15 OutputHelper::addInclude(lambert.h)
                              >15 OutputHelper::beginRSL(lambert1)
                              >15 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                              >15 NodePlugInfo::add(lambert1,ambientColor,color)
                                >16 NodePlug::add(ambientColor, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                              >15 NodePlugInfo::add(lambert1,color,color)
                                >16 NodePlug::add(color, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                              >15 NodePlugInfo::add(lambert1,diffuse,float)
                                >16 NodePlug::add(diffuse, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                              >15 NodePlugInfo::add(lambert1,incandescence,color)
                                >16 NodePlug::add(incandescence, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacityMode)
                              >15 NodePlugInfo::add(lambert1,matteOpacityMode,float)
                                >16 NodePlug::add(matteOpacityMode, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacity)
                              >15 NodePlugInfo::add(lambert1,matteOpacity,float)
                                >16 NodePlug::add(matteOpacity, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.refractions)
                              >15 NodePlugInfo::add(lambert1,refractions,float)
                                >16 NodePlug::add(refractions, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.refractiveIndex)
                              >15 NodePlugInfo::add(lambert1,refractiveIndex,float)
                                >16 NodePlug::add(refractiveIndex, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.refractionLimit)
                              >15 NodePlugInfo::add(lambert1,refractionLimit,float)
                                >16 NodePlug::add(refractionLimit, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.lightAbsorbance)
                              >15 NodePlugInfo::add(lambert1,lightAbsorbance,float)
                                >16 NodePlug::add(lightAbsorbance, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.shadowAttenuation)
                              >15 NodePlugInfo::add(lambert1,shadowAttenuation,float)
                                >16 NodePlug::add(shadowAttenuation, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                              >15 NodePlugInfo::add(lambert1,transparency,color)
                                >16 NodePlug::add(transparency, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                              >15 NodePlugInfo::add(lambert1,translucence,float)
                                >16 NodePlug::add(translucence, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                              >15 NodePlugInfo::add(lambert1,translucenceDepth,float)
                                >16 NodePlug::add(translucenceDepth, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                              >15 NodePlugInfo::add(lambert1,translucenceFocus,float)
                                >16 NodePlug::add(translucenceFocus, float)
                              >15 ShaderMgr::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                              >15 NodePlugInfo::add(lambert1,outColor,color)
                                >16 NodePlug::add(outColor, color)
                              >15 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                              >15 NodePlugInfo::add(lambert1,outTransparency,color)
                                >16 NodePlug::add(outTransparency, color)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(lambert1)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(lambert1, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                        >12 Visitor::addShaderMethodBody(lambert1,,,)
                          >13 NodePlugConnectionMgr::add(lambert1)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                          >13 NodePlugConnectionMgr::cookRSLFunctionCallString(0)
                          >13 NodePlugConnectionMgr::log(0)
                      >11 Visitor::outputEnd(), close shader file
                      >11 Visitor::postOutput()
                        >12 getShaderFilePath_SLO(lambert1)
                          >13 getShaderFilePath_NoExt(lambert1)
                        >12 getShaderFilePath_SRC(lambert1)
                          >13 getShaderFilePath_NoExt(lambert1)
                    >10 ConvertShadingNetwork::exportShaderEnd(lambert1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,volumeShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                  >9 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                    >10 Visitor::outputShadingGroup(initialShadingGroup)
                      >11 Visitor::outputShadingGroup(initialShadingGroup,0)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
                  >9 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                  >9 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8  ConvertShadingNetwork::afterExport()
            >6 liqRibTranslatorNew::worldPrologue__(perspShape)
              >7 Renderer::worldPrologue(perspShape)
            >6 liqRibTranslatorNew::lightBlock__(perspShape)
              >7 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                    >10 Helper::RiBeginRef()
                      >11 liqRibData::getFullPathName()
                    >10 rm_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 Helper::RiEndRef()
              >7 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
              >7 Renderer::writeLight_pre(|pointLight2|pointLightShape2,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight2|pointLightShape2,,perspShape,ref=0)
                    >10 Helper::RiBeginRef()
                      >11 liqRibData::getFullPathName()
                    >10 rm_writeLightData.cpp::_write(|pointLight2|pointLightShape2,perspShape,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                    >10 Helper::RiEndRef()
              >7 Renderer::writeLight_post(|pointLight2|pointLightShape2,perspShape)
            >6 liqRibTranslatorNew::coordSysBlock__(perspShape)
              >7 Renderer::coordSysBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock__(perspShape)
              >7 liqRibTranslatorNew::objectBlock_data(perspShape)
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.2.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.2.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.2.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|nParticle1|nParticleShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|nParticle1|nParticleShape1,perspShape)
                    >10 Renderer::_writeObject(|nParticle1|nParticleShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_nParticle1_nParticleShape1.2.rib,perspShape,0)
                        >12 liqRibParticleData::write(R:/MyDocuments/maya/projects/default/rib/_nParticle1_nParticleShape1.2.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|nParticle1|nParticleShape1,R:/MyDocuments/maya/projects/default/rib/_nParticle1_nParticleShape1.2.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pSphere1|pSphereShape1,perspShape)
                    >10 Renderer::_writeObject(|pSphere1|pSphereShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.2.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.2.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pSphere1|pSphereShape1,R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.2.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|nRigid1|nRigidShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|nRigid1|nRigidShape1,perspShape)
                    >10 Renderer::_writeObject(|nRigid1|nRigidShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_nRigid1_nRigidShape1.2.rib,perspShape,0)
                        >12 liqRibParticleData::write(R:/MyDocuments/maya/projects/default/rib/_nRigid1_nRigidShape1.2.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|nRigid1|nRigidShape1,R:/MyDocuments/maya/projects/default/rib/_nRigid1_nRigidShape1.2.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pTorus1|pTorusShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pTorus1|pTorusShape1,perspShape)
                    >10 Renderer::_writeObject(|pTorus1|pTorusShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pTorus1_pTorusShape1.2.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pTorus1_pTorusShape1.2.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pTorus1|pTorusShape1,R:/MyDocuments/maya/projects/default/rib/_pTorus1_pTorusShape1.2.rib,perspShape,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|nRigid2|nRigidShape2,perspShape)
                  >9 Renderer::exportOneObject_data(|nRigid2|nRigidShape2,perspShape)
                    >10 Renderer::_writeObject(|nRigid2|nRigidShape2,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_nRigid2_nRigidShape2.2.rib,perspShape,0)
                        >12 liqRibParticleData::write(R:/MyDocuments/maya/projects/default/rib/_nRigid2_nRigidShape2.2.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|nRigid2|nRigidShape2,R:/MyDocuments/maya/projects/default/rib/_nRigid2_nRigidShape2.2.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::objectBlock_reference(perspShape)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                    >10 objectNonShadowAttribute(|pPlane1|pPlaneShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                      >11 Renderer::F2(0,|pPlane1|pPlaneShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                    >10 Visitor::outputShadingGroup(initialShadingGroup,1)
                      >11 _outputShadingGroup(initialShadingGroup)
                        >12 getShaderFilePath_NoExt(lambert1)
                  >9 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.2.rib,perspShape,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.2.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.2.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pPlane1|pPlaneShape1,perspShape)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|nParticle1|nParticleShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|nParticle1|nParticleShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|nParticle1|nParticleShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|nParticle1|nParticleShape1)
                    >10 Renderer::exportLightLinks(perspShape,|nParticle1|nParticleShape1,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|nParticle1|nParticleShape1,|nParticle1|nParticleShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|nParticle1|nParticleShape1,|nParticle1|nParticleShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|nParticle1|nParticleShape1,|nParticle1|nParticleShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|nParticle1|nParticleShape1,perspShape)
                    >10 objectNonShadowAttribute(|nParticle1|nParticleShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|nParticle1|nParticleShape1,v=0,s=0,c=0,,|nParticle1|nParticleShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|nParticle1|nParticleShape1,|nParticle1|nParticleShape1,0)
                      >11 Renderer::F2(0,|nParticle1|nParticleShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|nParticle1|nParticleShape1)
                    >10 Visitor::outputShadingGroup(nParticleCloudSE,1)
                      >11 _outputShadingGroup(nParticleCloudSE)
                        >12 getShaderFilePath_NoExt(npCloudBlinn)
                        >12 getShaderFilePath_NoExt(npCloudVolume)
                  >9 Renderer::exportOneObject_reference(|nParticle1|nParticleShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|nParticle1|nParticleShape1,|nParticle1|nParticleShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|nParticle1|nParticleShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_nParticle1_nParticleShape1.2.rib,perspShape,1)
                        >12 liqRibParticleData::write(R:/MyDocuments/maya/projects/default/rib/_nParticle1_nParticleShape1.2.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|nParticle1|nParticleShape1,R:/MyDocuments/maya/projects/default/rib/_nParticle1_nParticleShape1.2.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeParticleData.cpp::write(|nParticle1|nParticleShape1,perspShape,...)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|nParticle1|nParticleShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere1|pSphereShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere1|pSphereShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pSphere1|pSphereShape1,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere1|pSphereShape1,perspShape)
                    >10 objectNonShadowAttribute(|pSphere1|pSphereShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pSphere1|pSphereShape1,v=0,s=0,c=0,,|pSphere1|pSphereShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                      >11 Renderer::F2(0,|pSphere1|pSphereShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere1|pSphereShape1)
                    >10 Visitor::outputShadingGroup(initialShadingGroup,1)
                      >11 _outputShadingGroup(initialShadingGroup)
                        >12 getShaderFilePath_NoExt(lambert1)
                  >9 Renderer::exportOneObject_reference(|pSphere1|pSphereShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pSphere1|pSphereShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.2.rib,perspShape,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.2.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pSphere1|pSphereShape1,R:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.2.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pSphere1|pSphereShape1,perspShape)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pSphere1|pSphereShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|nRigid1|nRigidShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|nRigid1|nRigidShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|nRigid1|nRigidShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|nRigid1|nRigidShape1)
                    >10 Renderer::exportLightLinks(perspShape,|nRigid1|nRigidShape1,lightedByWhichLightShapes.size=0)
                      >11 Renderer::logFrame(|nRigid1|nRigidShape1 is not lighted.)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|nRigid1|nRigidShape1,|nRigid1|nRigidShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|nRigid1|nRigidShape1,|nRigid1|nRigidShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|nRigid1|nRigidShape1,|nRigid1|nRigidShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|nRigid1|nRigidShape1,perspShape)
                    >10 objectNonShadowAttribute(|nRigid1|nRigidShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|nRigid1|nRigidShape1,v=0,s=0,c=0,,|nRigid1|nRigidShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|nRigid1|nRigidShape1,|nRigid1|nRigidShape1,0)
                      >11 Renderer::F2(0,|nRigid1|nRigidShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|nRigid1|nRigidShape1)
                  >9 Renderer::exportOneObject_reference(|nRigid1|nRigidShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|nRigid1|nRigidShape1,|nRigid1|nRigidShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|nRigid1|nRigidShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_nRigid1_nRigidShape1.2.rib,perspShape,1)
                        >12 liqRibParticleData::write(R:/MyDocuments/maya/projects/default/rib/_nRigid1_nRigidShape1.2.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|nRigid1|nRigidShape1,R:/MyDocuments/maya/projects/default/rib/_nRigid1_nRigidShape1.2.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeParticleData.cpp::write(|nRigid1|nRigidShape1,perspShape,...)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|nRigid1|nRigidShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pTorus1|pTorusShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pTorus1|pTorusShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pTorus1|pTorusShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pTorus1|pTorusShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pTorus1|pTorusShape1,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pTorus1|pTorusShape1,|pTorus1|pTorusShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pTorus1|pTorusShape1,|pTorus1|pTorusShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pTorus1|pTorusShape1,|pTorus1|pTorusShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pTorus1|pTorusShape1,perspShape)
                    >10 objectNonShadowAttribute(|pTorus1|pTorusShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pTorus1|pTorusShape1,v=0,s=0,c=0,,|pTorus1|pTorusShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pTorus1|pTorusShape1,|pTorus1|pTorusShape1,0)
                      >11 Renderer::F2(0,|pTorus1|pTorusShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pTorus1|pTorusShape1)
                    >10 Visitor::outputShadingGroup(initialShadingGroup,1)
                      >11 _outputShadingGroup(initialShadingGroup)
                        >12 getShaderFilePath_NoExt(lambert1)
                  >9 Renderer::exportOneObject_reference(|pTorus1|pTorusShape1,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pTorus1|pTorusShape1,|pTorus1|pTorusShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pTorus1|pTorusShape1,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pTorus1_pTorusShape1.2.rib,perspShape,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pTorus1_pTorusShape1.2.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pTorus1|pTorusShape1,R:/MyDocuments/maya/projects/default/rib/_pTorus1_pTorusShape1.2.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pTorus1|pTorusShape1,perspShape)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pTorus1|pTorusShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|nRigid2|nRigidShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|nRigid2|nRigidShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|nRigid2|nRigidShape2,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|nRigid2|nRigidShape2)
                    >10 Renderer::exportLightLinks(perspShape,|nRigid2|nRigidShape2,lightedByWhichLightShapes.size=0)
                      >11 Renderer::logFrame(|nRigid2|nRigidShape2 is not lighted.)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|nRigid2|nRigidShape2,|nRigid2|nRigidShape2,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|nRigid2|nRigidShape2,|nRigid2|nRigidShape2,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|nRigid2|nRigidShape2,|nRigid2|nRigidShape2,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|nRigid2|nRigidShape2,perspShape)
                    >10 objectNonShadowAttribute(|nRigid2|nRigidShape2)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|nRigid2|nRigidShape2,v=0,s=0,c=0,,|nRigid2|nRigidShape2,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|nRigid2|nRigidShape2,|nRigid2|nRigidShape2,0)
                      >11 Renderer::F2(0,|nRigid2|nRigidShape2)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|nRigid2|nRigidShape2)
                  >9 Renderer::exportOneObject_reference(|nRigid2|nRigidShape2,perspShape)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|nRigid2|nRigidShape2,|nRigid2|nRigidShape2,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|nRigid2|nRigidShape2,perspShape,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_nRigid2_nRigidShape2.2.rib,perspShape,1)
                        >12 liqRibParticleData::write(R:/MyDocuments/maya/projects/default/rib/_nRigid2_nRigidShape2.2.rib,job=perspShape,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|nRigid2|nRigidShape2,R:/MyDocuments/maya/projects/default/rib/_nRigid2_nRigidShape2.2.rib,perspShape,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeParticleData.cpp::write(|nRigid2|nRigidShape2,perspShape,...)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|nRigid2|nRigidShape2,perspShape)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(2)
              >7 Renderer::frameEpilogue(2)
            >6 liqRibTranslatorNew::ribEpilogue__(perspShape)
              >7 Renderer::ribPrologue_end(perspShape)
          >5 Renderer::HeroPassEnd(perspShape)
            >6 rm::Renderer::renderAll_local(R:/MyDocuments/maya/projects/default/rib/particleColorChangeOnCollisionMethod1_perspShape.0002..rib)
              >7 liqProcessLauncher::_execute(renderdl,   "R:/MyDocuments/maya/projects/default/rib/particleColorChangeOnCollisionMethod1_perspShape.0002..rib","R:/MyDocuments/maya/projects/default/", wait=0)
                >8 liqProcessLauncher::_execute(renderdl,   "R:/MyDocuments/maya/projects/default/rib/particleColorChangeOnCollisionMethod1_perspShape.0002..rib","R:/MyDocuments/maya/projects/default/", wait=0)
        >4 liqRenderScript::addJob(job.title=particleColorChangeOnCollisionMethod1Frame0,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
    >2 RendererMgr::unsetFactory()
