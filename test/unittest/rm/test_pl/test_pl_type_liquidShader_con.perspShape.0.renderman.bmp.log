>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(renderman)
  >1 RendererMgr::install()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(E:/MyDocuments/maya/projects/default/rib/test_pl_type_liquidShader_con.perspShape.1.renderman.bmp)(but do nothing now)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(test_pl_type_liquidShader_conFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(test_pl_type_liquidShader_con_liquidShader7)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(test_pl_type_liquidShader_con_liquidShader7)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(test_pl_type_liquidShader_con_liquidShader7)
              >7 liqShader::processExpression(s0,*light)
                >8 removeRedundentExtsion(test stringATT)
                >8 liqExpression::liqExpression([MakeTexture test stringATT],)
                >8 liqExpression::CalcValue()
                  >9 Renderer::getTextureExt()
                  >9 Renderer::getTextureExt()
                >8 liqExpression::GetCmd()
                >8 Renderer::getTextureExt()
          >5 liqShader::liqShader(test_pl_type_liquidShader_con_liquidShader8)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(test_pl_type_liquidShader_con_liquidShader8)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(test_pl_type_liquidShader_con_liquidShader8)
              >7 liqShader::processExpression(s0,*light)
                >8 removeRedundentExtsion(test stringATT)
                >8 liqExpression::liqExpression([MakeTexture test stringATT],)
                >8 liqExpression::CalcValue()
                  >9 Renderer::getTextureExt()
                  >9 Renderer::getTextureExt()
                >8 liqExpression::GetCmd()
                >8 Renderer::getTextureExt()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,perspShape)
          >5 liqRibTranslator::generateFileName(5,perspShape)
            >6 liqRibTranslator::generateImageName(, job(perspShape)), 
          >5 liqRibTranslator::renderFrameSort(,)
          >5 liqRibTranslator::renderFrameSort(,)
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibHT::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
              >7 liqRibHT::hash(|pointLight2|pointLightShape2,1)
              >7 liqRibHT::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,4)
                >8 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane2|pPlaneShape11,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape11,2)
              >7 liqRibHT::find(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape11,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape11,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape11,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape11)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape11)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|locator1|locatorShape1,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|locator1|locatorShape1,3)
              >7 liqRibHT::find(|locator1|locatorShape1,|locator1|locatorShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|locator1|locatorShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(locator1,,2)
                >8 liqRibNode::parseVectorAttributes(locator1,,3)
                >8 liqRibNode::parseVectorAttributes(locator1,,4)
                >8 liqRibNode::findShadingGroup(|locator1|locatorShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|locator1|locatorShape1,0)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,4)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|persp|perspShape,)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
            >6 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
            >6 liqRibTranslator::getCameraTransform(|persp|perspShape,)
        >4 liqRibTranslatorNew::doTextures(size=2)
          >5 rm::Renderer::doTextures(txtList.size()=2)
            >6 liqProcessLauncher::_execute(tdlmake, -progress stringATT  "test" "test.tif",E:/MyDocuments/maya/projects/default/, wait=1)
            >6 liqProcessLauncher::_execute(tdlmake, -progress stringATT  "test" "test.tif",E:/MyDocuments/maya/projects/default/, wait=1)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 rm::Renderer::doShadows(shadowList_.size()=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/test_pl_type_liquidShader_con_perspShape.0001..rib(strlen=91)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),E:/MyDocuments/maya/projects/default/test_pl_type_liquidShader_con,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 tHeroRibWriterMgr::framePrologue_display(perspShape)
                >8 exportJobCamera(perspShape,,)
              >7 Renderer::framePrologue_camera(1,perspShape)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(liquidShader8SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader8SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(test_pl_type_liquidShader_con_liquidShader8)
                  >9 ConvertShadingNetwork::exportShaderBegin(test_pl_type_liquidShader_con_liquidShader8)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(test_pl_type_liquidShader_con_liquidShader8,surfaceShader)
                    >10 Visitor::initShaderData(test_pl_type_liquidShader_con_liquidShader8,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(test_pl_type_liquidShader_con_liquidShader8, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_con_liquidShader8)
                        >12 ShaderMgr::hasShaderType(liquidShader)
                      >11 ShaderMgr::getValidConnection(test_pl_type_liquidShader_con_liquidShader8)
                        >12 liqShaderFactory::getShader(test_pl_type_liquidShader_con_liquidShader8)
                          >13 liqShaderFactory::getShader(test_pl_type_liquidShader_con_liquidShader8)
                            >14 liqShader::liqShader(test_pl_type_liquidShader_con_liquidShader8)
                              >15 liqShaderFactory::getUniqueShaderHandler()
                              >15 liqGetSloInfo::setShaderNode(test_pl_type_liquidShader_con_liquidShader8)
                        >12 liqShader::getValidConnection(...)
                          >13 liqShader::getName()
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.frequency)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.frequency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_con_phong1)
                          >13 ShaderMgr::hasShaderType(phong)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.s0)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.s0)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.c0)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.c0)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.p0)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.p0)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.v0)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.v0)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.n0)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.n0)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.m0)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.m0)
                      >11 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.m1)
                        >12 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.m1)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(test_pl_type_liquidShader_con_phong1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_con_phong1)
                          >13 ShaderMgr::hasShaderType(phong)
                        >12 ShaderMgr::getValidConnection(test_pl_type_liquidShader_con_phong1)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.diffuse)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_con_liquidShader8)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.outTransparency)
                    >10 Visitor::preOutput(test_pl_type_liquidShader_con_liquidShader8)
                    >10 Visitor::outputBegin(test_pl_type_liquidShader_con_liquidShader8), open shader file
                      >11 getShaderFilePath_SRC(test_pl_type_liquidShader_con_liquidShader8)
                        >12 getShaderFilePath_NoExt(test_pl_type_liquidShader_con_liquidShader8)
                      >11 Visitor::getSurfaceShaderAOVOutputParametersString()
                      >11 Visitor::defineAOVVariables(test_pl_type_liquidShader_con_liquidShader8)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(test_pl_type_liquidShader_con_phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(test_pl_type_liquidShader_con_phong1,phong)
                          >13 Visitor::visitPhong(test_pl_type_liquidShader_con_phong1)
                            >14 OutputHelper::addInclude(phong.h)
                            >14 OutputHelper::beginRSL(test_pl_type_liquidShader_con_phong1)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.color)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.diffuse)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_con_liquidShader8)
                                  >17 ShaderMgr::hasShaderType(liquidShader)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.refractions)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.refractions)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.refractions)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.refractiveIndex)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.refractiveIndex)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.refractiveIndex)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.refractionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.refractionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.refractionLimit)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.lightAbsorbance)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.lightAbsorbance)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.lightAbsorbance)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.shadowAttenuation)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.shadowAttenuation)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.shadowAttenuation)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(test_pl_type_liquidShader_con_phong1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(test_pl_type_liquidShader_con_phong1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(test_pl_type_liquidShader_con_phong1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.diffuse)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_con_liquidShader8)
                            >14 ShaderMgr::hasShaderType(liquidShader)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(test_pl_type_liquidShader_con_phong1,diffuse,test_pl_type_liquidShader_con_phong1.diffuse, outputVars)
                          >13 Visitor::addShaderMethodVariavles(test_pl_type_liquidShader_con_phong1,diffuse,float,-1,)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_phong1.outTransparency)
                      >11 Visitor::addShaderMethodBody(test_pl_type_liquidShader_con_phong1,,test_pl_type_liquidShader_con_phong1_diffuse124)
                      >11 Visitor::outputUpstreamShader(test_pl_type_liquidShader_con_liquidShader8)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(test_pl_type_liquidShader_con_liquidShader8,liquidShader)
                          >13 Visitor::visit_liquidShader(test_pl_type_liquidShader_con_liquidShader8)
                            >14 liqShaderFactory::getShader(test_pl_type_liquidShader_con_liquidShader8)
                              >15 liqShaderFactory::getShader(test_pl_type_liquidShader_con_liquidShader8)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                            >14 OutputHelper::addInclude(E:/dev/Autodesk/maya/myplugin/project/liquid_/2.3.3/lib/shaders/test_type.impl)
                            >14 OutputHelper::beginRSL(test_pl_type_liquidShader_con_liquidShader8)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.frequency)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.frequency)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.frequency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_con_phong1)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.s0)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.s0)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.s0)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.c0)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.c0)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.c0)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.p0)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.p0)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.p0)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.v0)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.v0)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.v0)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.n0)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.n0)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.n0)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.m0)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.m0)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.m0)
                            >14 ShaderMgr::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.m1)
                              >15 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.m1)
                                >16 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.m1)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(test_pl_type_liquidShader_con_liquidShader8)
                        >12 liqShaderFactory::getShader(test_pl_type_liquidShader_con_liquidShader8)
                          >13 liqShaderFactory::getShader(test_pl_type_liquidShader_con_liquidShader8)
                        >12 liqShader::getValidConnection(...)
                          >13 liqShader::getName()
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(test_pl_type_liquidShader_con_liquidShader8, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(test_pl_type_liquidShader_con_liquidShader8, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.frequency)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.frequency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_con_phong1)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::addNodeInputVariable(test_pl_type_liquidShader_con_liquidShader8.frequency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(test_pl_type_liquidShader_con_phong1)
                            >14 ShaderMgr::hasShaderType(phong)
                          >13 ShaderMgr::getValidConnection(test_pl_type_liquidShader_con_phong1)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.s0)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.s0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.c0)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.c0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.p0)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.p0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.v0)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.v0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.n0)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.n0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.m0)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.m0)
                        >12 ConvertShadingNetwork::convertibleConnection(test_pl_type_liquidShader_con_liquidShader8.m1)
                          >13 ConvertShadingNetwork::ensurePlugExists(test_pl_type_liquidShader_con_liquidShader8.m1)
                      >11 Visitor::addShaderMethodBody(test_pl_type_liquidShader_con_liquidShader8,test_pl_type_liquidShader_con_phong1_diffuse124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(test_pl_type_liquidShader_con_liquidShader8)
                        >12 getShaderFilePath_NoExt(test_pl_type_liquidShader_con_liquidShader8)
                      >11 getShaderFilePath_SRC(test_pl_type_liquidShader_con_liquidShader8)
                        >12 getShaderFilePath_NoExt(test_pl_type_liquidShader_con_liquidShader8)
                  >9 ConvertShadingNetwork::exportShaderEnd(test_pl_type_liquidShader_con_liquidShader8)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader8SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader8SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(liquidShader8SG)
                >8 ConvertShadingNetwork::outputShadingGroup(liquidShader8SG)
                  >9 Visitor::outputShadingGroup(liquidShader8SG)
                    >10 Visitor::outputShadingGroup(liquidShader8SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(liquidShader8SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                  >9 Helper::RiBeginRef()
                  >9 liqRibData::getFullPathName()
                  >9 rm_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                  >9 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
            >6 Renderer::writeLight_pre(|pointLight2|pointLightShape2,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight2|pointLightShape2,,perspShape,ref=0)
                  >9 Helper::RiBeginRef()
                  >9 liqRibData::getFullPathName()
                  >9 rm_writeLightData.cpp::_write(|pointLight2|pointLightShape2,perspShape,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                  >9 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight2|pointLightShape2,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
            >6 Renderer::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape11,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape11,perspShape)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape11,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape11,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|locator1|locatorShape1,perspShape)
                >8 Renderer::exportOneObject_data(|locator1|locatorShape1,perspShape)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.1.rib,perspShape,0)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.1.rib,perspShape,ref=0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape11,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape11,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape11,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane2|pPlaneShape11)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane2|pPlaneShape11,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape11,perspShape)
                  >9 objectNonShadowAttribute(|pPlane2|pPlaneShape11)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape11,v=0,s=1,c=0,,|pPlane2|pPlaneShape11,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pPlane2|pPlaneShape11,perspShape)
                    >10 liqShaderFactory::getShader(test_pl_type_liquidShader_con_liquidShader8)
                    >10 liqShader::getName()
                    >10 Renderer::F1(|pPlane2|pPlaneShape11,test_pl_type_liquidShader_con_liquidShader8)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape11)
                  >9 Visitor::outputShadingGroup(liquidShader8SG,1)
                    >10 _outputShadingGroup(liquidShader8SG)
                      >11 getShaderFilePath_NoExt(test_pl_type_liquidShader_con_liquidShader8)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape11,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape11,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape11,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|pPlane2|pPlaneShape11,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape11,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|locator1|locatorShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|locator1|locatorShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|locator1|locatorShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|locator1|locatorShape1)
                  >9 Renderer::exportLightLinks(perspShape,|locator1|locatorShape1,lightedByWhichLightShapes.size=0)
                    >10 Renderer::logFrame(|locator1|locatorShape1 is not lighted.)
                >8 liqRibTranslatorNew::checkSurfaceShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|locator1|locatorShape1,|locator1|locatorShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|locator1|locatorShape1,perspShape)
                  >9 objectNonShadowAttribute(|locator1|locatorShape1)
                    >10 liqRibNode::writeUserAttributes()
                      >11 Renderer::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|locator1|locatorShape1,v=0,s=0,c=0,,|locator1|locatorShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|locator1|locatorShape1,|locator1|locatorShape1,0)
                    >10 Renderer::F2(0,|locator1|locatorShape1)
                    >10 liqRibNode::findShader()
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|locator1|locatorShape1)
                >8 Renderer::exportOneObject_reference(|locator1|locatorShape1,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 MaxtrixMotionBlur(|locator1|locatorShape1,|locator1|locatorShape1,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|locator1|locatorShape1,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.1.rib,perspShape,1)
                      >11 liqRibLocatorData::write(E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|locator1|locatorShape1,E:/MyDocuments/maya/projects/default/rib/_locator1_locatorShape1.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeLocatorData.cpp::write(|locator1|locatorShape1,perspShape,...)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|locator1|locatorShape1,perspShape)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
        >4 Renderer::HeroPassEnd(perspShape)
          >5 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/test_pl_type_liquidShader_con_perspShape.0001..rib)
            >6 liqProcessLauncher::_execute(renderdl,   "E:/MyDocuments/maya/projects/default/rib/test_pl_type_liquidShader_con_perspShape.0001..rib","E:/MyDocuments/maya/projects/default/", wait=0)
      >3 liqRenderScript::addJob(job.title=test_pl_type_liquidShader_conFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
  >1 RendererMgr::unsetFactory()
