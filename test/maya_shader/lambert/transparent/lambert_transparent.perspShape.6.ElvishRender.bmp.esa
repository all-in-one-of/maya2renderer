//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/lambert_transparent
//    User  : yaoyansi

//############################### option #
ei_options("perspShape_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_lambert", "lambert5");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_param_vector("i_color",0.5,0.5,0.5);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_bool("i_refractions",0);
ei_shader_param_scalar("i_refractiveIndex",1);
ei_shader_param_index("i_refractionLimit",6);
ei_shader_param_scalar("i_lightAbsorbance",0);
ei_shader_param_scalar("i_shadowAttenuation",0.5);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_transparency",0.699184,0.699184,0.699184);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0.699184,0.699184,0.699184);
ei_end_shader();

ei_material("lambert3SG");
ei_surface_shader("lambert5");
ei_end_material();

ei_shader("maya_lambert", "lambert4");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_param_vector("i_color",0.5,0.5,0.5);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_bool("i_refractions",0);
ei_shader_param_scalar("i_refractiveIndex",1);
ei_shader_param_index("i_refractionLimit",6);
ei_shader_param_scalar("i_lightAbsorbance",0);
ei_shader_param_scalar("i_shadowAttenuation",0.5);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_transparency",0.32232,0.32232,0.32232);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0.32232,0.32232,0.32232);
ei_end_shader();

ei_material("lambert2SG");
ei_surface_shader("lambert4");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0.518397,3.8249,-0.6538,1);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane3_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane4_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// maya settings: focal=35.000000, aperture = 36.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|persp|perspShape");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/lambert_transparent.perspShape.6.ElvishRender.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(36);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape2, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape2
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape2" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -1.547214, -0.000000, 0.939920 );
ei_tab_add_vector( 1.547214, -0.000000, 0.939920 );
ei_tab_add_vector( -1.547214, 0.000000, -0.939920 );
ei_tab_add_vector( -1.547214, 0.000000, -0.939920 );
ei_tab_add_vector( 1.547214, -0.000000, 0.939920 );
ei_tab_add_vector( 1.547214, 0.000000, -0.939920 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.607492 );
ei_tab_add_vector2( 0.000000, 0.607492 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.607492 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape2
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube2|pCubeShape2, 0, 0

//############################### mesh #
//shape full path name=|pCube2|pCubeShape2
//### UV(map1), size=14
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube2|pCubeShape2" );
{
eiTag tag;
//vertex positions(required), size=36
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -1.870591, -0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, -0.500000, 1.058162 );
ei_tab_add_vector( -1.870591, 0.500000, 1.058162 );
ei_tab_add_vector( -1.870591, 0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, -0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, 0.500000, 1.058162 );
ei_tab_add_vector( -1.870591, 0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, 0.500000, 1.058162 );
ei_tab_add_vector( -1.870591, 0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, 0.500000, -1.058162 );
ei_tab_add_vector( 1.870591, 0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, 0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, 0.500000, -1.058162 );
ei_tab_add_vector( 1.870591, 0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, -0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, -0.500000, -1.058162 );
ei_tab_add_vector( 1.870591, 0.500000, -1.058162 );
ei_tab_add_vector( 1.870591, -0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, -0.500000, -1.058162 );
ei_tab_add_vector( 1.870591, -0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, -0.500000, 1.058162 );
ei_tab_add_vector( -1.870591, -0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, -0.500000, -1.058162 );
ei_tab_add_vector( 1.870591, -0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, -0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, -0.500000, -1.058162 );
ei_tab_add_vector( 1.870591, 0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, 0.500000, 1.058162 );
ei_tab_add_vector( 1.870591, -0.500000, -1.058162 );
ei_tab_add_vector( 1.870591, 0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, -0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, -0.500000, 1.058162 );
ei_tab_add_vector( -1.870591, 0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, 0.500000, -1.058162 );
ei_tab_add_vector( -1.870591, -0.500000, 1.058162 );
ei_tab_add_vector( -1.870591, 0.500000, 1.058162 );
ei_end_tab();
//### N ###(optional)
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.625000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_end_tab();
//### triangles(required) size=36
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_tab_add_index(6);
ei_tab_add_index(7);
ei_tab_add_index(8);
ei_tab_add_index(9);
ei_tab_add_index(10);
ei_tab_add_index(11);
ei_tab_add_index(12);
ei_tab_add_index(13);
ei_tab_add_index(14);
ei_tab_add_index(15);
ei_tab_add_index(16);
ei_tab_add_index(17);
ei_tab_add_index(18);
ei_tab_add_index(19);
ei_tab_add_index(20);
ei_tab_add_index(21);
ei_tab_add_index(22);
ei_tab_add_index(23);
ei_tab_add_index(24);
ei_tab_add_index(25);
ei_tab_add_index(26);
ei_tab_add_index(27);
ei_tab_add_index(28);
ei_tab_add_index(29);
ei_tab_add_index(30);
ei_tab_add_index(31);
ei_tab_add_index(32);
ei_tab_add_index(33);
ei_tab_add_index(34);
ei_tab_add_index(35);
ei_end_tab();
}//|pCube2|pCubeShape2
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane3|pPlaneShape3, 0, 0

//############################### mesh #
//shape full path name=|pPlane3|pPlaneShape3
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane3|pPlaneShape3" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -1.407982, -0.000000, 1.079315 );
ei_tab_add_vector( 1.407982, -0.000000, 1.079315 );
ei_tab_add_vector( -1.407982, 0.000000, -1.079315 );
ei_tab_add_vector( -1.407982, 0.000000, -1.079315 );
ei_tab_add_vector( 1.407982, -0.000000, 1.079315 );
ei_tab_add_vector( 1.407982, 0.000000, -1.079315 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.766569 );
ei_tab_add_vector2( 0.000000, 0.766569 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.766569 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane3|pPlaneShape3
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane4|pPlaneShape4, 0, 0

//############################### mesh #
//shape full path name=|pPlane4|pPlaneShape4
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane4|pPlaneShape4" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -1.290118, -0.000000, 0.897752 );
ei_tab_add_vector( 1.290118, -0.000000, 0.897752 );
ei_tab_add_vector( -1.290118, 0.000000, -0.897752 );
ei_tab_add_vector( -1.290118, 0.000000, -0.897752 );
ei_tab_add_vector( 1.290118, -0.000000, 0.897752 );
ei_tab_add_vector( 1.290118, 0.000000, -0.897752 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.695868 );
ei_tab_add_vector2( 0.000000, 0.695868 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.695868 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane4|pPlaneShape4
ei_end_object();
//|persp|perspShape is not lighted.
//--------------------------
//ribNode->name=|persp|perspShape
//ribNode's transform node=|persp
//ribNode->object(0)->getDataPtr()->getFullPathName()=|persp|perspShape
ei_instance("|persp");
//|persp|perspShape's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|persp|perspShape
//shape full path name=|persp|perspShape
ei_element("|persp|perspShape");
ei_transform(-0.676876,-5.55112e-017,-0.736097,0,   -0.615506,0.548463,0.565987,0,   0.403722,0.836175,-0.371242,0,   3.90712,7.53471,-3.85519,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|persp_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane2|pPlaneShape2
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape2
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape2 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: lambert2SG,
ei_mtl("lambert2SG");
//shape name=|pPlane2|pPlaneShape2
//shape full path name=|pPlane2|pPlaneShape2
ei_element("|pPlane2|pPlaneShape2");
ei_transform(0.353079,0,0,0,   0,1,0,0,   0,0,0.527854,0,   -0.205783,0.999604,0.0453565,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube2|pCubeShape2
//ribNode's transform node=|pCube2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube2|pCubeShape2
ei_instance("|pCube2");
//|pCube2|pCubeShape2 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: lambert3SG,
ei_mtl("lambert3SG");
//shape name=|pCube2|pCubeShape2
//shape full path name=|pCube2|pCubeShape2
ei_element("|pCube2|pCubeShape2");
ei_transform(0.373,0,0,0,   0,0.001,0,0,   0,0,0.638351,0,   -0.235684,0.252939,-0.00848235,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane3|pPlaneShape3
//ribNode's transform node=|pPlane3
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane3|pPlaneShape3
ei_instance("|pPlane3");
//|pPlane3|pPlaneShape3 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: lambert2SG,
ei_mtl("lambert2SG");
//shape name=|pPlane3|pPlaneShape3
//shape full path name=|pPlane3|pPlaneShape3
ei_element("|pPlane3|pPlaneShape3");
ei_transform(0.641814,0,0,0,   0,1,0,0,   0,0,0.772436,0,   -0.277402,-0.369637,-0.0162105,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane3_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane4|pPlaneShape4
//ribNode's transform node=|pPlane4
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane4|pPlaneShape4
ei_instance("|pPlane4");
//|pPlane4|pPlaneShape4 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: lambert3SG,
ei_mtl("lambert3SG");
//shape name=|pPlane4|pPlaneShape4
//shape full path name=|pPlane4|pPlaneShape4
ei_element("|pPlane4|pPlaneShape4");
ei_transform(0.743733,0,0,0,   0,1,0,0,   0,0,1.19975,0,   -0.318428,-1.21424,-0.0100935,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane4_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("perspShape");
//camera
ei_add_instance("|persp");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
//mesh(s)
ei_add_instance("|pCube2");
ei_add_instance("|pPlane2");
ei_add_instance("|pPlane3");
ei_add_instance("|pPlane4");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "perspShape", "|persp", "perspShape_option" );
ei_render( "perspShape", "|persp", "perspShape_option" );
ei_end_context();
//------------------------------------------------

