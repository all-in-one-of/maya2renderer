  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(renderman)
    >2 RendererMgr::install()
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/lambert_tex.cameraShape1.1.renderman.bmp)(but do nothing now)
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(lambert_texFrame0)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tJobScriptMgr::buildShadowJob(thisJob___, 0)
              >7 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,cameraShape1)
            >6 liqRibTranslator::generateFileName(5,cameraShape1)
              >7 liqRibTranslator::generateImageName(, job(cameraShape1)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(1)
          >5 liqRibTranslatorNew::scanScene__(1,0)
            >6 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|pointLight1|pointLightShape1,0)
                >8 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,1,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,1)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,2,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,2)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,3)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,4)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|pPlane1|pPlaneShape1,5)
                >8 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|camera1|cameraShape1,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|camera1|cameraShape1,6)
                >8 liqRibHT::find(|camera1|cameraShape1,|camera1|cameraShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|camera1|cameraShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(camera1,,2)
                  >9 liqRibNode::parseVectorAttributes(camera1,,3)
                  >9 liqRibNode::parseVectorAttributes(camera1,,4)
                  >9 liqRibNode::findShadingGroup(|camera1|cameraShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|camera1|cameraShape1,0)
                    >10 liqRibCameraData::liqRibCameraData(|camera1|cameraShape1)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,7)
            >6 liqRibTranslatorNew::getCameraData(iter__,0)
              >7 liqRibTranslator::getCameraInfo(|camera1|cameraShape1,)
                >8 liqRibTranslator::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                  >9 liqRibTranslator::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
              >7 liqRibTranslator::getCameraFilmOffset(|camera1|cameraShape1,)
              >7 liqRibTranslator::getCameraTransform(|camera1|cameraShape1,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 rm::Renderer::doTextures(txtList.size()=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 rm::Renderer::doShadows(shadowList_.size()=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
            >6 Renderer::_RiOption_format_compress(0,0)
          >5 Renderer::isHeroPassReady(cameraShape1)
          >5 Renderer::HeroPassBegin(cameraShape1)
          >5 tHeroRibWriterMgr::write(liqglo___,cameraShape1,1,0)
            >6 liqRibTranslatorNew::ribPrologue__(cameraShape1)
              >7 Renderer::ribPrologue_begin(cameraShape1)
                >8 RiBegin_liq(R:/MyDocuments/maya/projects/default/rib/lambert_tex_cameraShape1.0001..rib(strlen=75)
              >7 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/lambert_tex,yaoyansi,time)
              >7 Renderer::ribPrologue_options(cameraShape1)
                >8 Renderer::ribPrologue_writeSearthPath()
                >8 tHeroRibWriterMgr::ribPrologue_hider(0)
                >8 tHeroRibWriterMgr::ribPrologue_samples(4,4)
                >8 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
                >8 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
                >8 tHeroRibWriterMgr::ribPrologue_pass(beauty)
            >6 liqRibTranslatorNew::framePrologue__(1,cameraShape1)
              >7 Renderer::framePrologue(1,cameraShape1)
                >8 tHeroRibWriterMgr::framePrologue_display(cameraShape1)
                  >9 exportJobCamera(cameraShape1,,)
                >8 Renderer::framePrologue_camera(1,cameraShape1)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(blinn1SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn1SG,surfaceShader)
                    >10 ConvertShadingNetwork::canShaderExported(lambert2)
                    >10 ConvertShadingNetwork::exportShaderBegin(lambert2)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert2,surfaceShader)
                      >11 Visitor::initShaderData(lambert2,surfaceShader)
                        >12 NodePlugConnectionMgr::setNodePlugMgr(...)
                        >12 NodePlugConnectionMgr::reset()
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnection(lambert2)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                              >15 ShaderMgr::hasShaderType(lambert)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture1)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                      >11 Visitor::preOutput(lambert2)
                      >11 Visitor::outputBegin(lambert2), open shader file
                        >12 getShaderFilePath_SRC(lambert2)
                          >13 getShaderFilePath_NoExt(lambert2)
                        >12 Visitor::getSurfaceShaderAOVOutputParametersString()
                        >12 Visitor::defineAOVVariables(lambert2)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                        >12 Visitor::outputUpstreamShader(place2dTexture1)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                            >14 Visitor::visitPlace2dTexture(place2dTexture1)
                              >15 OutputHelper::addInclude(place2dTexture.h)
                              >15 OutputHelper::beginRSL(place2dTexture1)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,coverage,float2)
                                >16 NodePlug::add(coverage, float2)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,mirrorU,float)
                                >16 NodePlug::add(mirrorU, float)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,mirrorV,float)
                                >16 NodePlug::add(mirrorV, float)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,noiseUV,float2)
                                >16 NodePlug::add(noiseUV, float2)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,offset,float2)
                                >16 NodePlug::add(offset, float2)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,repeatUV,float2)
                                >16 NodePlug::add(repeatUV, float2)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,rotateFrame,float)
                                >16 NodePlug::add(rotateFrame, float)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,rotateUV,float)
                                >16 NodePlug::add(rotateUV, float)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,stagger,float)
                                >16 NodePlug::add(stagger, float)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,translateFrame,float2)
                                >16 NodePlug::add(translateFrame, float2)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,wrapU,float)
                                >16 NodePlug::add(wrapU, float)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,wrapV,float)
                                >16 NodePlug::add(wrapV, float)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(place2dTexture1,outUV,float2)
                                >16 NodePlug::add(outUV, float2)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                        >12 Visitor::addShaderMethodBody(place2dTexture1,,,place2dTexture1.coverage124place2dTexture1.mirrorU124place2dTexture1.mirrorV124place2dTexture1.noiseUV124place2dTexture1.offset124place2dTexture1.repeatUV124place2dTexture1.rotateFrame124place2dTexture1.rotateUV124place2dTexture1.stagger124place2dTexture1.translateFrame124place2dTexture1.wrapU124place2dTexture1.wrapV124place2dTexture1.outUV124)
                          >13 NodePlugConnectionMgr::add(place2dTexture1)
                        >12 Visitor::outputUpstreamShader(file1)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                            >14 Visitor::visitFile(file1)
                              >15 OutputHelper::addInclude(file.h)
                              >15 OutputHelper::beginRSL(file1)
                              >15 Renderer::getTextureExt()
                              >15 ShaderMgr::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                              >15 NodePlugInfo::add(file1,alphaGain,float)
                                >16 NodePlug::add(alphaGain, float)
                              >15 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                              >15 NodePlugInfo::add(file1,alphaIsLuminance,float)
                                >16 NodePlug::add(alphaIsLuminance, float)
                              >15 ShaderMgr::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                              >15 NodePlugInfo::add(file1,alphaOffset,float)
                                >16 NodePlug::add(alphaOffset, float)
                              >15 ShaderMgr::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                              >15 NodePlugInfo::add(file1,colorGain,color)
                                >16 NodePlug::add(colorGain, color)
                              >15 ShaderMgr::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                              >15 NodePlugInfo::add(file1,colorOffset,color)
                                >16 NodePlug::add(colorOffset, color)
                              >15 ShaderMgr::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                              >15 NodePlugInfo::add(file1,defaultColor,color)
                                >16 NodePlug::add(defaultColor, color)
                              >15 ShaderMgr::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                              >15 NodePlugInfo::add(file1,filterType,float)
                                >16 NodePlug::add(filterType, float)
                              >15 ShaderMgr::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                              >15 NodePlugInfo::add(file1,filter,float)
                                >16 NodePlug::add(filter, float)
                              >15 ShaderMgr::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                              >15 NodePlugInfo::add(file1,filterOffset,float)
                                >16 NodePlug::add(filterOffset, float)
                              >15 ShaderMgr::convertibleConnection(file1.frameExtension)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.frameExtension)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.frameExtension)
                              >15 NodePlugInfo::add(file1,frameExtension,float)
                                >16 NodePlug::add(frameExtension, float)
                              >15 ShaderMgr::convertibleConnection(file1.frameOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.frameOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.frameOffset)
                              >15 NodePlugInfo::add(file1,frameOffset,float)
                                >16 NodePlug::add(frameOffset, float)
                              >15 ShaderMgr::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                              >15 NodePlugInfo::add(file1,invert,float)
                                >16 NodePlug::add(invert, float)
                              >15 ShaderMgr::convertibleConnection(file1.useFrameExtension)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.useFrameExtension)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.useFrameExtension)
                              >15 NodePlugInfo::add(file1,useFrameExtension,float)
                                >16 NodePlug::add(useFrameExtension, float)
                              >15 ShaderMgr::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                              >15 NodePlugInfo::add(file1,uvCoord,float2)
                                >16 NodePlug::add(uvCoord, float2)
                              >15 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                              >15 NodePlugInfo::add(file1,fileHasAlpha,float)
                                >16 NodePlug::add(fileHasAlpha, float)
                              >15 ShaderMgr::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                              >15 NodePlugInfo::add(file1,outAlpha,float)
                                >16 NodePlug::add(outAlpha, float)
                              >15 ShaderMgr::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                                    >18 ShaderMgr::hasShaderType(lambert)
                              >15 NodePlugInfo::add(file1,outColor,color)
                                >16 NodePlug::add(outColor, color)
                              >15 ShaderMgr::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                              >15 NodePlugInfo::add(file1,outTransparency,color)
                                >16 NodePlug::add(outTransparency, color)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(file1, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                              >15 ShaderMgr::hasShaderType(lambert)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                            >14 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 Visitor::addShaderMethodBody(file1,place2dTexture1.outUV124,file1.uvCoord124,file1.outColor124)
                          >13 NodePlugConnectionMgr::add(file1)
                        >12 Visitor::outputUpstreamShader(lambert2)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(lambert2,lambert)
                            >14 Visitor::visitLambert(lambert2)
                              >15 OutputHelper::addInclude(lambert.h)
                              >15 OutputHelper::beginRSL(lambert2)
                              >15 ShaderMgr::convertibleConnection(lambert2.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                              >15 NodePlugInfo::add(lambert2,ambientColor,color)
                                >16 NodePlug::add(ambientColor, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 NodePlugInfo::add(lambert2,color,color)
                                >16 NodePlug::add(color, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                              >15 NodePlugInfo::add(lambert2,diffuse,float)
                                >16 NodePlug::add(diffuse, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                              >15 NodePlugInfo::add(lambert2,incandescence,color)
                                >16 NodePlug::add(incandescence, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.matteOpacityMode)
                              >15 NodePlugInfo::add(lambert2,matteOpacityMode,float)
                                >16 NodePlug::add(matteOpacityMode, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.matteOpacity)
                              >15 NodePlugInfo::add(lambert2,matteOpacity,float)
                                >16 NodePlug::add(matteOpacity, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.refractions)
                              >15 NodePlugInfo::add(lambert2,refractions,float)
                                >16 NodePlug::add(refractions, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.refractiveIndex)
                              >15 NodePlugInfo::add(lambert2,refractiveIndex,float)
                                >16 NodePlug::add(refractiveIndex, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.refractionLimit)
                              >15 NodePlugInfo::add(lambert2,refractionLimit,float)
                                >16 NodePlug::add(refractionLimit, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.lightAbsorbance)
                              >15 NodePlugInfo::add(lambert2,lightAbsorbance,float)
                                >16 NodePlug::add(lightAbsorbance, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.shadowAttenuation)
                              >15 NodePlugInfo::add(lambert2,shadowAttenuation,float)
                                >16 NodePlug::add(shadowAttenuation, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                              >15 NodePlugInfo::add(lambert2,transparency,color)
                                >16 NodePlug::add(transparency, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.translucence)
                              >15 NodePlugInfo::add(lambert2,translucence,float)
                                >16 NodePlug::add(translucence, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceDepth)
                              >15 NodePlugInfo::add(lambert2,translucenceDepth,float)
                                >16 NodePlug::add(translucenceDepth, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceFocus)
                              >15 NodePlugInfo::add(lambert2,translucenceFocus,float)
                                >16 NodePlug::add(translucenceFocus, float)
                              >15 ShaderMgr::convertibleConnection(lambert2.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn1SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                              >15 NodePlugInfo::add(lambert2,outColor,color)
                                >16 NodePlug::add(outColor, color)
                              >15 ShaderMgr::convertibleConnection(lambert2.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                              >15 NodePlugInfo::add(lambert2,outTransparency,color)
                                >16 NodePlug::add(outTransparency, color)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(lambert2)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(lambert2, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(lambert2, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeInputVariable(lambert2.color, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::getValidConnection(file1)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(blinn1SG)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                        >12 Visitor::addShaderMethodBody(lambert2,file1.outColor124,lambert2.color124,)
                          >13 NodePlugConnectionMgr::add(lambert2)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                          >13 NodePlugConnectionMgr::cookRSLFunctionCallString(0)
                          >13 NodePlugConnectionMgr::log(0)
                          >13 NodePlugConnectionMgr::cookRSLFunctionCallString(1)
                            >14 NodePlugInfo::getPlugInfo(place2dTexture1.outUV)
                              >15 NodePlugInfo::getPlugInfo(place2dTexture1,outUV)
                                >16 NodePlug::getPlugInfo(outUV)
                            >14 NodePlugInfo::getPlugInfo(file1.uvCoord)
                              >15 NodePlugInfo::getPlugInfo(file1,uvCoord)
                                >16 NodePlug::getPlugInfo(uvCoord)
                          >13 NodePlugConnectionMgr::log(1)
                          >13 NodePlugConnectionMgr::cookRSLFunctionCallString(2)
                            >14 NodePlugInfo::getPlugInfo(file1.outColor)
                              >15 NodePlugInfo::getPlugInfo(file1,outColor)
                                >16 NodePlug::getPlugInfo(outColor)
                            >14 NodePlugInfo::getPlugInfo(lambert2.color)
                              >15 NodePlugInfo::getPlugInfo(lambert2,color)
                                >16 NodePlug::getPlugInfo(color)
                          >13 NodePlugConnectionMgr::log(2)
                      >11 Visitor::outputEnd(), close shader file
                      >11 Visitor::postOutput()
                        >12 getShaderFilePath_SLO(lambert2)
                          >13 getShaderFilePath_NoExt(lambert2)
                        >12 getShaderFilePath_SRC(lambert2)
                          >13 getShaderFilePath_NoExt(lambert2)
                    >10 ConvertShadingNetwork::exportShaderEnd(lambert2)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn1SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn1SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(blinn1SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(blinn1SG)
                    >10 Visitor::outputShadingGroup(blinn1SG)
                      >11 Visitor::outputShadingGroup(blinn1SG,0)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(blinn1SG)
                >8  ConvertShadingNetwork::afterExport()
            >6 liqRibTranslatorNew::worldPrologue__(cameraShape1)
              >7 Renderer::worldPrologue(cameraShape1)
            >6 liqRibTranslatorNew::lightBlock__(cameraShape1)
              >7 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
              >7 liqRibObj::writeObject(,cameraShape1,0)
                >8 liqRibLightData::write(,job=cameraShape1,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight1|pointLightShape1,,cameraShape1,ref=0)
                    >10 Helper::RiBeginRef()
                      >11 liqRibData::getFullPathName()
                    >10 rm_writeLightData.cpp::_write(|pointLight1|pointLightShape1,cameraShape1,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 Helper::RiEndRef()
              >7 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
              >7 Renderer::coordSysBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock__(cameraShape1)
              >7 liqRibTranslatorNew::objectBlock_data(cameraShape1)
                >8 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,cameraShape1)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,cameraShape1,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=cameraShape1,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,ref=0)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|camera1|cameraShape1,cameraShape1)
                  >9 Renderer::exportOneObject_data(|camera1|cameraShape1,cameraShape1)
                    >10 Renderer::_writeObject(|camera1|cameraShape1,cameraShape1,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,cameraShape1,0)
                        >12 liqRibCameraData::write(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,job=cameraShape1,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|camera1|cameraShape1,R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,cameraShape1,ref=0)
              >7 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane1|pPlaneShape1)
                    >10 Renderer::exportLightLinks(cameraShape1,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,cameraShape1)
                    >10 objectNonShadowAttribute(|pPlane1|pPlaneShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,cameraShape1)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                      >11 Renderer::F2(0,|pPlane1|pPlaneShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                    >10 Visitor::outputShadingGroup(blinn1SG,1)
                      >11 _outputShadingGroup(blinn1SG)
                        >12 getShaderFilePath_NoExt(lambert2)
                  >9 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,cameraShape1)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,cameraShape1,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,1)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=cameraShape1,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeMeshData.cpp::_write(|pPlane1|pPlaneShape1,cameraShape1)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|camera1|cameraShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|camera1|cameraShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|camera1|cameraShape1,cameraShape1)
                  >9 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|camera1|cameraShape1)
                    >10 Renderer::exportLightLinks(cameraShape1,|camera1|cameraShape1,lightedByWhichLightShapes.size=0)
                      >11 Renderer::logFrame(|camera1|cameraShape1 is not lighted.)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|camera1|cameraShape1,cameraShape1)
                    >10 objectNonShadowAttribute(|camera1|cameraShape1)
                      >11 liqRibNode::writeUserAttributes()
                        >12 Renderer::writeUserAttributes()
                  >9 liqRibTranslatorNew::writeShader_(1,|camera1|cameraShape1,v=0,s=0,c=0,,|camera1|cameraShape1,cameraShape1)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|camera1|cameraShape1,|camera1|cameraShape1,0)
                      >11 Renderer::F2(0,|camera1|cameraShape1)
                      >11 liqRibNode::findShader()
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|camera1|cameraShape1)
                  >9 Renderer::exportOneObject_reference(|camera1|cameraShape1,cameraShape1)
                    >10 liqRibTranslatorNew::preTransformMel
                    >10 MaxtrixMotionBlur(|camera1|cameraShape1,|camera1|cameraShape1,0)
                    >10 liqRibTranslatorNew::postTransformMel(kTransform)
                    >10 liqRibTranslatorNew::preShapeMel(kTransform)
                    >10 Renderer::_writeObject(|camera1|cameraShape1,cameraShape1,0,0,1)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,cameraShape1,1)
                        >12 liqRibCameraData::write(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,job=cameraShape1,1)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|camera1|cameraShape1,R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,cameraShape1,ref=1)
                              >15 liqRibData::getFullPathName()
                            >14 rm_writeCameraData.cpp::_write(|camera1|cameraShape1,cameraShape1)
                    >10 liqRibTranslatorNew::postShapeMel(kTransform)
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|camera1|cameraShape1,cameraShape1)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(1)
              >7 Renderer::frameEpilogue(1)
            >6 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
              >7 Renderer::ribPrologue_end(cameraShape1)
          >5 Renderer::HeroPassEnd(cameraShape1)
            >6 rm::Renderer::renderAll_local(R:/MyDocuments/maya/projects/default/rib/lambert_tex_cameraShape1.0001..rib)
              >7 liqProcessLauncher::_execute(renderdl,   "R:/MyDocuments/maya/projects/default/rib/lambert_tex_cameraShape1.0001..rib","R:/MyDocuments/maya/projects/default/", wait=0)
                >8 liqProcessLauncher::_execute(renderdl,   "R:/MyDocuments/maya/projects/default/rib/lambert_tex_cameraShape1.0001..rib","R:/MyDocuments/maya/projects/default/", wait=0)
        >4 liqRenderScript::addJob(job.title=lambert_texFrame0,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
    >2 RendererMgr::unsetFactory()
