//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5 (buildtime=20:51:12.30)
//    Scene : R:/MyDocuments/maya/projects/default/bump2d_colorbump
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape1_option");
ei_contrast(0.05);
ei_samples(0,2);
ei_filter(4,3);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();
ei_shader("maya_place2dTexture", "place2dTexture3");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",1);
ei_shader_param_scalar("i_repeatV",1);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/texture/mold_normals.tif");
ei_file_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/texture/mold_normals.tif.tex", 0);
ei_end_texture();
ei_shader("maya_file", "file2");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_texture("i_fileTextureName","E:/dev/Autodesk/maya/myplugin/project/liquid_/test/texture/mold_normals.tif");
ei_shader_param_index("i_filterType",3);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture3","o_outUV");
ei_shader_param_bool("i_fileHasAlpha",0);
ei_shader_param_scalar("o_outAlpha",1);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_shader("maya_phong", "phong6");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_param_vector("i_color",0.5,0.5,0.5);
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",1);
ei_shader_link_param("i_normalCamera","file2","o_outColor");
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong6SG");
ei_surface_shader("phong6");
ei_end_material();

//worldPrologue

// Renderer::exportLight("_pointLight3_pointLightShape3");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight3|pointLightShape3_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight3|pointLightShape3_object");
ei_light_shader("|pointLight3|pointLightShape3_shader");
ei_origin(0,0,0);
ei_end_light();
ei_instance("|pointLight3|pointLightShape3");
ei_element("|pointLight3|pointLightShape3_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   9.27838,6.89002,14.0961,1);
ei_declare("|pPlane5_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// maya settings: focal=35.000000, aperture = 41.599998, aspect=1.333333
//Depth of Field on camera "|camera1|cameraShape1" is turned off in Maya

//############################### camera #
ei_camera("|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/bump2d_colorbump.cameraShape1.1.elvishray.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(0.1,10000);
ei_end_camera();

// Renderer::exportOneGeometry_Mesh(|pPlane5|pPlaneShape5, 0, 0

//############################### mesh #
//shape full path name=|pPlane5|pPlaneShape5
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane5|pPlaneShape5" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -5.343232, -0.000000, 6.589149 );
ei_tab_add_vector( 5.343232, -0.000000, 6.589149 );
ei_tab_add_vector( -5.343232, 0.000000, -2.743776 );
ei_tab_add_vector( -5.343232, 0.000000, -2.743776 );
ei_tab_add_vector( 5.343232, -0.000000, 6.589149 );
ei_tab_add_vector( 5.343232, 0.000000, -2.743776 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.005871, 0.019660 );
ei_tab_add_vector2( 0.996497, 0.021718 );
ei_tab_add_vector2( 0.000000, 0.994130 );
ei_tab_add_vector2( 0.000000, 0.994130 );
ei_tab_add_vector2( 0.996497, 0.021718 );
ei_tab_add_vector2( 1.000000, 0.994130 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane5|pPlaneShape5
ei_end_object();
//|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1|cameraShape1
//ribNode's transform node=|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1|cameraShape1
ei_instance("|camera1");
//|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1|cameraShape1
//shape full path name=|camera1|cameraShape1
ei_element("|camera1|cameraShape1");
ei_transform(0.999903,0,0.0139622,0,   0.0108507,0.62932,-0.77707,0,   -0.00878668,0.777146,0.629259,0,   1.08474,11.7064,16.3672,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane5|pPlaneShape5
//ribNode's transform node=|pPlane5
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane5|pPlaneShape5
ei_instance("|pPlane5");
//|pPlane5|pPlaneShape5 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong6SG,
ei_mtl("phong6SG");
//shape name=|pPlane5|pPlaneShape5
//shape full path name=|pPlane5|pPlaneShape5
ei_element("|pPlane5|pPlaneShape5");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   1.09173,0,4.44799,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane5_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape1");
//camera
ei_add_instance("|camera1");
//light(s)
ei_add_instance("|pointLight3|pointLightShape3");
//mesh(s)
ei_add_instance("|pPlane5");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape1", "|camera1", "cameraShape1_option" );
ei_render( "cameraShape1", "|camera1", "cameraShape1_option" );
ei_end_context();
//------------------------------------------------

