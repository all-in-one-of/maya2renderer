//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5 (buildtime=20:51:12.30)
//    Scene : R:/MyDocuments/maya/projects/default/directionallight
//    User  : yaoyansi

//############################### option #
ei_options("perspShape_option");
ei_contrast(0.05);
ei_samples(0,2);
ei_filter(4,3);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();
// maya settings: focal=35.000000, aperture = 36.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|persp|perspShape_object");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/directionallight.perspShape.1.elvishray.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(36);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(0.1,10000);
ei_end_camera();
//----------------------------------
ei_instance("|persp|perspShape");
ei_element("|persp|perspShape_object");
ei_transform(-0.526956,1.11022e-016,-0.849893,0,   -0.616882,0.687869,0.382483,0,   0.584615,0.725835,-0.362476,0,   33.2224,41.2476,-20.5988,1);
ei_end_instance();

ei_shader("maya_lambert", "lambert1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_param_vector("i_color",1,1,1);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_bool("i_refractions",0);
ei_shader_param_scalar("i_refractiveIndex",1);
ei_shader_param_index("i_refractionLimit",6);
ei_shader_param_scalar("i_lightAbsorbance",0);
ei_shader_param_scalar("i_shadowAttenuation",0.5);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("initialShadingGroup");
ei_surface_shader("lambert1");
ei_end_material();
ei_material("liquidDisplacement1SG");
ei_surface_shader("lambert1");
ei_end_material();

//worldPrologue

// Renderer::exportLight("_directionalLight1_directionalLightShape1");

// Renderer::exportDistantLight()
ei_shader("directlight", "|directionalLight1|directionalLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,0);
ei_shader_param_scalar("intensity",1);
ei_shader_param_vector("direction",0,0,-1);
ei_end_shader();
ei_light("|directionalLight1|directionalLightShape1_object");
ei_light_shader("|directionalLight1|directionalLightShape1_shader");
ei_origin(0,0,0);
ei_end_light();
ei_instance("|directionalLight1|directionalLightShape1");
ei_element("|directionalLight1|directionalLightShape1_object");
ei_transform(1,0,-0,0,   -0,0.489905,-0.871776,0,   0,0.871776,0.489905,0,   0,7.91928,6.82795,1);
ei_declare("|pPlane1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pCube1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane1|pPlaneShape1, 0, 0

//############################### mesh #
//shape full path name=|pPlane1|pPlaneShape1
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane1|pPlaneShape1" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -10.785510, -0.000000, 8.952734 );
ei_tab_add_vector( 10.785510, -0.000000, 8.952734 );
ei_tab_add_vector( -10.785510, 0.000000, -8.952734 );
ei_tab_add_vector( -10.785510, 0.000000, -8.952734 );
ei_tab_add_vector( 10.785510, -0.000000, 8.952734 );
ei_tab_add_vector( 10.785510, 0.000000, -8.952734 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.830070 );
ei_tab_add_vector2( 0.000000, 0.830070 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.830070 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane1|pPlaneShape1
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pCube1|pCubeShape1, 0, 0

//############################### mesh #
//shape full path name=|pCube1|pCubeShape1
//### UV(map1), size=14
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube1|pCubeShape1" );
{
eiTag tag;
//vertex positions(required), size=36
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -1.416137, -4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, -4.770175, 0.870669 );
ei_tab_add_vector( -1.416137, 4.770175, 0.870669 );
ei_tab_add_vector( -1.416137, 4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, -4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, 4.770175, 0.870669 );
ei_tab_add_vector( -1.416137, 4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, 4.770175, 0.870669 );
ei_tab_add_vector( -1.416137, 4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, 4.770175, -0.870669 );
ei_tab_add_vector( 1.416137, 4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, 4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, 4.770175, -0.870669 );
ei_tab_add_vector( 1.416137, 4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, -4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, -4.770175, -0.870669 );
ei_tab_add_vector( 1.416137, 4.770175, -0.870669 );
ei_tab_add_vector( 1.416137, -4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, -4.770175, -0.870669 );
ei_tab_add_vector( 1.416137, -4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, -4.770175, 0.870669 );
ei_tab_add_vector( -1.416137, -4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, -4.770175, -0.870669 );
ei_tab_add_vector( 1.416137, -4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, -4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, -4.770175, -0.870669 );
ei_tab_add_vector( 1.416137, 4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, 4.770175, 0.870669 );
ei_tab_add_vector( 1.416137, -4.770175, -0.870669 );
ei_tab_add_vector( 1.416137, 4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, -4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, -4.770175, 0.870669 );
ei_tab_add_vector( -1.416137, 4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, 4.770175, -0.870669 );
ei_tab_add_vector( -1.416137, -4.770175, 0.870669 );
ei_tab_add_vector( -1.416137, 4.770175, 0.870669 );
ei_end_tab();
//### N ###(optional)
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.625000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_end_tab();
//### triangles(required) size=36
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_tab_add_index(6);
ei_tab_add_index(7);
ei_tab_add_index(8);
ei_tab_add_index(9);
ei_tab_add_index(10);
ei_tab_add_index(11);
ei_tab_add_index(12);
ei_tab_add_index(13);
ei_tab_add_index(14);
ei_tab_add_index(15);
ei_tab_add_index(16);
ei_tab_add_index(17);
ei_tab_add_index(18);
ei_tab_add_index(19);
ei_tab_add_index(20);
ei_tab_add_index(21);
ei_tab_add_index(22);
ei_tab_add_index(23);
ei_tab_add_index(24);
ei_tab_add_index(25);
ei_tab_add_index(26);
ei_tab_add_index(27);
ei_tab_add_index(28);
ei_tab_add_index(29);
ei_tab_add_index(30);
ei_tab_add_index(31);
ei_tab_add_index(32);
ei_tab_add_index(33);
ei_tab_add_index(34);
ei_tab_add_index(35);
ei_end_tab();
}//|pCube1|pCubeShape1
ei_end_object();
//--------------------------
//ribNode->name=|pPlane1|pPlaneShape1
//ribNode's transform node=|pPlane1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane1|pPlaneShape1
ei_instance("|pPlane1");
//|pPlane1|pPlaneShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: liquidDisplacement1SG,
ei_mtl("liquidDisplacement1SG");
//shape name=|pPlane1|pPlaneShape1
//shape full path name=|pPlane1|pPlaneShape1
ei_element("|pPlane1|pPlaneShape1");
ei_transform(2.93498,0,0,0,   0,2.93498,0,0,   0,0,2.93498,0,   -0.121393,0,0.44257,1);
//ribNode->doDef=0, ribNode->doMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube1|pCubeShape1
//ribNode's transform node=|pCube1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube1|pCubeShape1
ei_instance("|pCube1");
//|pCube1|pCubeShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: initialShadingGroup,
ei_mtl("initialShadingGroup");
//shape name=|pCube1|pCubeShape1
//shape full path name=|pCube1|pCubeShape1
ei_element("|pCube1|pCubeShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   2.02103,4.77017,0.371834,1);
//ribNode->doDef=0, ribNode->doMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("perspShape");
//camera
ei_add_instance("|persp|perspShape");
//light(s)
ei_add_instance("|directionalLight1|directionalLightShape1");
//mesh(s)
ei_add_instance("|pCube1");
ei_add_instance("|pPlane1");
ei_end_instgroup();
// in batch render mode
//ei_render( "perspShape", "|persp|perspShape", "perspShape_option" );
ei_render( "perspShape", "|persp|perspShape", "perspShape_option" );
ei_end_context();
//------------------------------------------------

