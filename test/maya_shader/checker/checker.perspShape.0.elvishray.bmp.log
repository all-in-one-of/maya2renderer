>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(elvishray)
  >1 RendererMgr::install()
    >2 Renderer::Renderer()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/checker.perspShape.1.elvishray.bmp)
    >2 OutputMgr::setOutputImagePath(R:/MyDocuments/maya/projects/default/rib/checker.perspShape.1.elvishray.bmp)
    >2 OutputMgr::add(0)
    >2 OutputMgr::add(1)
    >2 OutputMgr::add(2)
    >2 OutputMgr::init()
      >3 OutputMgr::createOutput(0)
        >4 OutputBase::OutputBase()
        >4 OutputCall::OutputCall()
      >3 OutputMgr::createOutput(1)
        >4 OutputBase::OutputBase()
        >4 OutputESS::OutputESS(R:/MyDocuments/maya/projects/default/rib/checker.perspShape.1.elvishray.bmp)
      >3 OutputMgr::createOutput(2)
        >4 OutputBase::OutputBase()
        >4 OutputESA::OutputESA(R:/MyDocuments/maya/projects/default/rib/checker.perspShape.1.elvishray.bmp)
      >3 OutputCall::init()
      >3 OutputESS::init()
      >3 OutputESA::init()
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(checkerFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,perspShape)
          >5 liqRibTranslator::generateFileName(5,perspShape)
            >6 liqRibTranslator::generateImageName(, job(perspShape)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibHT::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
              >7 liqRibHT::hash(|pointLight2|pointLightShape2,1)
              >7 liqRibHT::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,4)
                >8 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane10|pPlaneShape19,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane10|pPlaneShape19,2)
              >7 liqRibHT::find(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane10|pPlaneShape19,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane10,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane10,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane10,,4)
                >8 liqRibNode::findShadingGroup(|pPlane10|pPlaneShape19,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane10|pPlaneShape19,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane10|pPlaneShape19)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape19)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,3)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|persp|perspShape,)
              >7 liqRibTranslator::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
            >6 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
            >6 liqRibTranslator::getCameraTransform(|persp|perspShape,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/checker,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                >8 Renderer::cameraOutput(perspShape)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert2SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert3)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert3)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert3,surfaceShader)
                    >10 Visitor::initShaderData(lambert3,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert3, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert3)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(checker1)
                          >13 ShaderMgr::hasShaderType(checker)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(checker1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(checker1)
                          >13 ShaderMgr::hasShaderType(checker)
                        >12 ShaderMgr::getValidConnection(checker1)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.contrast)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.contrast)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(checker1)
                              >15 ShaderMgr::hasShaderType(checker)
                    >10 Visitor::preOutput(lambert3)
                    >10 Visitor::outputBegin(lambert3)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::beginRSL(maya_place2dTexture,place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                  >17 ShaderMgr::hasShaderType(checker)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(checker1)
                            >14 ShaderMgr::hasShaderType(checker)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture2,outUV,float,2,)
                      >11 Visitor::addShaderMethodBody(place2dTexture2,,,place2dTexture2.outUV124)
                      >11 Visitor::outputUpstreamShader(checker1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(checker1,checker)
                          >13 Visitor::visitChecker(checker1)
                            >14 OutputHelper::beginRSL(maya_checker,checker1)
                            >14 ShaderMgr::convertibleConnection(checker1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(checker1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(checker1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(checker1.color1)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.color1)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.color1)
                            >14 ShaderMgr::convertibleConnection(checker1.color2)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.color2)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.color2)
                            >14 ShaderMgr::convertibleConnection(checker1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.colorGain)
                            >14 ShaderMgr::convertibleConnection(checker1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(checker1.contrast)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.contrast)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.contrast)
                            >14 ShaderMgr::convertibleConnection(checker1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(checker1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.filter)
                            >14 ShaderMgr::convertibleConnection(checker1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(checker1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.invert)
                            >14 ShaderMgr::convertibleConnection(checker1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(checker1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(checker1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(checker1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(checker1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(checker1, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGainR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGainG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGainB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainB)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetB)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.contrast)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.contrast)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(checker1.uvCoord, inputSrc, inputDes)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture2)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(checker1,outColor,checker1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(checker1,outColor,color,-1,)
                      >11 Visitor::addShaderMethodBody(checker1,place2dTexture2.outUV124,checker1.uvCoord124,checker1.outColor124)
                      >11 Visitor::outputUpstreamShader(lambert3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert3,lambert)
                          >13 Visitor::visitLambert(lambert3)
                            >14 OutputHelper::beginRSL(maya_lambert_transparent,lambert3)
                            >14 ShaderMgr::convertibleConnection(lambert3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                  >17 ShaderMgr::hasShaderType(checker)
                            >14 ShaderMgr::convertibleConnection(lambert3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert3.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert3)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert3, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert3, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(checker1)
                            >14 ShaderMgr::hasShaderType(checker)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert3.color, inputSrc, inputDes)
                          >13 ConvertShadingNetwork::nodeIsConvertible(checker1)
                            >14 ShaderMgr::hasShaderType(checker)
                          >13 ShaderMgr::getValidConnection(checker1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert3,checker1.outColor124,lambert3.color124,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert3)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert2SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert2SG)
                  >9 Visitor::outputShadingGroup(lambert2SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert2SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                      >11 addLightGroupForLight(|pointLight1|pointLightShape1)
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
            >6 Renderer::writeLight_pre(|pointLight2|pointLightShape2,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight2|pointLightShape2,,perspShape,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight2|pointLightShape2,perspShape,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                      >11 addLightGroupForLight(|pointLight2|pointLightShape2)
            >6 Renderer::writeLight_post(|pointLight2|pointLightShape2,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
            >6 Renderer::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane10|pPlaneShape19,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane10|pPlaneShape19,perspShape)
                  >9 Renderer::_writeObject(|pPlane10|pPlaneShape19,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane10_pPlaneShape19.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane10_pPlaneShape19.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane10|pPlaneShape19,R:/MyDocuments/maya/projects/default/rib/_pPlane10_pPlaneShape19.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write1(|pPlane10|pPlaneShape19,perspShape)
                            >14 liqRibHT::find(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,0)
                            >14 _exportVertexFromNodePlug(|pPlane10|pPlaneShape19,0)
                            >14 liqRibData::getFullPathName()
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane10|pPlaneShape19,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane10|pPlaneShape19,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane10|pPlaneShape19,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane10|pPlaneShape19)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane10|pPlaneShape19,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane10|pPlaneShape19,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane10|pPlaneShape19,v=0,s=0,c=0,,|pPlane10|pPlaneShape19,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane10|pPlaneShape19)
                >8 Renderer::exportOneObject_reference(|pPlane10|pPlaneShape19,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane10|pPlaneShape19,perspShape)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
              >7 Renderer::render()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=checkerFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
    >2 OutputMgr::uninit()
      >3 OutputCall::~OutputCall()
      >3 OutputBase::~OutputBase()
      >3 OutputESS::~OutputESS()
      >3 OutputBase::~OutputBase()
      >3 OutputESA::~OutputESA()
      >3 OutputBase::~OutputBase()
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
    >2 Renderer::~Renderer()
  >1 RendererMgr::unsetFactory()
