//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5 (buildtime=20:51:12.30)
//    Scene : R:/MyDocuments/maya/projects/default/checker
//    User  : yaoyansi

//############################### option #
ei_options("perspShape_option");
ei_contrast(0.05);
ei_samples(0,2);
ei_filter(4,3);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();
// maya settings: focal=35.000000, aperture = 36.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|persp|perspShape_object");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/checker.perspShape.1.elvishray.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(36);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(0.1,10000);
ei_end_camera();
//----------------------------------
ei_instance("|persp|perspShape");
ei_element("|persp|perspShape_object");
ei_transform(0.999994,0,-0.00349065,0,   -0.00343907,0.17127,-0.985218,0,   0.000597843,0.985224,0.171269,0,   -0.161758,21.785,-0.308291,1);
ei_end_instance();

ei_shader("maya_place2dTexture", "place2dTexture2");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("uvCoord",0,0,0);
ei_shader_param_scalar("coverageU",1);
ei_shader_param_scalar("coverageV",1);
ei_shader_param_bool("mirrorU",0);
ei_shader_param_bool("mirrorV",0);
ei_shader_param_scalar("noiseU",0);
ei_shader_param_scalar("noiseV",0);
ei_shader_param_scalar("offsetU",0);
ei_shader_param_scalar("offsetV",0);
ei_shader_param_scalar("repeatU",4);
ei_shader_param_scalar("repeatV",4);
ei_shader_param_scalar("rotateFrame",0);
ei_shader_param_scalar("rotateUV",0);
ei_shader_param_bool("stagger",0);
ei_shader_param_scalar("translateFrameU",0);
ei_shader_param_scalar("translateFrameV",0);
ei_shader_param_bool("wrapU",1);
ei_shader_param_bool("wrapV",1);
ei_shader_param_vector("outUV",0,0,0);
ei_end_shader();

ei_shader("maya_checker", "checker1");
ei_shader_param_scalar("alphaGain",1);
ei_shader_param_bool("alphaIsLuminance",0);
ei_shader_param_scalar("alphaOffset",0);
ei_shader_param_vector("color1",1,1,1);
ei_shader_param_vector("color2",0,0,0);
ei_shader_param_vector("colorGain",1,1,1);
ei_shader_param_vector("colorOffset",0,0,0);
ei_shader_param_scalar("contrast",1);
ei_shader_param_vector("defaultColor",0.5,0.5,0.5);
ei_shader_param_scalar("filter",1);
ei_shader_param_scalar("filterOffset",0);
ei_shader_param_bool("invert",0);
ei_shader_link_param("uvCoord","place2dTexture2","outUV");
ei_shader_param_scalar("outAlpha",0.5);
ei_shader_param_vector("outColor",0.5,0.5,0.5);
ei_end_shader();

ei_shader("maya_lambert", "lambert3");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","checker1","outColor");
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_bool("i_refractions",0);
ei_shader_param_scalar("i_refractiveIndex",1);
ei_shader_param_index("i_refractionLimit",6);
ei_shader_param_scalar("i_lightAbsorbance",0);
ei_shader_param_scalar("i_shadowAttenuation",0.5);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("lambert2SG");
ei_surface_shader("lambert3");
ei_end_material();

//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,5.23026,0,1);
ei_declare("|pPlane10_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportLight("_pointLight2_pointLightShape2");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight2|pointLightShape2_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight2|pointLightShape2_object");
ei_light_shader("|pointLight2|pointLightShape2_shader");
ei_origin(0,0,0);
ei_end_light();
ei_instance("|pointLight2|pointLightShape2");
ei_element("|pointLight2|pointLightShape2_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -5.18346,1.22941,0,1);
ei_declare("|pPlane10_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane10|pPlaneShape19, 0, 0

//############################### mesh #
//shape full path name=|pPlane10|pPlaneShape19
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane10|pPlaneShape19" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -3.883287, -0.000000, 2.990273 );
ei_tab_add_vector( 3.883287, -0.000000, 2.990273 );
ei_tab_add_vector( -3.883287, 0.000000, -2.990273 );
ei_tab_add_vector( -3.883287, 0.000000, -2.990273 );
ei_tab_add_vector( 3.883287, -0.000000, 2.990273 );
ei_tab_add_vector( 3.883287, 0.000000, -2.990273 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.770037 );
ei_tab_add_vector2( 0.000000, 0.770037 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.770037 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane10|pPlaneShape19
ei_end_object();
//--------------------------
//ribNode->name=|pPlane10|pPlaneShape19
//ribNode's transform node=|pPlane10
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane10|pPlaneShape19
ei_instance("|pPlane10");
//|pPlane10|pPlaneShape19 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: lambert2SG,
ei_mtl("lambert2SG");
//shape name=|pPlane10|pPlaneShape19
//shape full path name=|pPlane10|pPlaneShape19
ei_element("|pPlane10|pPlaneShape19");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,0,0,1);
//ribNode->doDef=0, ribNode->doMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane10_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("perspShape");
//camera
ei_add_instance("|persp|perspShape");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
ei_add_instance("|pointLight2|pointLightShape2");
//mesh(s)
ei_add_instance("|pPlane10");
ei_end_instgroup();
// in batch render mode
//ei_render( "perspShape", "|persp|perspShape", "perspShape_option" );
ei_render( "perspShape", "|persp|perspShape", "perspShape_option" );
ei_end_context();
//------------------------------------------------

