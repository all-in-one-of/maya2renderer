  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(ElvishRender)
    >2 RendererMgr::install()
      >3 Renderer::Renderer()
      >3 ShaderMgr::setValidConnection()
      >3 ShaderMgr::getShaderConnectionMap()
      >3 RNodeVisitorMgr::setValidConnection(...)
        >4 CheckerNodeVisitor::setValidConnection(...)
        >4 FlatColorNodeVisitor::setValidConnection(...)
        >4 erPhysicalskyNodeVisitor::setValidConnection(...)
        >4 erSkylightNodeVisitor::setValidConnection(...)
        >4 TestLightNodeVisitor::setValidConnection(...)
        >4 ArchitecturalNodeVisitor::setValidConnection(...)
        >4 Checker2NodeVisitor::setValidConnection(...)
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/shader_graph.perspShape.1.ElvishRender.bmp)
      >3 OutputMgr::setOutputImagePath(R:/MyDocuments/maya/projects/default/rib/shader_graph.perspShape.1.ElvishRender.bmp)
      >3 OutputMgr::add(1)
      >3 OutputMgr::add(2)
      >3 OutputMgr::add(0)
      >3 OutputMgr::init()
        >4 OutputMgr::createOutput(1)
          >5 OutputBase::OutputBase()
          >5 OutputESS::OutputESS(R:/MyDocuments/maya/projects/default/rib/shader_graph.perspShape.1.ElvishRender.bmp)
        >4 OutputMgr::createOutput(2)
          >5 OutputBase::OutputBase()
          >5 OutputESA::OutputESA(R:/MyDocuments/maya/projects/default/rib/shader_graph.perspShape.1.ElvishRender.bmp)
        >4 OutputMgr::createOutput(0)
          >5 OutputBase::OutputBase()
          >5 OutputCall::OutputCall()
        >4 OutputESS::init()
        >4 OutputESA::init()
        >4 OutputCall::init()
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(shader_graphFrame0)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqShader::liqShader(lambert5)
              >7 liqShaderFactory::getUniqueShaderHandler()
              >7 liqGetSloInfo::setShaderNode(lambert5)
            >6 liqShader::buildJobs()
              >7 liqShader::scanExpressions(plastic)
            >6 liqShader::liqShader(lambert14)
              >7 liqShaderFactory::getUniqueShaderHandler()
              >7 liqGetSloInfo::setShaderNode(lambert14)
            >6 liqShader::buildJobs()
              >7 liqShader::scanExpressions(plastic)
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tLightMgr::buildShadowJob(thisJob___, 0)
              >7 tLightMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,perspShape)
            >6 liqRibTranslator::generateFileName(5,perspShape)
              >7 liqRibTranslator::generateImageName(, job(perspShape)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(1)
          >5 liqRibTranslatorNew::scanScene__(1,0)
            >6 tLightMgr::scanScene(1,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|pointLight1|pointLightShape1,0)
                >8 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
              >7 liqRibHT::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
                >8 liqRibHT::hash(|pointLight2|pointLightShape2,1)
                >8 liqRibHT::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight2,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight2,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight2,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,2,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,2)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
                    >10 liqRibCameraData::liqRibCameraData(|persp|perspShape)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,3)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,4)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,5)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube1|pCubeShape1,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|pCube1|pCubeShape1,6)
                >8 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube1,,4)
                  >9 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|camera1|cameraShape1,lframe,0,0,7,matrix,,-1)
                >8 liqRibHT::hash(|camera1|cameraShape1,7)
                >8 liqRibHT::find(|camera1|cameraShape1,|camera1|cameraShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|camera1|cameraShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(camera1,,2)
                  >9 liqRibNode::parseVectorAttributes(camera1,,3)
                  >9 liqRibNode::parseVectorAttributes(camera1,,4)
                  >9 liqRibNode::findShadingGroup(|camera1|cameraShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|camera1|cameraShape1,0)
                    >10 liqRibCameraData::liqRibCameraData(|camera1|cameraShape1)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube2|pCubeShape2,lframe,0,0,8,matrix,,-1)
                >8 liqRibHT::hash(|pCube2|pCubeShape2,8)
                >8 liqRibHT::find(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube2|pCubeShape2,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube2,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube2,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube2,,4)
                  >9 liqRibNode::findShadingGroup(|pCube2|pCubeShape2,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube2|pCubeShape2,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube2|pCubeShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube3|pCubeShape3,lframe,0,0,9,matrix,,-1)
                >8 liqRibHT::hash(|pCube3|pCubeShape3,9)
                >8 liqRibHT::find(|pCube3|pCubeShape3,|pCube3|pCubeShape3,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube3|pCubeShape3,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube3,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube3,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube3,,4)
                  >9 liqRibNode::findShadingGroup(|pCube3|pCubeShape3,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube3|pCubeShape3,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube3|pCubeShape3)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube4|pCubeShape4,lframe,0,0,10,matrix,,-1)
                >8 liqRibHT::hash(|pCube4|pCubeShape4,10)
                >8 liqRibHT::find(|pCube4|pCubeShape4,|pCube4|pCubeShape4,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube4|pCubeShape4,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube4,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube4,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube4,,4)
                  >9 liqRibNode::findShadingGroup(|pCube4|pCubeShape4,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube4|pCubeShape4,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube4|pCubeShape4)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape4)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube5|pCubeShape5,lframe,0,0,11,matrix,,-1)
                >8 liqRibHT::hash(|pCube5|pCubeShape5,11)
                >8 liqRibHT::find(|pCube5|pCubeShape5,|pCube5|pCubeShape5,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube5|pCubeShape5,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube5,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube5,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube5,,4)
                  >9 liqRibNode::findShadingGroup(|pCube5|pCubeShape5,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube5|pCubeShape5,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube5|pCubeShape5)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape5)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pCube6|pCubeShape6,lframe,0,0,12,matrix,,-1)
                >8 liqRibHT::hash(|pCube6|pCubeShape6,12)
                >8 liqRibHT::find(|pCube6|pCubeShape6,|pCube6|pCubeShape6,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pCube6|pCubeShape6,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pCube6,,2)
                  >9 liqRibNode::parseVectorAttributes(pCube6,,3)
                  >9 liqRibNode::parseVectorAttributes(pCube6,,4)
                  >9 liqRibNode::findShadingGroup(|pCube6|pCubeShape6,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pCube6|pCubeShape6,0)
                    >10 liqRibMeshData::liqRibMeshData(|pCube6|pCubeShape6)
                      >11 liqRibData::addAdditionalSurfaceParameters(pCubeShape6)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,13)
            >6 tCameraMgr::getCameraData(perspShape,0)
              >7 tCameraMgr::getCameraInfo(|persp|perspShape,)
                >8 tCameraMgr::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                  >9 tCameraMgr::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
              >7 tCameraMgr::getCameraFilmOffset(|persp|perspShape,)
              >7 tCameraMgr::getCameraTransform(|persp|perspShape,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 Renderer::frameEpilogue(txtList_.size=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 Renderer::doShadows(shadowList_.size=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::isHeroPassReady(perspShape)
          >5 Renderer::HeroPassBegin(perspShape)
          >5 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
            >6 liqRibTranslatorNew::ribPrologue__(perspShape)
              >7 Renderer::ribPrologue_begin(perspShape)
                >8 Renderer::dummyPhongShader()
              >7 Renderer::ribPrologue_comment(2.3.5,R:/MyDocuments/maya/projects/default/shader_graph,yaoyansi,time)
              >7 Renderer::ribPrologue_options(perspShape)
            >6 liqRibTranslatorNew::framePrologue__(1,perspShape)
              >7 Renderer::framePrologue(1,perspShape)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                  >9 ShadingNetworkUser::beforeExport_user()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(initialShadingGroup,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(lambert1)
                          >13 ConvertShadingNetwork::canShaderExported(lambert1)
                          >13 ConvertShadingNetwork::exportShaderBegin(lambert1)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1)
                            >14 Visitor::initShaderData(lambert1)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(lambert1, ret)
                                >16 DagMgr::begin(lambert1)
                                  >17 DagMgr::pushInputPlugs(lambert1)
                                    >18 ShaderMgr::getValidConnection(lambert1)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                                        >20 ShaderMgr::hasShaderType(lambert)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                                        >20 ShaderMgr::hasShaderType(lambert)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                        >20 ShaderMgr::hasShaderType(lambert)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                                >16 DagMgr::pushInputPlugs(lambert2)
                                  >17 ShaderMgr::getValidConnection(lambert2)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                                >16 DagMgr::pushInputPlugs(lambert3)
                                  >17 ShaderMgr::getValidConnection(lambert3)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                                >16 DagMgr::pushInputPlugs(lambert4)
                                  >17 ShaderMgr::getValidConnection(lambert4)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                                >16 DagMgr::isVisited(lambert4)
                                >16 DagMgr::visit(lambert4)
                                >16 DagMgr::isVisited(lambert3)
                                >16 DagMgr::visit(lambert3)
                                >16 DagMgr::isVisited(lambert2)
                                >16 DagMgr::visit(lambert2)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(lambert1)
                            >14 Visitor::outputBegin(lambert1)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(lambert4)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                                  >17 Visitor::visitLambert(lambert4)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert4)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert4)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert4)
                                      >19 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert4)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(lambert4,outColor,lambert4.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(lambert4,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert4,,,lambert4.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert3)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert3,lambert)
                                  >17 Visitor::visitLambert(lambert3)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert3)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert3)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert3)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert3, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(lambert3,outColor,lambert3.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(lambert3,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert3,,,lambert3.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert2)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert2,lambert)
                                  >17 Visitor::visitLambert(lambert2)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert2)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert2)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert2)
                                      >19 ShaderMgr::convertibleConnection(lambert2.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert2)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert2, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(lambert2,outColor,lambert2.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(lambert2,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert2,,,lambert2.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                                  >17 Visitor::visitLambert(lambert1)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert1)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert1)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert1)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert1.transparency, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                  >17 ShaderMgr::getValidConnection(lambert2)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert1.ambientColor, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                  >17 ShaderMgr::getValidConnection(lambert3)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert1.incandescence, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                  >17 ShaderMgr::getValidConnection(lambert4)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert1,lambert2.outColor124lambert3.outColor124lambert4.outColor124,lambert1.transparency124lambert1.ambientColor124lambert1.incandescence124,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(lambert1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(initialShadingGroup,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(initialShadingGroup,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                  >9 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                    >10 Visitor::outputShadingGroup(initialShadingGroup)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
                  >9 ConvertShadingNetwork::canShadingGroupExported(lambert6SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert6SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert6SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(lambert6)
                          >13 ConvertShadingNetwork::canShaderExported(lambert6)
                          >13 ConvertShadingNetwork::exportShaderBegin(lambert6)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert6)
                            >14 Visitor::initShaderData(lambert6)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert6, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(lambert6, ret)
                                >16 DagMgr::begin(lambert6)
                                  >17 DagMgr::pushInputPlugs(lambert6)
                                    >18 ShaderMgr::getValidConnection(lambert6)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(lambert6)
                            >14 Visitor::outputBegin(lambert6)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(lambert6)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert6,lambert)
                                  >17 Visitor::visitLambert(lambert6)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert6)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert6)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert6)
                                      >19 ShaderMgr::convertibleConnection(lambert6.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert6)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert6, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert6,,,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(lambert6)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert6SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert6SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert6SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert6SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert6SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert6SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert6SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(lambert6SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(lambert6SG)
                    >10 Visitor::outputShadingGroup(lambert6SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(lambert6SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(blinn1SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn1SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn1SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(blinn1SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(blinn1)
                          >13 ConvertShadingNetwork::canShaderExported(blinn1)
                          >13 ConvertShadingNetwork::exportShaderBegin(blinn1)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(blinn1)
                            >14 Visitor::initShaderData(blinn1)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(blinn1, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(blinn1, ret)
                                >16 DagMgr::begin(blinn1)
                                  >17 DagMgr::pushInputPlugs(blinn1)
                                    >18 ShaderMgr::getValidConnection(blinn1)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.eccentricity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.eccentricity)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.matteOpacityMode)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.matteOpacityMode)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.matteOpacity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.matteOpacity)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.specularColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.specularColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.specularColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.specularColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.specularRollOff)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.specularRollOff)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.reflectivity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectivity)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.refractions)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.refractions)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.refractiveIndex)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.refractiveIndex)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.refractionLimit)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.refractionLimit)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.lightAbsorbance)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.lightAbsorbance)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.shadowAttenuation)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.shadowAttenuation)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.reflectionLimit)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectionLimit)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(blinn1SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn1.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn1.outTransparency)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(blinn1)
                            >14 Visitor::outputBegin(blinn1)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(blinn1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(blinn1,blinn)
                                  >17 Visitor::visitBlinn(blinn1)
                                    >18 OutputHelper::beginRSL(maya_blinn,blinn1)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.diffuse)
                                    >18 OutputHelper::addRSLVariable(float,i_eccentricity,eccentricity,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.eccentricity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.eccentricity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.eccentricity)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_specularRollOff,specularRollOff,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.specularRollOff)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.specularRollOff)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.specularRollOff)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.shadowAttenuation)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.transparency)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(blinn1)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn1SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,blinn1)
                                      >19 ShaderMgr::convertibleConnection(blinn1.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn1.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn1.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(blinn1)
                              >15 ConvertShadingNetwork::getNodeVariables(blinn1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.color)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.eccentricity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.eccentricity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.specularRollOff)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.specularRollOff)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn1SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn1.outTransparency)
                              >15 Visitor::addShaderMethodBody(blinn1,,,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(blinn1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn1SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn1SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(blinn1SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn1SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn1SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(blinn1SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn1SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn1SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn1SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn1SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(blinn1SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(blinn1SG)
                    >10 Visitor::outputShadingGroup(blinn1SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(blinn1SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(blinn2SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn2SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn2SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(blinn2SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(blinn2)
                          >13 ConvertShadingNetwork::canShaderExported(blinn2)
                          >13 ConvertShadingNetwork::exportShaderBegin(blinn2)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(blinn2)
                            >14 Visitor::initShaderData(blinn2)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(blinn2, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(blinn2, ret)
                                >16 DagMgr::begin(blinn2)
                                  >17 DagMgr::pushInputPlugs(blinn2)
                                    >18 ShaderMgr::getValidConnection(blinn2)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(blinn4)
                                        >20 ShaderMgr::hasShaderType(blinn)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.eccentricity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.eccentricity)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescence)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(blinn5)
                                        >20 ShaderMgr::hasShaderType(blinn)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.matteOpacityMode)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.matteOpacityMode)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.matteOpacity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.matteOpacity)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.specularColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.specularColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.specularColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.specularColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.specularRollOff)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.specularRollOff)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.reflectivity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectivity)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.refractions)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.refractions)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.refractiveIndex)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.refractiveIndex)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.refractionLimit)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.refractionLimit)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.lightAbsorbance)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.lightAbsorbance)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.shadowAttenuation)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.shadowAttenuation)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.reflectionLimit)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectionLimit)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.transparency)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(blinn3)
                                        >20 ShaderMgr::hasShaderType(blinn)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(blinn2SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(blinn2.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(blinn2.outTransparency)
                                >16 DagMgr::pushInputPlugs(blinn4)
                                  >17 ShaderMgr::getValidConnection(blinn4)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.eccentricity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.eccentricity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.matteOpacityMode)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.matteOpacityMode)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.matteOpacity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.matteOpacity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.specularColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.specularColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.specularColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.specularColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.specularRollOff)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.specularRollOff)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.reflectivity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectivity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.refractions)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.refractions)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.refractiveIndex)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.refractiveIndex)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.refractionLimit)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.refractionLimit)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.lightAbsorbance)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.lightAbsorbance)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.shadowAttenuation)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.shadowAttenuation)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.reflectionLimit)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectionLimit)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(blinn4SG)
                                      >19 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                      >19 ShaderMgr::hasShaderType(blinn)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn4.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn4.outTransparency)
                                >16 DagMgr::pushInputPlugs(blinn5)
                                  >17 ShaderMgr::getValidConnection(blinn5)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.eccentricity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.eccentricity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.matteOpacityMode)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.matteOpacityMode)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.matteOpacity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.matteOpacity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.specularColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.specularColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.specularColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.specularColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.specularRollOff)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.specularRollOff)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.reflectivity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectivity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.refractions)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.refractions)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.refractiveIndex)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.refractiveIndex)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.refractionLimit)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.refractionLimit)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.lightAbsorbance)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.lightAbsorbance)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.shadowAttenuation)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.shadowAttenuation)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.reflectionLimit)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectionLimit)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(blinn5SG)
                                      >19 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                      >19 ShaderMgr::hasShaderType(blinn)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn5.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn5.outTransparency)
                                >16 DagMgr::pushInputPlugs(blinn3)
                                  >17 ShaderMgr::getValidConnection(blinn3)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.eccentricity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.eccentricity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.matteOpacityMode)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.matteOpacityMode)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.matteOpacity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.matteOpacity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.specularColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.specularColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.specularColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.specularColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.specularRollOff)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.specularRollOff)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.reflectivity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectivity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.refractions)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.refractions)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.refractiveIndex)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.refractiveIndex)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.refractionLimit)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.refractionLimit)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.lightAbsorbance)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.lightAbsorbance)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.shadowAttenuation)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.shadowAttenuation)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.reflectionLimit)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectionLimit)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(blinn3SG)
                                      >19 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                      >19 ShaderMgr::hasShaderType(blinn)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn3.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn3.outTransparency)
                                >16 DagMgr::isVisited(blinn3)
                                >16 DagMgr::visit(blinn3)
                                >16 DagMgr::isVisited(blinn5)
                                >16 DagMgr::visit(blinn5)
                                >16 DagMgr::isVisited(blinn4)
                                >16 DagMgr::visit(blinn4)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(blinn2)
                            >14 Visitor::outputBegin(blinn2)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(blinn3)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(blinn3,blinn)
                                  >17 Visitor::visitBlinn(blinn3)
                                    >18 OutputHelper::beginRSL(maya_blinn,blinn3)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.diffuse)
                                    >18 OutputHelper::addRSLVariable(float,i_eccentricity,eccentricity,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.eccentricity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.eccentricity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.eccentricity)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_specularRollOff,specularRollOff,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.specularRollOff)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.specularRollOff)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.specularRollOff)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.shadowAttenuation)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.transparency)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(blinn3)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn3SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                            >22 ShaderMgr::hasShaderType(blinn)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,blinn3)
                                      >19 ShaderMgr::convertibleConnection(blinn3.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn3.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn3.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(blinn3)
                              >15 ConvertShadingNetwork::getNodeVariables(blinn3, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.color)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.eccentricity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.eccentricity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.specularRollOff)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.specularRollOff)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn3SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(blinn3,outColor,blinn3.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(blinn3,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn3.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn3.outTransparency)
                              >15 Visitor::addShaderMethodBody(blinn3,,,blinn3.outColor124)
                              >15 Visitor::outputUpstreamShader(blinn5)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(blinn5,blinn)
                                  >17 Visitor::visitBlinn(blinn5)
                                    >18 OutputHelper::beginRSL(maya_blinn,blinn5)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.diffuse)
                                    >18 OutputHelper::addRSLVariable(float,i_eccentricity,eccentricity,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.eccentricity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.eccentricity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.eccentricity)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_specularRollOff,specularRollOff,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.specularRollOff)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.specularRollOff)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.specularRollOff)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.shadowAttenuation)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.transparency)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(blinn5)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn5SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                            >22 ShaderMgr::hasShaderType(blinn)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,blinn5)
                                      >19 ShaderMgr::convertibleConnection(blinn5.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn5.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn5.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(blinn5)
                              >15 ConvertShadingNetwork::getNodeVariables(blinn5, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.color)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.eccentricity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.eccentricity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.specularRollOff)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.specularRollOff)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn5SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(blinn5,outColor,blinn5.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(blinn5,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn5.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn5.outTransparency)
                              >15 Visitor::addShaderMethodBody(blinn5,,,blinn5.outColor124)
                              >15 Visitor::outputUpstreamShader(blinn4)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(blinn4,blinn)
                                  >17 Visitor::visitBlinn(blinn4)
                                    >18 OutputHelper::beginRSL(maya_blinn,blinn4)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.diffuse)
                                    >18 OutputHelper::addRSLVariable(float,i_eccentricity,eccentricity,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.eccentricity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.eccentricity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.eccentricity)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_specularRollOff,specularRollOff,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.specularRollOff)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.specularRollOff)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.specularRollOff)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.shadowAttenuation)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.transparency)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(blinn4)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn4SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                            >22 ShaderMgr::hasShaderType(blinn)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,blinn4)
                                      >19 ShaderMgr::convertibleConnection(blinn4.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn4.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn4.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(blinn4)
                              >15 ConvertShadingNetwork::getNodeVariables(blinn4, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.color)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.eccentricity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.eccentricity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.specularRollOff)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.specularRollOff)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn4SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(blinn4,outColor,blinn4.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(blinn4,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn4.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn4.outTransparency)
                              >15 Visitor::addShaderMethodBody(blinn4,,,blinn4.outColor124)
                              >15 Visitor::outputUpstreamShader(blinn2)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(blinn2,blinn)
                                  >17 Visitor::visitBlinn(blinn2)
                                    >18 OutputHelper::beginRSL(maya_blinn,blinn2)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn4)
                                            >22 ShaderMgr::hasShaderType(blinn)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.diffuse)
                                    >18 OutputHelper::addRSLVariable(float,i_eccentricity,eccentricity,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.eccentricity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.eccentricity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.eccentricity)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescence)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn5)
                                            >22 ShaderMgr::hasShaderType(blinn)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_specularRollOff,specularRollOff,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.specularRollOff)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.specularRollOff)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.specularRollOff)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.shadowAttenuation)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.transparency)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn3)
                                            >22 ShaderMgr::hasShaderType(blinn)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(blinn2)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn2SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,blinn2)
                                      >19 ShaderMgr::convertibleConnection(blinn2.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn2.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn2.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(blinn2)
                              >15 ConvertShadingNetwork::getNodeVariables(blinn2, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn4)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                >16 ConvertShadingNetwork::addNodeInputVariable(blinn2.ambientColor, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn4)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                  >17 ShaderMgr::getValidConnection(blinn4)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.color)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.eccentricity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.eccentricity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescence)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn5)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                >16 ConvertShadingNetwork::addNodeInputVariable(blinn2.incandescence, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn5)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                  >17 ShaderMgr::getValidConnection(blinn5)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.specularRollOff)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.specularRollOff)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.transparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn3)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                >16 ConvertShadingNetwork::addNodeInputVariable(blinn2.transparency, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn3)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                  >17 ShaderMgr::getValidConnection(blinn3)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn2SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn2.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn2.outTransparency)
                              >15 Visitor::addShaderMethodBody(blinn2,blinn4.outColor124blinn5.outColor124blinn3.outColor124,blinn2.ambientColor124blinn2.incandescence124blinn2.transparency124,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(blinn2)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn2SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn2SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(blinn2SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn2SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn2SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(blinn2SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn2SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn2SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(blinn2SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(blinn2SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(blinn2SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(blinn2SG)
                    >10 Visitor::outputShadingGroup(blinn2SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(blinn2SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(lambert7SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert7SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert7SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert7SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(lambert7)
                          >13 ConvertShadingNetwork::canShaderExported(lambert7)
                          >13 ConvertShadingNetwork::exportShaderBegin(lambert7)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert7)
                            >14 Visitor::initShaderData(lambert7)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert7, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(lambert7, ret)
                                >16 DagMgr::begin(lambert7)
                                  >17 DagMgr::pushInputPlugs(lambert7)
                                    >18 ShaderMgr::getValidConnection(lambert7)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.transparency)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(blinn6)
                                        >20 ShaderMgr::hasShaderType(blinn)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert8)
                                        >20 ShaderMgr::hasShaderType(lambert)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert7SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparency)
                                >16 DagMgr::pushInputPlugs(blinn6)
                                  >17 ShaderMgr::getValidConnection(blinn6)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.eccentricity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.eccentricity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.matteOpacityMode)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.matteOpacityMode)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.matteOpacity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.matteOpacity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.specularColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.specularColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.specularColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.specularColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.specularRollOff)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.specularRollOff)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.reflectivity)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectivity)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.refractions)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.refractions)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.refractiveIndex)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.refractiveIndex)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.refractionLimit)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.refractionLimit)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.lightAbsorbance)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.lightAbsorbance)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.shadowAttenuation)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.shadowAttenuation)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.reflectionLimit)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectionLimit)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(blinn6SG)
                                      >19 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(blinn6.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(blinn6.outTransparency)
                                >16 DagMgr::pushInputPlugs(lambert8)
                                  >17 ShaderMgr::getValidConnection(lambert8)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert8SG)
                                      >19 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparency)
                                >16 DagMgr::isVisited(lambert8)
                                >16 DagMgr::visit(lambert8)
                                >16 DagMgr::isVisited(blinn6)
                                >16 DagMgr::visit(blinn6)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(lambert7)
                            >14 Visitor::outputBegin(lambert7)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(lambert8)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert8,lambert)
                                  >17 Visitor::visitLambert(lambert8)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert8)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert8)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert8SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert8)
                                      >19 ShaderMgr::convertibleConnection(lambert8.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert8)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert8, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert8SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(lambert8,outColor,lambert8.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(lambert8,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert8,,,lambert8.outColor124)
                              >15 Visitor::outputUpstreamShader(blinn6)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(blinn6,blinn)
                                  >17 Visitor::visitBlinn(blinn6)
                                    >18 OutputHelper::beginRSL(maya_blinn,blinn6)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.diffuse)
                                    >18 OutputHelper::addRSLVariable(float,i_eccentricity,eccentricity,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.eccentricity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.eccentricity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.eccentricity)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_specularRollOff,specularRollOff,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.specularRollOff)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.specularRollOff)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.specularRollOff)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.shadowAttenuation)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.transparency)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(blinn6)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn6SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,blinn6)
                                      >19 ShaderMgr::convertibleConnection(blinn6.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(blinn6.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(blinn6.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(blinn6)
                              >15 ConvertShadingNetwork::getNodeVariables(blinn6, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.color)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.eccentricity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.eccentricity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.specularRollOff)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.specularRollOff)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.refractions)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.refractions)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.refractiveIndex)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.refractiveIndex)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.refractionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.refractionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.lightAbsorbance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.lightAbsorbance)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.shadowAttenuation)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.shadowAttenuation)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn6SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(blinn6,outColor,blinn6.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(blinn6,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(blinn6.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(blinn6.outTransparency)
                              >15 Visitor::addShaderMethodBody(blinn6,,,blinn6.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert7)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert7,lambert)
                                  >17 Visitor::visitLambert(lambert7)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert7)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert8)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert7)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.transparency)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(blinn6)
                                            >22 ShaderMgr::hasShaderType(blinn)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert7SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert7)
                                      >19 ShaderMgr::convertibleConnection(lambert7.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert7)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert7, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.transparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn6)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert7.transparency, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(blinn6)
                                    >18 ShaderMgr::hasShaderType(blinn)
                                  >17 ShaderMgr::getValidConnection(blinn6)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert8)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert7.ambientColor, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert8)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                  >17 ShaderMgr::getValidConnection(lambert8)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert7SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert7,blinn6.outColor124lambert8.outColor124,lambert7.transparency124lambert7.ambientColor124,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(lambert7)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert7SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert7SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert7SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert7SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert7SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert7SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert7SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert7SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert7SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert7SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(lambert7SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(lambert7SG)
                    >10 Visitor::outputShadingGroup(lambert7SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(lambert7SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(lambert9SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert9SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert9SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert9SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(lambert9)
                          >13 ConvertShadingNetwork::canShaderExported(lambert9)
                          >13 ConvertShadingNetwork::exportShaderBegin(lambert9)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert9)
                            >14 Visitor::initShaderData(lambert9)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert9, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(lambert9, ret)
                                >16 DagMgr::begin(lambert9)
                                  >17 DagMgr::pushInputPlugs(lambert9)
                                    >18 ShaderMgr::getValidConnection(lambert9)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.transparency)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                                        >20 ShaderMgr::hasShaderType(lambert)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                                        >20 ShaderMgr::hasShaderType(lambert)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert9SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparency)
                                >16 DagMgr::pushInputPlugs(lambert10)
                                  >17 ShaderMgr::getValidConnection(lambert10)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.color)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert11)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert10SG)
                                      >19 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparency)
                                >16 DagMgr::pushInputPlugs(lambert12)
                                  >17 ShaderMgr::getValidConnection(lambert12)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.transparency)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert13)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert12SG)
                                      >19 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparency)
                                >16 DagMgr::pushInputPlugs(lambert11)
                                  >17 ShaderMgr::getValidConnection(lambert11)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert11SG)
                                      >19 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparency)
                                >16 DagMgr::pushInputPlugs(lambert13)
                                  >17 ShaderMgr::getValidConnection(lambert13)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.colorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.colorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.colorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.colorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.colorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.colorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.color)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.color)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.transparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.transparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.transparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.transparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.transparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.transparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.transparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.transparency)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.incandescenceR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescenceR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.incandescenceG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescenceG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.incandescenceB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescenceB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.incandescence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.normalCameraX)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.normalCameraX)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.normalCameraY)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.normalCameraY)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.normalCameraZ)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.normalCameraZ)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.normalCamera)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.normalCamera)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.diffuse)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.diffuse)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.translucence)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.translucence)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.translucenceDepth)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.translucenceDepth)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.translucenceFocus)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.translucenceFocus)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert13SG)
                                      >19 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparency)
                                >16 DagMgr::isVisited(lambert13)
                                >16 DagMgr::visit(lambert13)
                                >16 DagMgr::isVisited(lambert11)
                                >16 DagMgr::visit(lambert11)
                                >16 DagMgr::isVisited(lambert12)
                                >16 DagMgr::visit(lambert12)
                                >16 DagMgr::isVisited(lambert10)
                                >16 DagMgr::visit(lambert10)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(lambert9)
                            >14 Visitor::outputBegin(lambert9)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(lambert13)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert13,lambert)
                                  >17 Visitor::visitLambert(lambert13)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert13)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert13)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert13SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert13)
                                      >19 ShaderMgr::convertibleConnection(lambert13.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert13)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert13, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert13SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(lambert13,outColor,lambert13.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(lambert13,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert13,,,lambert13.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert11)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert11,lambert)
                                  >17 Visitor::visitLambert(lambert11)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert11)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert11)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert11SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert11)
                                      >19 ShaderMgr::convertibleConnection(lambert11.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert11)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert11, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert11SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(lambert11,outColor,lambert11.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(lambert11,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert11,,,lambert11.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert12)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert12,lambert)
                                  >17 Visitor::visitLambert(lambert12)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert12)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert12)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.transparency)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert13)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert12SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert12)
                                      >19 ShaderMgr::convertibleConnection(lambert12.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert12)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert12, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.transparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert13)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert12.transparency, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert13)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                  >17 ShaderMgr::getValidConnection(lambert13)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert12SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(lambert12,outColor,lambert12.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(lambert12,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert12,lambert13.outColor124,lambert12.transparency124,lambert12.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert10)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert10,lambert)
                                  >17 Visitor::visitLambert(lambert10)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert10)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.color)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert11)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert10)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert10SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert10)
                                      >19 ShaderMgr::convertibleConnection(lambert10.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert10)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert10, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert11)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert10.color, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert11)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                  >17 ShaderMgr::getValidConnection(lambert11)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert10SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(lambert10,outColor,lambert10.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(lambert10,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert10,lambert11.outColor124,lambert10.color124,lambert10.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert9)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert9,lambert)
                                  >17 Visitor::visitLambert(lambert9)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert9)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.color)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert9)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.transparency)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert9SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert9)
                                      >19 ShaderMgr::convertibleConnection(lambert9.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert9)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert9, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.color)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.transparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert9.transparency, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                  >17 ShaderMgr::getValidConnection(lambert10)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert9.ambientColor, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                  >17 ShaderMgr::getValidConnection(lambert12)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert9SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert9,lambert10.outColor124lambert12.outColor124,lambert9.transparency124lambert9.ambientColor124,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(lambert9)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert9SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert9SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert9SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert9SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert9SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert9SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert9SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert9SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert9SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert9SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(lambert9SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(lambert9SG)
                    >10 Visitor::outputShadingGroup(lambert9SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(lambert9SG)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,miEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,miEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqVolumeShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqLensShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,liqLensShader)
                  >9 ShadingNetworkUser::export_user()
                >8  ConvertShadingNetwork::afterExport()
                  >9 ShadingNetworkUser::afterExport_user()
            >6 liqRibTranslatorNew::worldPrologue__(perspShape)
              >7 Renderer::worldPrologue(perspShape)
            >6 liqRibTranslatorNew::lightBlock__(perspShape)
              >7 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                      >11 liqRibData::getFullPathName()
                    >10 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                        >12 addLightGroupForLight(|pointLight1|pointLightShape1)
              >7 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
              >7 Renderer::writeLight_pre(|pointLight2|pointLightShape2,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight2|pointLightShape2,,perspShape,ref=0)
                      >11 liqRibData::getFullPathName()
                    >10 er_writeLightData.cpp::_write(|pointLight2|pointLightShape2,perspShape,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                        >12 addLightGroupForLight(|pointLight2|pointLightShape2)
              >7 Renderer::writeLight_post(|pointLight2|pointLightShape2,perspShape)
            >6 liqRibTranslatorNew::coordSysBlock__(perspShape)
              >7 Renderer::coordSysBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock__(perspShape)
              >7 liqRibTranslatorNew::objectBlock_data(perspShape)
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|persp|perspShape,perspShape)
                  >9 Renderer::exportOneObject_data(|persp|perspShape,perspShape)
                    >10 Renderer::_writeObject(|persp|perspShape,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_persp_perspShape.1.rib,perspShape,0)
                        >12 liqRibCameraData::write(R:/MyDocuments/maya/projects/default/rib/_persp_perspShape.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|persp|perspShape,R:/MyDocuments/maya/projects/default/rib/_persp_perspShape.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeCameraData.cpp::_write_camera_maya(|persp|perspShape,perspShape)
                              >15 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,miEnvironmentShader)
                              >15 Renderer::cameraOutput(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pCube1|pCubeShape1,perspShape)
                    >10 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube1|pCubeShape1,R:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pCube1|pCubeShape1,perspShape)
                              >15 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                              >15 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|camera1|cameraShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|camera1|cameraShape1,perspShape)
                    >10 Renderer::_writeObject(|camera1|cameraShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,perspShape,0)
                        >12 liqRibCameraData::write(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|camera1|cameraShape1,R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeCameraData.cpp::_write_camera_maya(|camera1|cameraShape1,perspShape)
                              >15 liqRibHT::find(|camera1|cameraShape1,|camera1|cameraShape1,0)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,miEnvironmentShader)
                              >15 Renderer::cameraOutput(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube2|pCubeShape2,perspShape)
                  >9 Renderer::exportOneObject_data(|pCube2|pCubeShape2,perspShape)
                    >10 Renderer::_writeObject(|pCube2|pCubeShape2,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube2|pCubeShape2,R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pCube2|pCubeShape2,perspShape)
                              >15 liqRibHT::find(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                              >15 _exportVertexFromNodePlug(|pCube2|pCubeShape2,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube3|pCubeShape3,perspShape)
                  >9 Renderer::exportOneObject_data(|pCube3|pCubeShape3,perspShape)
                    >10 Renderer::_writeObject(|pCube3|pCubeShape3,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube3|pCubeShape3,R:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pCube3|pCubeShape3,perspShape)
                              >15 liqRibHT::find(|pCube3|pCubeShape3,|pCube3|pCubeShape3,0)
                              >15 _exportVertexFromNodePlug(|pCube3|pCubeShape3,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube4|pCubeShape4,perspShape)
                  >9 Renderer::exportOneObject_data(|pCube4|pCubeShape4,perspShape)
                    >10 Renderer::_writeObject(|pCube4|pCubeShape4,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube4_pCubeShape4.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube4_pCubeShape4.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube4|pCubeShape4,R:/MyDocuments/maya/projects/default/rib/_pCube4_pCubeShape4.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pCube4|pCubeShape4,perspShape)
                              >15 liqRibHT::find(|pCube4|pCubeShape4,|pCube4|pCubeShape4,0)
                              >15 _exportVertexFromNodePlug(|pCube4|pCubeShape4,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube5|pCubeShape5,perspShape)
                  >9 Renderer::exportOneObject_data(|pCube5|pCubeShape5,perspShape)
                    >10 Renderer::_writeObject(|pCube5|pCubeShape5,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube5_pCubeShape5.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube5_pCubeShape5.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube5|pCubeShape5,R:/MyDocuments/maya/projects/default/rib/_pCube5_pCubeShape5.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pCube5|pCubeShape5,perspShape)
                              >15 liqRibHT::find(|pCube5|pCubeShape5,|pCube5|pCubeShape5,0)
                              >15 _exportVertexFromNodePlug(|pCube5|pCubeShape5,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pCube6|pCubeShape6,perspShape)
                  >9 Renderer::exportOneObject_data(|pCube6|pCubeShape6,perspShape)
                    >10 Renderer::_writeObject(|pCube6|pCubeShape6,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube6_pCubeShape6.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube6_pCubeShape6.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pCube6|pCubeShape6,R:/MyDocuments/maya/projects/default/rib/_pCube6_pCubeShape6.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pCube6|pCubeShape6,perspShape)
                              >15 liqRibHT::find(|pCube6|pCubeShape6,|pCube6|pCubeShape6,0)
                              >15 _exportVertexFromNodePlug(|pCube6|pCubeShape6,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=8
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=24
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::objectBlock_reference(perspShape)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|persp|perspShape,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|persp|perspShape,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|persp|perspShape,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|persp|perspShape)
                    >10 Renderer::exportLightLinks(perspShape,|persp|perspShape,lightedByWhichLightShapes.size=0)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|persp|perspShape,|persp|perspShape,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|persp|perspShape,|persp|perspShape,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|persp|perspShape,|persp|perspShape,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|persp|perspShape,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|persp|perspShape,v=0,s=0,c=0,,|persp|perspShape,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|persp|perspShape,|persp|perspShape,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|persp|perspShape)
                  >9 Renderer::exportOneObject_reference(|persp|perspShape,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|persp|perspShape,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube1|pCubeShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=1,c=0,,|pCube1|pCubeShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                  >9 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|camera1|cameraShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|camera1|cameraShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|camera1|cameraShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|camera1|cameraShape1)
                    >10 Renderer::exportLightLinks(perspShape,|camera1|cameraShape1,lightedByWhichLightShapes.size=0)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|camera1|cameraShape1,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|camera1|cameraShape1,v=0,s=0,c=0,,|camera1|cameraShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|camera1|cameraShape1,|camera1|cameraShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|camera1|cameraShape1)
                  >9 Renderer::exportOneObject_reference(|camera1|cameraShape1,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|camera1|cameraShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube2|pCubeShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube2|pCubeShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube2|pCubeShape2,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube2|pCubeShape2)
                    >10 Renderer::exportLightLinks(perspShape,|pCube2|pCubeShape2,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube2|pCubeShape2,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube2|pCubeShape2,v=0,s=0,c=0,,|pCube2|pCubeShape2,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube2|pCubeShape2)
                  >9 Renderer::exportOneObject_reference(|pCube2|pCubeShape2,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube2|pCubeShape2,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube3|pCubeShape3,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube3|pCubeShape3,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube3|pCubeShape3,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube3|pCubeShape3)
                    >10 Renderer::exportLightLinks(perspShape,|pCube3|pCubeShape3,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube3|pCubeShape3,|pCube3|pCubeShape3,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube3|pCubeShape3,|pCube3|pCubeShape3,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube3|pCubeShape3,|pCube3|pCubeShape3,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube3|pCubeShape3,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube3|pCubeShape3,v=0,s=0,c=0,,|pCube3|pCubeShape3,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube3|pCubeShape3,|pCube3|pCubeShape3,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube3|pCubeShape3)
                  >9 Renderer::exportOneObject_reference(|pCube3|pCubeShape3,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube3|pCubeShape3,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube4|pCubeShape4,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube4|pCubeShape4,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube4|pCubeShape4,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube4|pCubeShape4)
                    >10 Renderer::exportLightLinks(perspShape,|pCube4|pCubeShape4,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube4|pCubeShape4,|pCube4|pCubeShape4,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube4|pCubeShape4,|pCube4|pCubeShape4,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube4|pCubeShape4,|pCube4|pCubeShape4,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube4|pCubeShape4,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube4|pCubeShape4,v=0,s=0,c=0,,|pCube4|pCubeShape4,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube4|pCubeShape4,|pCube4|pCubeShape4,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube4|pCubeShape4)
                  >9 Renderer::exportOneObject_reference(|pCube4|pCubeShape4,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube4|pCubeShape4,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube5|pCubeShape5,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube5|pCubeShape5,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube5|pCubeShape5,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube5|pCubeShape5)
                    >10 Renderer::exportLightLinks(perspShape,|pCube5|pCubeShape5,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube5|pCubeShape5,|pCube5|pCubeShape5,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube5|pCubeShape5,|pCube5|pCubeShape5,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube5|pCubeShape5,|pCube5|pCubeShape5,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube5|pCubeShape5,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube5|pCubeShape5,v=0,s=0,c=0,,|pCube5|pCubeShape5,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube5|pCubeShape5,|pCube5|pCubeShape5,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube5|pCubeShape5)
                  >9 Renderer::exportOneObject_reference(|pCube5|pCubeShape5,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube5|pCubeShape5,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pCube6|pCubeShape6,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pCube6|pCubeShape6,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pCube6|pCubeShape6,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube6|pCubeShape6)
                    >10 Renderer::exportLightLinks(perspShape,|pCube6|pCubeShape6,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pCube6|pCubeShape6,|pCube6|pCubeShape6,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pCube6|pCubeShape6,|pCube6|pCubeShape6,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pCube6|pCubeShape6,|pCube6|pCubeShape6,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pCube6|pCubeShape6,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pCube6|pCubeShape6,v=0,s=1,c=0,,|pCube6|pCubeShape6,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pCube6|pCubeShape6,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube6|pCubeShape6)
                  >9 Renderer::exportOneObject_reference(|pCube6|pCubeShape6,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pCube6|pCubeShape6,perspShape)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(1)
              >7 Renderer::frameEpilogue(1)
            >6 liqRibTranslatorNew::ribEpilogue__(perspShape)
              >7 Renderer::ribPrologue_end(perspShape)
                >8 Renderer::cookInstanceGroup()
                >8 Renderer::render()
                  >9 Renderer::renderPreview(200,150,0,0,perspShape,perspShape,perspShape_option)
                    >10 Renderer::_renderPreview(200,150,0,0,perspShape,|persp,perspShape_option)
          >5 Renderer::HeroPassEnd(perspShape)
        >4 liqRenderScript::addJob(job.title=shader_graphFrame0,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
      >3 OutputMgr::uninit()
        >4 OutputESS::~OutputESS()
        >4 OutputBase::~OutputBase()
        >4 OutputESA::~OutputESA()
        >4 OutputBase::~OutputBase()
        >4 OutputCall::~OutputCall()
        >4 OutputBase::~OutputBase()
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
      >3 ShaderMgr::clearValidConnection()
      >3 Renderer::~Renderer()
    >2 RendererMgr::unsetFactory()
