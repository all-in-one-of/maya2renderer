#include <liquidAOVMacroDef.h>
//surface shader name: lambert7
surface lambert7
(
#ifdef USE_AOV_aov_ambient
		output varying color aov_ambient = 0;
#endif
#ifdef USE_AOV_aov_diffuse
		output varying color aov_diffuse = 0;
#endif
#ifdef USE_AOV_aov_specular
		output varying color aov_specular = 0;
#endif
#ifdef USE_AOV_aov_reflection
		output varying color aov_reflection = 0;
#endif
#ifdef USE_AOV_aov_rt_reflection
		output varying color aov_rt_reflection = 0;
#endif
#ifdef USE_AOV_aov_rt_reflection_alpha
		output varying float aov_rt_reflection_alpha = 0;
#endif
#ifdef USE_AOV_aov_env_reflection
		output varying color aov_env_reflection = 0;
#endif
#ifdef USE_AOV_aov_refraction
		output varying color aov_refraction = 0;
#endif
#ifdef USE_AOV_aov_shadow
		output varying float aov_shadow = 0;
#endif
#ifdef USE_AOV_aov_incandescence
		output varying color aov_incandescence = 0;
#endif
#ifdef USE_AOV_aov_translucence
		output varying color aov_translucence = 0;
#endif
#ifdef USE_AOV_aov_ambient_no_shadow
		output varying color aov_ambient_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_diffuse_no_shadow
		output varying color aov_diffuse_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_diffuse_intensity
		output varying color aov_diffuse_intensity = 0;
#endif
#ifdef USE_AOV_aov_diffuse_intensity_no_shadow
		output varying color aov_diffuse_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_key_lights_diffuse_intensity
		output varying color aov_key_lights_diffuse_intensity = 0;
#endif
#ifdef USE_AOV_aov_key_lights_diffuse_intensity_no_shadow
		output varying color aov_key_lights_diffuse_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_luminance_depth
		output varying color aov_luminance_depth = 0;
#endif
#ifdef USE_AOV_aov_specular_no_shadow
		output varying color aov_specular_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_specular_intensity
		output varying color aov_specular_intensity = 0;
#endif
#ifdef USE_AOV_aov_specular_intensity_no_shadow
		output varying color aov_specular_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_key_lights_specular_intensity
		output varying color aov_key_lights_specular_intensity = 0;
#endif
#ifdef USE_AOV_aov_key_lights_specular_intensity_no_shadow
		output varying color aov_key_lights_specular_intensity_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_color_no_shadow
		output varying color aov_color_no_shadow = 0;
#endif
#ifdef USE_AOV_aov_surface_color
		output varying color aov_surface_color = 0;
#endif
#ifdef USE_AOV_aov_camera_space_normal
		output varying normal aov_camera_space_normal = 0;
#endif
#ifdef USE_AOV_aov_facing_ratio
		output varying float aov_facing_ratio = 0;
#endif

)
{



// define some extern variables which are used in 3delight shaders -----------------------------
 color __transparency = color (1,1,1);
 uniform float __reflects = 0;
 uniform float __refracts = 0;



// define the shaders --------------------------------------------------------------------------
#include "blinn.h"
//shader name: blinn6
void blinn6 (
 output color outColor;
)
{
  color ambientColor = color (0,0,0);
  color i_color = color (0.5,0.5,0.5);
  float diffuse = float 0.8;
  float eccentricity = float 0.3;
  color incandescence = color (0,0,0);
 uniform float matteOpacityMode = float 2;
  float matteOpacity = float 1;
  color specularColor = color (0.5,0.5,0.5);
  float specularRollOff = float 0.7;
  float reflectivity = float 0.5;
  color reflectedColor = color (0,0,0);
 uniform float refractions = float 0;
  float refractiveIndex = float 1;
 uniform float refractionLimit = float 6;
  float lightAbsorbance = float 0;
  float shadowAttenuation = float 0.5;
 uniform float reflectionLimit = float 1;
  float translucence = float 0;
  float translucenceDepth = float 0.5;
  float translucenceFocus = float 0.5;
  color transparency = color (0,0,0);
 normal normalCamera = N;
 uniform float i_reflectionMaxDistance   =0;
 uniform float i_reflectionSamples       =0;
 uniform float i_reflectionBlur          =0;
 uniform float i_reflectionNoiseAmplitude=0;
 uniform float i_reflectionNoiseFrequency=0;
 outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
   maya_blinn(						
	ambientColor,				
	i_color,					
	diffuse,					
	eccentricity,				
	incandescence,				
	matteOpacityMode,			
	matteOpacity,				
	specularColor,				
	specularRollOff,			
	reflectivity,				
	reflectedColor,			
	refractions,				
	refractiveIndex,			
	refractionLimit,			
	lightAbsorbance,			
	shadowAttenuation,			
	reflectionLimit,			
	translucence,				
	translucenceDepth,			
	translucenceFocus,			
	transparency,				
	normalCamera,				
	i_reflectionMaxDistance,	
	i_reflectionSamples,		
	i_reflectionBlur,			
	i_reflectionNoiseAmplitude,
	i_reflectionNoiseFrequency,
	outColor,					
	outTransparency			
   );
    Ci             = Os * outColor;
    Oi             = Os * ( 1.0 - outTransparency );
}

#include "lambert.h"
//shader name: lambert8
void lambert8 (
 output color outColor;
)
{
  color ambientColor = color (0,0,0);
  color i_color = color (0.5,0.5,0.5);
  float diffuse = float 0.8;
  color incandescence = color (0,0,0);
  float matteOpacityMode = float 2;
  float matteOpacity = float 1;
 uniform float refractions = float 0;
  float refractiveIndex = float 1;
 uniform float refractionLimit = float 6;
  float lightAbsorbance = float 0;
  float shadowAttenuation = float 0.5;
 normal normalCamera = N;
  color transparency = color (0,0,0);
  float translucence = float 0;
  float translucenceDepth = float 0.5;
  float translucenceFocus = float 0.5;
 outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
   maya_lambert(						
	ambientColor,				
	i_color,					
	diffuse,					
	incandescence,				
	matteOpacityMode,			
	matteOpacity,				
	refractions,				
	refractiveIndex,			
	refractionLimit,			
	lightAbsorbance,			
	shadowAttenuation,			
	normalCamera,				
	transparency,				
	translucence,				
	translucenceDepth,			
	translucenceFocus,			
	outColor,					
	outTransparency			
   );
    Oi = Os * ( 1.0 - outTransparency );
    Ci = Cs * Oi * outColor;
}

#include "lambert.h"
//shader name: lambert7
void lambert7 (
 color ambientColor;
 color transparency;
)
{
//lambert7.ambientColor <-- lambert8.outColor
  color i_color = color (0.5,0.5,0.5);
  float diffuse = float 0.8;
  color incandescence = color (0,0,0);
  float matteOpacityMode = float 2;
  float matteOpacity = float 1;
 uniform float refractions = float 0;
  float refractiveIndex = float 1;
 uniform float refractionLimit = float 6;
  float lightAbsorbance = float 0;
  float shadowAttenuation = float 0.5;
 normal normalCamera = N;
//lambert7.transparency <-- blinn6.outColor
  float translucence = float 0;
  float translucenceDepth = float 0.5;
  float translucenceFocus = float 0.5;
  color outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
   maya_lambert(						
	ambientColor,				
	i_color,					
	diffuse,					
	incandescence,				
	matteOpacityMode,			
	matteOpacity,				
	refractions,				
	refractiveIndex,			
	refractionLimit,			
	lightAbsorbance,			
	shadowAttenuation,			
	normalCamera,				
	transparency,				
	translucence,				
	translucenceDepth,			
	translucenceFocus,			
	outColor,					
	outTransparency			
   );
    Oi = Os * ( 1.0 - outTransparency );
    Ci = Cs * Oi * outColor;
}




// call the shaders ----------------------------------------------------------------------------
 color blinn6_outColor;
 color lambert8_outColor;

 //blinn6
 blinn6(blinn6_outColor);
//input: 
//output:blinn6_outColor,

 //lambert8
 lambert8(lambert8_outColor);
//input: 
//output:lambert8_outColor,

 //lambert7
 lambert7(blinn6_outColor, lambert8_outColor);
//input: blinn6_outColor,lambert8_outColor,
//output:

}
