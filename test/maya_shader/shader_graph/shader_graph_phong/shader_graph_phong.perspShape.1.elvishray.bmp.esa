//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5 (buildtime=20:51:12.30)
//    Scene : R:/MyDocuments/maya/projects/default/shader_graph_phong
//    User  : yaoyansi

//############################### option #
ei_options("perspShape_option");
ei_contrast(0.05);
ei_samples(0,2);
ei_filter(4,3);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();
// maya settings: focal=35.000000, aperture = 36.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|persp|perspShape_object");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/shader_graph_phong.perspShape.1.elvishray.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(36);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(0.1,10000);
ei_end_camera();
//----------------------------------
ei_instance("|persp|perspShape");
ei_element("|persp|perspShape_object");
ei_transform(0.99824,0,-0.0593064,0,   -0.0550414,0.372367,-0.926452,0,   0.0220837,0.928086,0.371711,0,   8.43938,87.5891,47.0188,1);
ei_end_instance();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("uvCoord",0,0,0);
ei_shader_param_scalar("coverageU",1);
ei_shader_param_scalar("coverageV",1);
ei_shader_param_bool("mirrorU",0);
ei_shader_param_bool("mirrorV",0);
ei_shader_param_scalar("noiseU",0);
ei_shader_param_scalar("noiseV",0);
ei_shader_param_scalar("offsetU",0);
ei_shader_param_scalar("offsetV",0);
ei_shader_param_scalar("repeatU",1);
ei_shader_param_scalar("repeatV",1);
ei_shader_param_scalar("rotateFrame",0);
ei_shader_param_scalar("rotateUV",0);
ei_shader_param_bool("stagger",0);
ei_shader_param_scalar("translateFrameU",0);
ei_shader_param_scalar("translateFrameV",0);
ei_shader_param_bool("wrapU",1);
ei_shader_param_bool("wrapV",1);
ei_shader_param_vector("outUV",0,0,0);
ei_end_shader();

ei_make_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif", "E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif.tex",1,1,1, 1, 1);
ei_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif");
ei_file_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif.tex", 0);
ei_end_texture();
ei_shader("maya_file", "file1");
ei_shader_param_scalar("alphaGain",1);
ei_shader_param_bool("alphaIsLuminance",0);
ei_shader_param_scalar("alphaOffset",0);
ei_shader_param_vector("colorGain",1,1,1);
ei_shader_param_vector("colorOffset",0,0,0);
ei_shader_param_vector("defaultColor",0.5,0.5,0.5);
ei_shader_param_texture("fileTextureName","E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif");
ei_shader_param_index("filterType",3);
ei_shader_param_scalar("filter",1);
ei_shader_param_scalar("filterOffset",0);
ei_shader_param_bool("invert",0);
ei_shader_link_param("uvCoord","place2dTexture1","outUV");
ei_shader_param_bool("fileHasAlpha",0);
ei_shader_param_scalar("outAlpha",1);
ei_shader_param_vector("outColor",0,0,0);
ei_shader_param_vector("outTransparency",0,0,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_link_param("color_","file1","outColor");
ei_shader_param_vector("transparency",0.1405,0.1405,0.1405);
ei_shader_param_vector("ambientColor",0,0,0);
ei_shader_param_vector("incandescence",0,0,0);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("normalCamera",1,1,1);
ei_shader_param_scalar("diffuse",0.82642);
ei_shader_param_scalar("translucence",0);
ei_shader_param_scalar("translucenceDepth",0);
ei_shader_param_scalar("translucenceFocus",8e-005);
ei_shader_param_scalar("cosinePower",26.3);
ei_shader_param_vector("specularColor",0,0,0);
ei_shader_param_scalar("reflectivity",6e-005);
ei_shader_param_vector("reflectedColor",0.16528,0.16528,0.16528);
ei_shader_param_index("matteOpacityMode",2);
ei_shader_param_scalar("matteOpacity",1);
ei_shader_param_index("reflectionLimit",1);
ei_shader_param_vector("outColor",0,0,0);
ei_shader_param_vector("outTransparency",0.1405,0.1405,0.1405);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();

//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",1);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   13.1371,15.4759,13.8213,1);
ei_declare("|pPlane1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// Renderer::exportOneGeometry_Mesh(|pPlane1|pPlaneShape1, 0, 0

//############################### mesh #
//shape full path name=|pPlane1|pPlaneShape1
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane1|pPlaneShape1" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -18.502369, -0.000000, 16.700991 );
ei_tab_add_vector( 18.502369, -0.000000, 16.700991 );
ei_tab_add_vector( -18.502369, 0.000000, -16.700991 );
ei_tab_add_vector( -18.502369, 0.000000, -16.700991 );
ei_tab_add_vector( 18.502369, -0.000000, 16.700991 );
ei_tab_add_vector( 18.502369, 0.000000, -16.700991 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.998191 );
ei_tab_add_vector2( 0.000000, 0.998191 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.997722, 0.998778 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane1|pPlaneShape1
ei_end_object();
//--------------------------
//ribNode->name=|pPlane1|pPlaneShape1
//ribNode's transform node=|pPlane1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane1|pPlaneShape1
ei_instance("|pPlane1");
//|pPlane1|pPlaneShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane1|pPlaneShape1
//shape full path name=|pPlane1|pPlaneShape1
ei_element("|pPlane1|pPlaneShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -0.642661,-10.3652,8.77257,1);
//ribNode->doDef=205, ribNode->doMotion=205
ei_motion(1);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("perspShape");
//camera
ei_add_instance("|persp|perspShape");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
//mesh(s)
ei_add_instance("|pPlane1");
ei_end_instgroup();
// in batch render mode
//ei_render( "perspShape", "|persp|perspShape", "perspShape_option" );
ei_render( "perspShape", "|persp|perspShape", "perspShape_option" );
ei_end_context();
//------------------------------------------------

