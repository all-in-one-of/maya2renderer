//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/shader_graph_phong_transparent
//    User  : yaoyansi

//############################### option #
ei_options("perspShape_option");
ei_contrast(0.05);
ei_samples(0,16);
ei_filter(4,3);
ei_progressive(1);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(4,4,4,4,4,4);
ei_displace(0);
ei_face(3);
ei_end_options();

ei_shader("maya_place2dTexture", "place2dTexture2");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",1);
ei_shader_param_scalar("i_repeatV",1);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",1);
ei_shader_param_scalar("i_repeatV",1);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check_diamond.tif");
ei_file_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check_diamond.tif.tex", 0);
ei_end_texture();
ei_shader("maya_file", "file2");
ei_shader_param_scalar("i_alphaGain",0.87604);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0.16528);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_texture("i_fileTextureName","E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check_diamond.tif");
ei_shader_param_index("i_filterType",3);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture2","o_outUV");
ei_shader_param_bool("i_fileHasAlpha",0);
ei_shader_param_scalar("o_outAlpha",1);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif");
ei_file_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif.tex", 0);
ei_end_texture();
ei_shader("maya_file", "file1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_texture("i_fileTextureName","E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif");
ei_shader_param_index("i_filterType",3);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_bool("i_fileHasAlpha",0);
ei_shader_param_scalar("o_outAlpha",1);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_shader("maya_phong", "phong1");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","file1","o_outColor");
ei_shader_param_scalar("i_cosinePower",26.3);
ei_shader_param_scalar("i_diffuse",0.82642);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0,0,0);
ei_shader_param_scalar("i_reflectivity",6e-005);
ei_shader_param_vector("i_reflectedColor",0.16528,0.16528,0.16528);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0);
ei_shader_param_scalar("i_translucenceFocus",8e-005);
ei_shader_link_param("i_transparency","file2","o_outTransparency");
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong1SG");
ei_surface_shader("phong1");
ei_end_material();

ei_shader("maya_place2dTexture", "place2dTexture2");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",1);
ei_shader_param_scalar("i_repeatV",1);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_shader("maya_place2dTexture", "place2dTexture1");
ei_shader_param_int("liq_UserDefinedU",0);
ei_shader_param_int("liq_UserDefinedV",0);
ei_shader_param_vector("i_uvCoord",0,0,0);
ei_shader_param_scalar("i_coverageU",1);
ei_shader_param_scalar("i_coverageV",1);
ei_shader_param_bool("i_mirrorU",0);
ei_shader_param_bool("i_mirrorV",0);
ei_shader_param_scalar("i_noiseU",0);
ei_shader_param_scalar("i_noiseV",0);
ei_shader_param_scalar("i_offsetU",0);
ei_shader_param_scalar("i_offsetV",0);
ei_shader_param_scalar("i_repeatU",1);
ei_shader_param_scalar("i_repeatV",1);
ei_shader_param_scalar("i_rotateFrame",0);
ei_shader_param_scalar("i_rotateUV",0);
ei_shader_param_bool("i_stagger",0);
ei_shader_param_scalar("i_translateFrameU",0);
ei_shader_param_scalar("i_translateFrameV",0);
ei_shader_param_bool("i_wrapU",1);
ei_shader_param_bool("i_wrapV",1);
ei_shader_param_vector("o_outUV",0,0,0);
ei_end_shader();

ei_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check_diamond.tif");
ei_file_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check_diamond.tif.tex", 0);
ei_end_texture();
ei_shader("maya_file", "file2");
ei_shader_param_scalar("i_alphaGain",0.87604);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0.16528);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_texture("i_fileTextureName","E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check_diamond.tif");
ei_shader_param_index("i_filterType",3);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture2","o_outUV");
ei_shader_param_bool("i_fileHasAlpha",0);
ei_shader_param_scalar("o_outAlpha",1);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif");
ei_file_texture("E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif.tex", 0);
ei_end_texture();
ei_shader("maya_file", "file1");
ei_shader_param_scalar("i_alphaGain",1);
ei_shader_param_bool("i_alphaIsLuminance",0);
ei_shader_param_scalar("i_alphaOffset",0);
ei_shader_param_vector("i_colorGain",1,1,1);
ei_shader_param_vector("i_colorOffset",0,0,0);
ei_shader_param_vector("i_defaultColor",0.5,0.5,0.5);
ei_shader_param_texture("i_fileTextureName","E:/dev/Autodesk/maya/myplugin/project/liquid_/test/maya_shader/shader_graph/shader_graph_phong_transparent/texture/check112.tif");
ei_shader_param_index("i_filterType",3);
ei_shader_param_scalar("i_filter",1);
ei_shader_param_scalar("i_filterOffset",0);
ei_shader_param_bool("i_invert",0);
ei_shader_link_param("i_uvCoord","place2dTexture1","o_outUV");
ei_shader_param_bool("i_fileHasAlpha",0);
ei_shader_param_scalar("o_outAlpha",1);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_shader("maya_phong", "phong4");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_link_param("i_color","file1","o_outColor");
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_link_param("i_transparency","file2","o_outColor");
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong4SG");
ei_surface_shader("phong4");
ei_end_material();

ei_shader("maya_phong", "phong5");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_param_vector("i_color",0,1,0);
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0.47108,0.47108,0.47108);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0.47108,0.47108,0.47108);
ei_end_shader();

ei_material("phong5SG");
ei_surface_shader("phong5");
ei_end_material();

ei_shader("maya_phong", "phong6");
ei_shader_param_vector("i_ambientColor",0,0,0);
ei_shader_param_vector("i_color",1,1,0);
ei_shader_param_scalar("i_cosinePower",20);
ei_shader_param_scalar("i_diffuse",0.8);
ei_shader_param_vector("i_incandescence",0,0,0);
ei_shader_param_index("i_matteOpacityMode",2);
ei_shader_param_scalar("i_matteOpacity",1);
ei_shader_param_int("liq_UserDefinedNormal",0);
ei_shader_param_vector("i_normalCamera",1,1,1);
ei_shader_param_vector("i_specularColor",0.5,0.5,0.5);
ei_shader_param_scalar("i_reflectivity",0.5);
ei_shader_param_vector("i_reflectedColor",0,0,0);
ei_shader_param_index("i_reflectionLimit",1);
ei_shader_param_scalar("i_translucence",0);
ei_shader_param_scalar("i_translucenceDepth",0.5);
ei_shader_param_scalar("i_translucenceFocus",0.5);
ei_shader_param_vector("i_transparency",0,0,0);
ei_shader_param_vector("o_outColor",0,0,0);
ei_shader_param_vector("o_outTransparency",0,0,0);
ei_end_shader();

ei_material("phong6SG");
ei_surface_shader("phong6");
ei_end_material();


//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",1,1,1);
ei_shader_param_scalar("intensity",0.25);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   1.62448,37.2169,-9.86499,1);
ei_declare("|pPlane1_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane3_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_declare("|pPlane4_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// maya settings: focal=35.000000, aperture = 36.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|persp|perspShape");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/shader_graph_phong_transparent.perspShape.1.ElvishRender.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(36);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();

// maya settings: focal=35.000000, aperture = 32.000000, aspect=1.333333
//Depth of Field on camera "|persp|perspShape" is turned off in Maya

//############################### camera #
ei_camera("|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/shader_graph_phong_transparent.perspShape.1.ElvishRender.bmp","bmp",1);
//mode=rgb
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(200,150);
ei_clip(1,100000);
ei_end_camera();

// Renderer::exportOneGeometry_Mesh(|pPlane1|pPlaneShape1, 0, 0

//############################### mesh #
//shape full path name=|pPlane1|pPlaneShape1
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane1|pPlaneShape1" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -18.502369, -0.000000, 16.700991 );
ei_tab_add_vector( 18.502369, -0.000000, 16.700991 );
ei_tab_add_vector( -18.502369, 0.000000, -16.700991 );
ei_tab_add_vector( -18.502369, 0.000000, -16.700991 );
ei_tab_add_vector( 18.502369, -0.000000, 16.700991 );
ei_tab_add_vector( 18.502369, 0.000000, -16.700991 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.998191 );
ei_tab_add_vector2( 0.000000, 0.998191 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.997722, 0.998778 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane1|pPlaneShape1
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane2|pPlaneShape2, 0, 0

//############################### mesh #
//shape full path name=|pPlane2|pPlaneShape2
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane2|pPlaneShape2" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -16.678133, -0.000000, 11.541177 );
ei_tab_add_vector( 16.678133, -0.000000, 11.541177 );
ei_tab_add_vector( -16.678133, 0.000000, -11.541177 );
ei_tab_add_vector( -16.678133, 0.000000, -11.541177 );
ei_tab_add_vector( 16.678133, -0.000000, 11.541177 );
ei_tab_add_vector( 16.678133, 0.000000, -11.541177 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.002105, 0.997218 );
ei_tab_add_vector2( 0.002105, 0.997218 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.998025, 0.998085 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane2|pPlaneShape2
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane3|pPlaneShape3, 0, 0

//############################### mesh #
//shape full path name=|pPlane3|pPlaneShape3
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane3|pPlaneShape3" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -28.123953, -0.000000, 19.562426 );
ei_tab_add_vector( 28.123953, -0.000000, 19.562426 );
ei_tab_add_vector( -28.123953, 0.000000, -19.562426 );
ei_tab_add_vector( -28.123953, 0.000000, -19.562426 );
ei_tab_add_vector( 28.123953, -0.000000, 19.562426 );
ei_tab_add_vector( 28.123953, 0.000000, -19.562426 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.695579 );
ei_tab_add_vector2( 0.000000, 0.695579 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.695579 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane3|pPlaneShape3
ei_end_object();

// Renderer::exportOneGeometry_Mesh(|pPlane4|pPlaneShape4, 0, 0

//############################### mesh #
//shape full path name=|pPlane4|pPlaneShape4
//### UV(map1), size=4
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pPlane4|pPlaneShape4" );
{
eiTag tag;
//vertex positions(required), size=6
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -30.707306, -0.000000, 20.895386 );
ei_tab_add_vector( 30.707306, -0.000000, 20.895386 );
ei_tab_add_vector( -30.707306, 0.000000, -20.895386 );
ei_tab_add_vector( -30.707306, 0.000000, -20.895386 );
ei_tab_add_vector( 30.707306, -0.000000, 20.895386 );
ei_tab_add_vector( 30.707306, 0.000000, -20.895386 );
ei_end_tab();
//### N ###(optional)
tag = eiNULL_TAG;
ei_declare("N", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_variable("N", &tag);
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_tab_add_vector( 0.000000, 1.000000, 0.000000 );
ei_end_tab();
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 0.000000, 0.680470 );
ei_tab_add_vector2( 0.000000, 0.680470 );
ei_tab_add_vector2( 1.000000, 0.000000 );
ei_tab_add_vector2( 1.000000, 0.680470 );
ei_end_tab();
//### triangles(required) size=6
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_end_tab();
}//|pPlane4|pPlaneShape4
ei_end_object();
//|persp|perspShape is not lighted.
//--------------------------
//ribNode->name=|persp|perspShape
//ribNode's transform node=|persp
//ribNode->object(0)->getDataPtr()->getFullPathName()=|persp|perspShape
ei_instance("|persp");
//|persp|perspShape's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|persp|perspShape
//shape full path name=|persp|perspShape
ei_element("|persp|perspShape");
ei_transform(0.999701,1.73472e-018,0.0244322,0,   0.0212307,0.494877,-0.868704,0,   -0.0120909,0.868963,0.494729,0,   4.70507,112.27,76.251,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|persp_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1|cameraShape1
//ribNode's transform node=|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1|cameraShape1
ei_instance("|camera1");
//|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1|cameraShape1
//shape full path name=|camera1|cameraShape1
ei_element("|camera1|cameraShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   0,0,20.2125,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane1|pPlaneShape1
//ribNode's transform node=|pPlane1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane1|pPlaneShape1
ei_instance("|pPlane1");
//|pPlane1|pPlaneShape1 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong1SG,
ei_mtl("phong1SG");
//shape name=|pPlane1|pPlaneShape1
//shape full path name=|pPlane1|pPlaneShape1
ei_element("|pPlane1|pPlaneShape1");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -0.642661,-10.3652,8.77257,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane2|pPlaneShape2
//ribNode's transform node=|pPlane2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane2|pPlaneShape2
ei_instance("|pPlane2");
//|pPlane2|pPlaneShape2 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong4SG,
ei_mtl("phong4SG");
//shape name=|pPlane2|pPlaneShape2
//shape full path name=|pPlane2|pPlaneShape2
ei_element("|pPlane2|pPlaneShape2");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -2.92933,4.41664,1.06839,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane3|pPlaneShape3
//ribNode's transform node=|pPlane3
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane3|pPlaneShape3
ei_instance("|pPlane3");
//|pPlane3|pPlaneShape3 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong5SG,
ei_mtl("phong5SG");
//shape name=|pPlane3|pPlaneShape3
//shape full path name=|pPlane3|pPlaneShape3
ei_element("|pPlane3|pPlaneShape3");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -0.229528,-17.4385,16.2523,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane3_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pPlane4|pPlaneShape4
//ribNode's transform node=|pPlane4
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pPlane4|pPlaneShape4
ei_instance("|pPlane4");
//|pPlane4|pPlaneShape4 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: phong6SG,
ei_mtl("phong6SG");
//shape name=|pPlane4|pPlaneShape4
//shape full path name=|pPlane4|pPlaneShape4
ei_element("|pPlane4|pPlaneShape4");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   2.07582,-26.006,27.3123,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pPlane4_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("perspShape");
//camera
ei_add_instance("|camera1");
ei_add_instance("|persp");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
//mesh(s)
ei_add_instance("|pPlane1");
ei_add_instance("|pPlane2");
ei_add_instance("|pPlane3");
ei_add_instance("|pPlane4");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "perspShape", "|persp", "perspShape_option" );
ei_render( "perspShape", "|persp", "perspShape_option" );
ei_end_context();
//------------------------------------------------

