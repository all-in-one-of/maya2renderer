  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(elvishray)
    >2 RendererMgr::install()
      >3 Renderer::Renderer()
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/shader_graph_phong_transparent.perspShape.1.elvishray.bmp)
      >3 OutputMgr::setOutputImagePath(R:/MyDocuments/maya/projects/default/rib/shader_graph_phong_transparent.perspShape.1.elvishray.bmp)
      >3 OutputMgr::add(0)
      >3 OutputMgr::add(1)
      >3 OutputMgr::add(2)
      >3 OutputMgr::init()
        >4 OutputMgr::createOutput(0)
          >5 OutputBase::OutputBase()
          >5 OutputCall::OutputCall()
        >4 OutputMgr::createOutput(1)
          >5 OutputBase::OutputBase()
          >5 OutputESS::OutputESS(R:/MyDocuments/maya/projects/default/rib/shader_graph_phong_transparent.perspShape.1.elvishray.bmp)
        >4 OutputMgr::createOutput(2)
          >5 OutputBase::OutputBase()
          >5 OutputESA::OutputESA(R:/MyDocuments/maya/projects/default/rib/shader_graph_phong_transparent.perspShape.1.elvishray.bmp)
        >4 OutputCall::init()
        >4 OutputESS::init()
        >4 OutputESA::init()
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(shader_graph_phong_transparentFrame1)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tJobScriptMgr::buildShadowJob(thisJob___, 0)
              >7 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,perspShape)
            >6 liqRibTranslator::generateFileName(5,perspShape)
              >7 liqRibTranslator::generateImageName(, job(perspShape)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(1)
          >5 liqRibTranslatorNew::scanScene__(1,0)
            >6 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|pointLight1|pointLightShape1,0)
                >8 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,1,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,1)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,2,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,2)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,3)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,4)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|camera1|cameraShape1,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|camera1|cameraShape1,5)
                >8 liqRibHT::find(|camera1|cameraShape1,|camera1|cameraShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|camera1|cameraShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(camera1,,2)
                  >9 liqRibNode::parseVectorAttributes(camera1,,3)
                  >9 liqRibNode::parseVectorAttributes(camera1,,4)
                  >9 liqRibNode::findShadingGroup(|camera1|cameraShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|camera1|cameraShape1,0)
                    >10 liqRibCameraData::liqRibCameraData(|camera1|cameraShape1)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|pPlane1|pPlaneShape1,6)
                >8 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,7,matrix,,-1)
                >8 liqRibHT::hash(|pPlane2|pPlaneShape2,7)
                >8 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane2,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane2,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane2,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane3|pPlaneShape3,lframe,0,0,8,matrix,,-1)
                >8 liqRibHT::hash(|pPlane3|pPlaneShape3,8)
                >8 liqRibHT::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane3|pPlaneShape3,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane3,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane3,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane3,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane3|pPlaneShape3,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane3|pPlaneShape3,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane3|pPlaneShape3)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane4|pPlaneShape4,lframe,0,0,9,matrix,,-1)
                >8 liqRibHT::hash(|pPlane4|pPlaneShape4,9)
                >8 liqRibHT::find(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane4|pPlaneShape4,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane4,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane4,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane4,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane4|pPlaneShape4,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane4|pPlaneShape4,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane4|pPlaneShape4)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape4)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,10)
            >6 liqRibTranslatorNew::getCameraData(iter__,0)
              >7 liqRibTranslator::getCameraInfo(|persp|perspShape,)
                >8 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                  >9 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
              >7 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
              >7 liqRibTranslator::getCameraTransform(|persp|perspShape,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 Renderer::frameEpilogue(txtList_.size=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 Renderer::doShadows(shadowList_.size=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::isHeroPassReady(perspShape)
          >5 Renderer::HeroPassBegin(perspShape)
          >5 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
            >6 liqRibTranslatorNew::ribPrologue__(perspShape)
              >7 Renderer::ribPrologue_begin(perspShape)
                >8 Renderer::dummyPhongShader()
              >7 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/shader_graph_phong_transparent,yaoyansi,time)
              >7 Renderer::ribPrologue_options(perspShape)
            >6 liqRibTranslatorNew::framePrologue__(1,perspShape)
              >7 Renderer::framePrologue(1,perspShape)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,surfaceShader)
                    >10 ConvertShadingNetwork::canShaderExported(phong1)
                    >10 ConvertShadingNetwork::exportShaderBegin(phong1)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1,surfaceShader)
                      >11 Visitor::initShaderData(phong1,surfaceShader)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong1)
                          >13 ShaderMgr::hasShaderType(phong)
                        >12 ShaderMgr::getValidConnection(phong1)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong4)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture1)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(file2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file2)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong4)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong1)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture2)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                      >11 Visitor::preOutput(phong1)
                      >11 Visitor::outputBegin(phong1)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                        >12 Visitor::outputUpstreamShader(place2dTexture1)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                            >14 Visitor::visitPlace2dTexture(place2dTexture1)
                              >15 OutputHelper::beginRSL(maya_place2dTexture,place2dTexture1)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                        >12 Visitor::addShaderMethodBody(place2dTexture1,,,place2dTexture1.coverage124place2dTexture1.mirrorU124place2dTexture1.mirrorV124place2dTexture1.noiseUV124place2dTexture1.offset124place2dTexture1.repeatUV124place2dTexture1.rotateFrame124place2dTexture1.rotateUV124place2dTexture1.stagger124place2dTexture1.translateFrame124place2dTexture1.wrapU124place2dTexture1.wrapV124place2dTexture1.outUV124)
                        >12 Visitor::outputUpstreamShader(file1)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                            >14 Visitor::visitFile(file1)
                              >15 OutputHelper::beginRSL(maya_file,file1)
                              >15 ShaderMgr::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                              >15 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                              >15 ShaderMgr::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                              >15 ShaderMgr::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                              >15 ShaderMgr::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                              >15 ShaderMgr::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                              >15 ShaderMgr::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                              >15 ShaderMgr::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                              >15 ShaderMgr::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                              >15 ShaderMgr::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                              >15 ShaderMgr::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                              >15 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                              >15 ShaderMgr::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                              >15 ShaderMgr::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                    >18 ShaderMgr::hasShaderType(phong)
                              >15 ShaderMgr::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(file1, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong4)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                            >14 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 Visitor::addShaderMethodBody(file1,place2dTexture1.outUV124,file1.uvCoord124,file1.outColor124)
                        >12 Visitor::outputUpstreamShader(place2dTexture2)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                            >14 Visitor::visitPlace2dTexture(place2dTexture2)
                              >15 OutputHelper::beginRSL(maya_place2dTexture,place2dTexture2)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.coverageU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.coverageV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.noiseU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.noiseV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.offsetU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.offsetV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.repeatU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.repeatV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(place2dTexture2)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,coverage,place2dTexture2.coverage, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,coverage,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorU,place2dTexture2.mirrorU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorV,place2dTexture2.mirrorV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,noiseUV,place2dTexture2.noiseUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,noiseUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,offset,place2dTexture2.offset, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,offset,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,repeatUV,place2dTexture2.repeatUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,repeatUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateFrame,place2dTexture2.rotateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,rotateFrame,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateUV,place2dTexture2.rotateUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,rotateUV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,stagger,place2dTexture2.stagger, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,stagger,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,translateFrame,place2dTexture2.translateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,translateFrame,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapU,place2dTexture2.wrapU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,wrapU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapV,place2dTexture2.wrapV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,wrapV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,outUV,float,2,)
                        >12 Visitor::addShaderMethodBody(place2dTexture2,,,place2dTexture2.coverage124place2dTexture2.mirrorU124place2dTexture2.mirrorV124place2dTexture2.noiseUV124place2dTexture2.offset124place2dTexture2.repeatUV124place2dTexture2.rotateFrame124place2dTexture2.rotateUV124place2dTexture2.stagger124place2dTexture2.translateFrame124place2dTexture2.wrapU124place2dTexture2.wrapV124place2dTexture2.outUV124)
                        >12 Visitor::outputUpstreamShader(file2)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                            >14 Visitor::visitFile(file2)
                              >15 OutputHelper::beginRSL(maya_file,file2)
                              >15 ShaderMgr::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                              >15 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                              >15 ShaderMgr::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                              >15 ShaderMgr::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                              >15 ShaderMgr::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                              >15 ShaderMgr::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                              >15 ShaderMgr::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                              >15 ShaderMgr::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                              >15 ShaderMgr::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                              >15 ShaderMgr::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                              >15 ShaderMgr::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                              >15 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                              >15 ShaderMgr::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                              >15 ShaderMgr::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                    >18 ShaderMgr::hasShaderType(phong)
                              >15 ShaderMgr::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong1)
                                    >18 ShaderMgr::hasShaderType(phong)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(file2, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(file2, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::addNodeInputVariable(file2.uvCoord, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture2)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong4)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(file2,outColor,file2.outColor, outputVars)
                            >14 Visitor::addShaderMethodVariavles(file2,outColor,color,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong1)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(file2,outTransparency,file2.outTransparency, outputVars)
                            >14 Visitor::addShaderMethodVariavles(file2,outTransparency,color,-1,)
                        >12 Visitor::addShaderMethodBody(file2,place2dTexture2.outUV124,file2.uvCoord124,file2.outColor124file2.outTransparency124)
                        >12 Visitor::outputUpstreamShader(phong1)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                            >14 Visitor::visitPhong(phong1)
                              >15 OutputHelper::beginRSL(maya_phong,phong1)
                              >15 ShaderMgr::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                              >15 ShaderMgr::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                              >15 ShaderMgr::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                              >15 ShaderMgr::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                              >15 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                              >15 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                              >15 OutputHelper::add_liq_UserDefinedNormal(phong1)
                              >15 ShaderMgr::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                              >15 ShaderMgr::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                              >15 ShaderMgr::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                              >15 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                              >15 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                              >15 ShaderMgr::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                              >15 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                              >15 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                              >15 ShaderMgr::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                              >15 ShaderMgr::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(phong1)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(phong1, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeInputVariable(phong1.color, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::getValidConnection(file1)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeInputVariable(phong1.transparency, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::getValidConnection(file2)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                        >12 Visitor::addShaderMethodBody(phong1,file1.outColor124file2.outTransparency124,phong1.color124phong1.transparency124,)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                      >11 Visitor::outputEnd()
                      >11 Visitor::postOutput()
                    >10 ConvertShadingNetwork::exportShaderEnd(phong1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                    >10 Visitor::outputShadingGroup(phong1SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong4SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,surfaceShader)
                    >10 ConvertShadingNetwork::canShaderExported(phong4)
                    >10 ConvertShadingNetwork::exportShaderBegin(phong4)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(phong4,surfaceShader)
                      >11 Visitor::initShaderData(phong4,surfaceShader)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong4, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong4)
                          >13 ShaderMgr::hasShaderType(phong)
                        >12 ShaderMgr::getValidConnection(phong4)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong4)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                          >13 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture1)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file1)
                                >16 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(file2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file2)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong4)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong1)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture2)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::nodeIsConvertible(file2)
                                >16 ShaderMgr::hasShaderType(file)
                      >11 Visitor::preOutput(phong4)
                      >11 Visitor::outputBegin(phong4)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                        >12 Visitor::outputUpstreamShader(place2dTexture1)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                            >14 Visitor::visitPlace2dTexture(place2dTexture1)
                              >15 OutputHelper::beginRSL(maya_place2dTexture,place2dTexture1)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                        >12 Visitor::addShaderMethodBody(place2dTexture1,,,place2dTexture1.coverage124place2dTexture1.mirrorU124place2dTexture1.mirrorV124place2dTexture1.noiseUV124place2dTexture1.offset124place2dTexture1.repeatUV124place2dTexture1.rotateFrame124place2dTexture1.rotateUV124place2dTexture1.stagger124place2dTexture1.translateFrame124place2dTexture1.wrapU124place2dTexture1.wrapV124place2dTexture1.outUV124)
                        >12 Visitor::outputUpstreamShader(file1)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                            >14 Visitor::visitFile(file1)
                              >15 OutputHelper::beginRSL(maya_file,file1)
                              >15 ShaderMgr::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                              >15 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                              >15 ShaderMgr::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                              >15 ShaderMgr::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                              >15 ShaderMgr::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                              >15 ShaderMgr::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                              >15 ShaderMgr::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                              >15 ShaderMgr::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                              >15 ShaderMgr::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                              >15 ShaderMgr::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                              >15 ShaderMgr::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                              >15 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                              >15 ShaderMgr::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                              >15 ShaderMgr::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                    >18 ShaderMgr::hasShaderType(phong)
                              >15 ShaderMgr::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(file1, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong4)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                            >14 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 Visitor::addShaderMethodBody(file1,place2dTexture1.outUV124,file1.uvCoord124,file1.outColor124)
                        >12 Visitor::outputUpstreamShader(place2dTexture2)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                            >14 Visitor::visitPlace2dTexture(place2dTexture2)
                              >15 OutputHelper::beginRSL(maya_place2dTexture,place2dTexture2)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.coverageU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.coverageV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.noiseU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.noiseV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.offsetU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.offsetV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.repeatU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.repeatV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(place2dTexture2)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,coverage,place2dTexture2.coverage, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,coverage,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorU,place2dTexture2.mirrorU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorV,place2dTexture2.mirrorV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,mirrorV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,noiseUV,place2dTexture2.noiseUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,noiseUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,offset,place2dTexture2.offset, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,offset,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,repeatUV,place2dTexture2.repeatUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,repeatUV,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateFrame,place2dTexture2.rotateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,rotateFrame,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateUV,place2dTexture2.rotateUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,rotateUV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,stagger,place2dTexture2.stagger, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,stagger,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,translateFrame,place2dTexture2.translateFrame, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,translateFrame,float,2,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapU,place2dTexture2.wrapU, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,wrapU,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapV,place2dTexture2.wrapV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,wrapV,float,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                            >14 Visitor::addShaderMethodVariavles(place2dTexture2,outUV,float,2,)
                        >12 Visitor::addShaderMethodBody(place2dTexture2,,,place2dTexture2.coverage124place2dTexture2.mirrorU124place2dTexture2.mirrorV124place2dTexture2.noiseUV124place2dTexture2.offset124place2dTexture2.repeatUV124place2dTexture2.rotateFrame124place2dTexture2.rotateUV124place2dTexture2.stagger124place2dTexture2.translateFrame124place2dTexture2.wrapU124place2dTexture2.wrapV124place2dTexture2.outUV124)
                        >12 Visitor::outputUpstreamShader(file2)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                            >14 Visitor::visitFile(file2)
                              >15 OutputHelper::beginRSL(maya_file,file2)
                              >15 ShaderMgr::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                              >15 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                              >15 ShaderMgr::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                              >15 ShaderMgr::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                              >15 ShaderMgr::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                              >15 ShaderMgr::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                              >15 ShaderMgr::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                              >15 ShaderMgr::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                              >15 ShaderMgr::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                              >15 ShaderMgr::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                              >15 ShaderMgr::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                              >15 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                              >15 ShaderMgr::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                              >15 ShaderMgr::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                    >18 ShaderMgr::hasShaderType(phong)
                              >15 ShaderMgr::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong1)
                                    >18 ShaderMgr::hasShaderType(phong)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(file2)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(file2, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(file2, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGainB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGainB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffsetB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffsetB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filter)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.invert)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.uCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.uCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.vCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.vCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ConvertShadingNetwork::addNodeInputVariable(file2.uvCoord, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                              >15 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::getValidConnection(place2dTexture2)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong4)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(file2,outColor,file2.outColor, outputVars)
                            >14 Visitor::addShaderMethodVariavles(file2,outColor,color,-1,)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong1)
                              >15 ShaderMgr::hasShaderType(phong)
                          >13 ConvertShadingNetwork::addNodeOutputVariable(file2,outTransparency,file2.outTransparency, outputVars)
                            >14 Visitor::addShaderMethodVariavles(file2,outTransparency,color,-1,)
                        >12 Visitor::addShaderMethodBody(file2,place2dTexture2.outUV124,file2.uvCoord124,file2.outColor124file2.outTransparency124)
                        >12 Visitor::outputUpstreamShader(phong4)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(phong4,phong)
                            >14 Visitor::visitPhong(phong4)
                              >15 OutputHelper::beginRSL(maya_phong,phong4)
                              >15 ShaderMgr::convertibleConnection(phong4.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                              >15 ShaderMgr::convertibleConnection(phong4.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(phong4.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                              >15 ShaderMgr::convertibleConnection(phong4.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                              >15 ShaderMgr::convertibleConnection(phong4.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                              >15 ShaderMgr::convertibleConnection(phong4.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                              >15 ShaderMgr::convertibleConnection(phong4.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                              >15 OutputHelper::add_liq_UserDefinedNormal(phong4)
                              >15 ShaderMgr::convertibleConnection(phong4.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                              >15 ShaderMgr::convertibleConnection(phong4.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                              >15 ShaderMgr::convertibleConnection(phong4.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                              >15 ShaderMgr::convertibleConnection(phong4.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                              >15 ShaderMgr::convertibleConnection(phong4.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                              >15 ShaderMgr::convertibleConnection(phong4.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                              >15 ShaderMgr::convertibleConnection(phong4.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                              >15 ShaderMgr::convertibleConnection(phong4.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                              >15 ShaderMgr::convertibleConnection(phong4.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file2)
                                    >18 ShaderMgr::hasShaderType(file)
                              >15 ShaderMgr::convertibleConnection(phong4.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                              >15 ShaderMgr::convertibleConnection(phong4.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(phong4)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(phong4, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(phong4, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeInputVariable(phong4.color, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::getValidConnection(file1)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::addNodeInputVariable(phong4.transparency, inputSrc, inputDes)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::getValidConnection(file2)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.specularColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.specularColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.specularColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                        >12 Visitor::addShaderMethodBody(phong4,file1.outColor124file2.outColor124,phong4.color124phong4.transparency124,)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                      >11 Visitor::outputEnd()
                      >11 Visitor::postOutput()
                    >10 ConvertShadingNetwork::exportShaderEnd(phong4)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong4SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong4SG)
                    >10 Visitor::outputShadingGroup(phong4SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong4SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong5SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,surfaceShader)
                    >10 ConvertShadingNetwork::canShaderExported(phong5)
                    >10 ConvertShadingNetwork::exportShaderBegin(phong5)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(phong5,surfaceShader)
                      >11 Visitor::initShaderData(phong5,surfaceShader)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong5, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong5)
                          >13 ShaderMgr::hasShaderType(phong)
                        >12 ShaderMgr::getValidConnection(phong5)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                      >11 Visitor::preOutput(phong5)
                      >11 Visitor::outputBegin(phong5)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                        >12 Visitor::outputUpstreamShader(phong5)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(phong5,phong)
                            >14 Visitor::visitPhong(phong5)
                              >15 OutputHelper::beginRSL(maya_phong,phong5)
                              >15 ShaderMgr::convertibleConnection(phong5.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                              >15 ShaderMgr::convertibleConnection(phong5.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                              >15 ShaderMgr::convertibleConnection(phong5.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                              >15 ShaderMgr::convertibleConnection(phong5.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                              >15 ShaderMgr::convertibleConnection(phong5.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                              >15 ShaderMgr::convertibleConnection(phong5.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                              >15 ShaderMgr::convertibleConnection(phong5.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                              >15 OutputHelper::add_liq_UserDefinedNormal(phong5)
                              >15 ShaderMgr::convertibleConnection(phong5.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                              >15 ShaderMgr::convertibleConnection(phong5.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                              >15 ShaderMgr::convertibleConnection(phong5.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                              >15 ShaderMgr::convertibleConnection(phong5.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                              >15 ShaderMgr::convertibleConnection(phong5.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                              >15 ShaderMgr::convertibleConnection(phong5.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                              >15 ShaderMgr::convertibleConnection(phong5.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                              >15 ShaderMgr::convertibleConnection(phong5.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                              >15 ShaderMgr::convertibleConnection(phong5.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                              >15 ShaderMgr::convertibleConnection(phong5.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                              >15 ShaderMgr::convertibleConnection(phong5.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(phong5)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(phong5, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(phong5, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.specularColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.specularColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.specularColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.specularColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.specularColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.specularColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                        >12 Visitor::addShaderMethodBody(phong5,,,)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                      >11 Visitor::outputEnd()
                      >11 Visitor::postOutput()
                    >10 ConvertShadingNetwork::exportShaderEnd(phong5)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong5SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong5SG)
                    >10 Visitor::outputShadingGroup(phong5SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong5SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong6SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong6SG,surfaceShader)
                    >10 ConvertShadingNetwork::canShaderExported(phong6)
                    >10 ConvertShadingNetwork::exportShaderBegin(phong6)
                    >10 ConvertShadingNetwork::convertShadingNetworkToRSL(phong6,surfaceShader)
                      >11 Visitor::initShaderData(phong6,surfaceShader)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong6, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong6)
                          >13 ShaderMgr::hasShaderType(phong)
                        >12 ShaderMgr::getValidConnection(phong6)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong6SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparency)
                      >11 Visitor::preOutput(phong6)
                      >11 Visitor::outputBegin(phong6)
                      >11 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                        >12 Visitor::outputUpstreamShader(phong6)
                          >13 ShaderOutputVisitor::_outputUpstreamShader(phong6,phong)
                            >14 Visitor::visitPhong(phong6)
                              >15 OutputHelper::beginRSL(maya_phong,phong6)
                              >15 ShaderMgr::convertibleConnection(phong6.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColor)
                              >15 ShaderMgr::convertibleConnection(phong6.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.color)
                              >15 ShaderMgr::convertibleConnection(phong6.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.cosinePower)
                              >15 ShaderMgr::convertibleConnection(phong6.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.diffuse)
                              >15 ShaderMgr::convertibleConnection(phong6.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.incandescence)
                              >15 ShaderMgr::convertibleConnection(phong6.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacityMode)
                              >15 ShaderMgr::convertibleConnection(phong6.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacity)
                              >15 OutputHelper::add_liq_UserDefinedNormal(phong6)
                              >15 ShaderMgr::convertibleConnection(phong6.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.normalCamera)
                              >15 ShaderMgr::convertibleConnection(phong6.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.specularColor)
                              >15 ShaderMgr::convertibleConnection(phong6.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.reflectivity)
                              >15 ShaderMgr::convertibleConnection(phong6.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColor)
                              >15 ShaderMgr::convertibleConnection(phong6.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.reflectionLimit)
                              >15 ShaderMgr::convertibleConnection(phong6.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.translucence)
                              >15 ShaderMgr::convertibleConnection(phong6.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceDepth)
                              >15 ShaderMgr::convertibleConnection(phong6.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceFocus)
                              >15 ShaderMgr::convertibleConnection(phong6.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.transparency)
                              >15 ShaderMgr::convertibleConnection(phong6.outColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong6SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                              >15 ShaderMgr::convertibleConnection(phong6.outTransparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong6.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparency)
                              >15 OutputHelper::endRSL()
                        >12 ShaderMgr::getValidConnection(phong6)
                        >12 ConvertShadingNetwork::decrementDownstreamConnections(phong6, nodes, numConnections, validConnections)
                        >12 ConvertShadingNetwork::getNodeVariables(phong6, validConnections,  inputSrc, inputDes, outputSrc)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.colorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.colorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.colorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.colorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.colorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.colorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.color)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.transparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.transparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.transparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.transparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.transparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.transparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.transparency)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.ambientColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.ambientColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.ambientColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.incandescenceR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.incandescenceR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.incandescenceG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.incandescenceG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.incandescenceB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.incandescenceB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.normalCameraX)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.normalCameraX)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.normalCameraY)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.normalCameraY)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.normalCameraZ)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.normalCameraZ)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.normalCamera)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.normalCamera)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.translucence)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.translucence)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.translucenceDepth)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceDepth)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.translucenceFocus)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceFocus)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.cosinePower)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.cosinePower)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.specularColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.specularColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.specularColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.specularColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.specularColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.specularColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.specularColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.specularColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.reflectivity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.reflectivity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColor)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacityMode)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacityMode)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacity)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacity)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.reflectionLimit)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.reflectionLimit)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.outColorR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.outColorR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.outColorG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.outColorG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.outColorB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.outColorB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(phong6SG)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.outTransparencyR)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparencyR)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.outTransparencyG)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparencyG)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.outTransparencyB)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparencyB)
                          >13 ConvertShadingNetwork::convertibleConnection(phong6.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparency)
                        >12 Visitor::addShaderMethodBody(phong6,,,)
                      >11 ConvertShadingNetwork::outputShaderMethod()
                        >12 Visitor::outputShaderMethod()
                      >11 Visitor::outputEnd()
                      >11 Visitor::postOutput()
                    >10 ConvertShadingNetwork::exportShaderEnd(phong6)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong6SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong6SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong6SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong6SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong6SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong6SG)
                    >10 Visitor::outputShadingGroup(phong6SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong6SG)
                >8  ConvertShadingNetwork::afterExport()
            >6 liqRibTranslatorNew::worldPrologue__(perspShape)
              >7 Renderer::worldPrologue(perspShape)
            >6 liqRibTranslatorNew::lightBlock__(perspShape)
              >7 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                      >11 liqRibData::getFullPathName()
                    >10 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                        >12 addLightGroupForLight(|pointLight1|pointLightShape1)
              >7 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibTranslatorNew::coordSysBlock__(perspShape)
              >7 Renderer::coordSysBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock__(perspShape)
              >7 liqRibTranslatorNew::objectBlock_data(perspShape)
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|camera1|cameraShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|camera1|cameraShape1,perspShape)
                    >10 Renderer::_writeObject(|camera1|cameraShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,perspShape,0)
                        >12 liqRibCameraData::write(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|camera1|cameraShape1,R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeCameraData.cpp::_write_camera(|camera1|cameraShape1,perspShape)
                              >15 liqRibHT::find(|camera1|cameraShape1,|camera1|cameraShape1,0)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                              >15 Renderer::cameraOutput(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane1|pPlaneShape1,perspShape)
                              >15 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                              >15 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,perspShape)
                    >10 Renderer::_writeObject(|pPlane2|pPlaneShape2,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane2|pPlaneShape2,R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane2|pPlaneShape2,perspShape)
                              >15 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                              >15 _exportVertexFromNodePlug(|pPlane2|pPlaneShape2,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane3|pPlaneShape3,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane3|pPlaneShape3,perspShape)
                    >10 Renderer::_writeObject(|pPlane3|pPlaneShape3,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane3|pPlaneShape3,R:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane3|pPlaneShape3,perspShape)
                              >15 liqRibHT::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                              >15 _exportVertexFromNodePlug(|pPlane3|pPlaneShape3,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane4|pPlaneShape4,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane4|pPlaneShape4,perspShape)
                    >10 Renderer::_writeObject(|pPlane4|pPlaneShape4,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane4|pPlaneShape4,R:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane4|pPlaneShape4,perspShape)
                              >15 liqRibHT::find(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
                              >15 _exportVertexFromNodePlug(|pPlane4|pPlaneShape4,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::objectBlock_reference(perspShape)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|camera1|cameraShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|camera1|cameraShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|camera1|cameraShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|camera1|cameraShape1)
                    >10 Renderer::exportLightLinks(perspShape,|camera1|cameraShape1,lightedByWhichLightShapes.size=0)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|camera1|cameraShape1,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|camera1|cameraShape1,v=0,s=0,c=0,,|camera1|cameraShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|camera1|cameraShape1,|camera1|cameraShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|camera1|cameraShape1)
                  >9 Renderer::exportOneObject_reference(|camera1|cameraShape1,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|camera1|cameraShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                  >9 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane2|pPlaneShape2)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                  >9 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane3|pPlaneShape3,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane3|pPlaneShape3,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane3|pPlaneShape3,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane3|pPlaneShape3)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane3|pPlaneShape3,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane3|pPlaneShape3,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane3|pPlaneShape3,v=0,s=0,c=0,,|pPlane3|pPlaneShape3,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane3|pPlaneShape3)
                  >9 Renderer::exportOneObject_reference(|pPlane3|pPlaneShape3,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane3|pPlaneShape3,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane4|pPlaneShape4,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane4|pPlaneShape4,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane4|pPlaneShape4,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane4|pPlaneShape4)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane4|pPlaneShape4,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane4|pPlaneShape4,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane4|pPlaneShape4,v=0,s=0,c=0,,|pPlane4|pPlaneShape4,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane4|pPlaneShape4)
                  >9 Renderer::exportOneObject_reference(|pPlane4|pPlaneShape4,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane4|pPlaneShape4,perspShape)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(1)
              >7 Renderer::frameEpilogue(1)
            >6 liqRibTranslatorNew::ribEpilogue__(perspShape)
              >7 Renderer::ribPrologue_end(perspShape)
                >8 Renderer::cookInstanceGroup()
                >8 Renderer::render()
                  >9 Renderer::renderPreview(768,576,0,0,perspShape,perspShape,perspShape_option)
                    >10 Renderer::_renderPreview(768,576,0,0,perspShape,|persp,perspShape_option)
          >5 Renderer::HeroPassEnd(perspShape)
        >4 liqRenderScript::addJob(job.title=shader_graph_phong_transparentFrame1,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
      >3 OutputMgr::uninit()
        >4 OutputCall::~OutputCall()
        >4 OutputBase::~OutputBase()
        >4 OutputESS::~OutputESS()
        >4 OutputBase::~OutputBase()
        >4 OutputESA::~OutputESA()
        >4 OutputBase::~OutputBase()
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
      >3 Renderer::~Renderer()
    >2 RendererMgr::unsetFactory()
