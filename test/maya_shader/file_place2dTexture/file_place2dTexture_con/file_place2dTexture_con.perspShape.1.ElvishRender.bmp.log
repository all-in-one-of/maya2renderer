  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(ElvishRender)
    >2 RendererMgr::install()
      >3 Renderer::Renderer()
      >3 ShaderMgr::setValidConnection()
      >3 ShaderMgr::getShaderConnectionMap()
      >3 RNodeVisitorMgr::setValidConnection(...)
        >4 TestLightNodeVisitor::setValidConnection(...)
        >4 ArchitecturalNodeVisitor::setValidConnection(...)
        >4 CheckerNodeVisitor::setValidConnection(...)
        >4 Checker2NodeVisitor::setValidConnection(...)
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/file_place2dTexture_con.perspShape.1.ElvishRender.bmp)
      >3 OutputMgr::setOutputImagePath(R:/MyDocuments/maya/projects/default/rib/file_place2dTexture_con.perspShape.1.ElvishRender.bmp)
      >3 OutputMgr::add(0)
      >3 OutputMgr::add(1)
      >3 OutputMgr::add(2)
      >3 OutputMgr::init()
        >4 OutputMgr::createOutput(0)
          >5 OutputBase::OutputBase()
          >5 OutputCall::OutputCall()
        >4 OutputMgr::createOutput(1)
          >5 OutputBase::OutputBase()
          >5 OutputESS::OutputESS(R:/MyDocuments/maya/projects/default/rib/file_place2dTexture_con.perspShape.1.ElvishRender.bmp)
        >4 OutputMgr::createOutput(2)
          >5 OutputBase::OutputBase()
          >5 OutputESA::OutputESA(R:/MyDocuments/maya/projects/default/rib/file_place2dTexture_con.perspShape.1.ElvishRender.bmp)
        >4 OutputCall::init()
        >4 OutputESS::init()
        >4 OutputESA::init()
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(file_place2dTexture_conFrame1)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tLightMgr::buildShadowJob(thisJob___, 0)
              >7 tLightMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,perspShape)
            >6 liqRibTranslator::generateFileName(5,perspShape)
              >7 liqRibTranslator::generateImageName(, job(perspShape)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(1)
          >5 liqRibTranslatorNew::scanScene__(1,0)
            >6 tLightMgr::scanScene(1,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|pointLight1|pointLightShape1,0)
                >8 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight1,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
              >7 liqRibHT::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
                >8 liqRibHT::hash(|pointLight2|pointLightShape2,1)
                >8 liqRibHT::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(pointLight2,,2)
                  >9 liqRibNode::parseVectorAttributes(pointLight2,,3)
                  >9 liqRibNode::parseVectorAttributes(pointLight2,,4)
                  >9 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                    >10 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,2,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,2)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
                    >10 liqRibCameraData::liqRibCameraData(|persp|perspShape)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,3)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,4)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,5)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|pPlane1|pPlaneShape1,6)
                >8 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,7,matrix,,-1)
                >8 liqRibHT::hash(|pPlane2|pPlaneShape2,7)
                >8 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane2,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane2,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane2,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,8)
            >6 tCameraMgr::getCameraData(perspShape,0)
              >7 tCameraMgr::getCameraInfo(|persp|perspShape,)
                >8 tCameraMgr::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                  >9 tCameraMgr::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
              >7 tCameraMgr::getCameraFilmOffset(|persp|perspShape,)
              >7 tCameraMgr::getCameraTransform(|persp|perspShape,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 Renderer::frameEpilogue(txtList_.size=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 Renderer::doShadows(shadowList_.size=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::isHeroPassReady(perspShape)
          >5 Renderer::HeroPassBegin(perspShape)
          >5 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
            >6 liqRibTranslatorNew::ribPrologue__(perspShape)
              >7 Renderer::ribPrologue_begin(perspShape)
                >8 Renderer::dummyPhongShader()
              >7 Renderer::ribPrologue_comment(2.3.5,R:/MyDocuments/maya/projects/default/file_place2dTexture_con,yaoyansi,time)
              >7 Renderer::ribPrologue_options(perspShape)
            >6 liqRibTranslatorNew::framePrologue__(1,perspShape)
              >7 Renderer::framePrologue(1,perspShape)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                  >9 ShadingNetworkUser::beforeExport_user()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(lambert2SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert2SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert2SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(lambert3)
                          >13 ConvertShadingNetwork::canShaderExported(lambert3)
                          >13 ConvertShadingNetwork::exportShaderBegin(lambert3)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert3)
                            >14 Visitor::initShaderData(lambert3)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert3, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(lambert3, ret)
                                >16 DagMgr::begin(lambert3)
                                  >17 DagMgr::pushInputPlugs(lambert3)
                                    >18 ShaderMgr::getValidConnection(lambert3)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                        >20 ShaderMgr::hasShaderType(checker)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                                >16 DagMgr::pushInputPlugs(checker1)
                                  >17 ShaderMgr::getValidConnection(checker1)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.alphaGain)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.alphaGain)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.alphaIsLuminance)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.alphaOffset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.alphaOffset)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.color1R)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.color1R)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.color1G)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.color1G)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.color1B)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.color1B)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.color1)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.color1)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.color2R)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.color2R)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.color2G)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.color2G)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.color2B)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.color2B)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.color2)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.color2)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.colorGainR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainR)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.colorGainG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainG)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.colorGainB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainB)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.colorGain)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.colorGain)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetR)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetG)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetB)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.colorOffset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffset)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.contrast)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.contrast)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.defaultColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.filter)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.filter)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.filterOffset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.filterOffset)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.invert)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.invert)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.uCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.uCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.vCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.vCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.uvCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.uvCoord)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                      >19 ShaderMgr::hasShaderType(place2dTexture)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.outAlpha)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.outAlpha)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(checker1.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(checker1.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                >16 DagMgr::pushInputPlugs(place2dTexture2)
                                  >17 ShaderMgr::getValidConnection(place2dTexture2)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(pPlane2)
                                      >19 ShaderMgr::hasShaderType(transform)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(pPlane2)
                                      >19 ShaderMgr::hasShaderType(transform)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(unitConversion1)
                                      >19 ShaderMgr::hasShaderType(unitConversion)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(unitConversion2)
                                      >19 ShaderMgr::hasShaderType(unitConversion)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                      >19 ShaderMgr::hasShaderType(checker)
                                >16 DagMgr::isVisited(place2dTexture2)
                                >16 DagMgr::visit(place2dTexture2)
                                >16 DagMgr::isVisited(checker1)
                                >16 DagMgr::visit(checker1)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(lambert3)
                            >14 Visitor::outputBegin(lambert3)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(place2dTexture2)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                                  >17 Visitor::visitPlace2dTexture(place2dTexture2)
                                    >18 OutputHelper::beginRSL(maya_place2dTexture,place2dTexture2)
                                    >18 OutputHelper::addRSLVariable(vector,i_uvCoord,uvCoord,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.uvCoord)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                                    >18 OutputHelper::addRSLVariable(float,i_coverageU,coverageU,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.coverageU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(pPlane2)
                                            >22 ShaderMgr::hasShaderType(transform)
                                    >18 OutputHelper::addRSLVariable(float,i_coverageV,coverageV,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.coverageV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(pPlane2)
                                            >22 ShaderMgr::hasShaderType(transform)
                                    >18 OutputHelper::addRSLVariable(bool,i_mirrorU,mirrorU,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                    >18 OutputHelper::addRSLVariable(bool,i_mirrorV,mirrorV,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                    >18 OutputHelper::addRSLVariable(float,i_noiseU,noiseU,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.noiseU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                                    >18 OutputHelper::addRSLVariable(float,i_noiseV,noiseV,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.noiseV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                                    >18 OutputHelper::addRSLVariable(float,i_offsetU,offsetU,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.offsetU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                                    >18 OutputHelper::addRSLVariable(float,i_offsetV,offsetV,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.offsetV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                                    >18 OutputHelper::addRSLVariable(float,i_repeatU,repeatU,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.repeatU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                                    >18 OutputHelper::addRSLVariable(float,i_repeatV,repeatV,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.repeatV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                                    >18 OutputHelper::addRSLVariable(float,i_rotateFrame,rotateFrame,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(unitConversion1)
                                            >22 ShaderMgr::hasShaderType(unitConversion)
                                    >18 OutputHelper::addRSLVariable(float,i_rotateUV,rotateUV,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(unitConversion2)
                                            >22 ShaderMgr::hasShaderType(unitConversion)
                                    >18 OutputHelper::addRSLVariable(bool,i_stagger,stagger,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                    >18 OutputHelper::addRSLVariable(float,i_translateFrameU,translateFrameU,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                                    >18 OutputHelper::addRSLVariable(float,i_translateFrameV,translateFrameV,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                                    >18 OutputHelper::addRSLVariable(bool,i_wrapU,wrapU,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                    >18 OutputHelper::addRSLVariable(bool,i_wrapV,wrapV,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                    >18 OutputHelper::addRSLVariable(vector,o_outUV,outUV,place2dTexture2)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                            >22 ShaderMgr::hasShaderType(checker)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(place2dTexture2)
                              >15 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.vCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.vCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(pPlane2)
                                    >18 ShaderMgr::hasShaderType(transform)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(pPlane2)
                                    >18 ShaderMgr::hasShaderType(transform)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(unitConversion1)
                                    >18 ShaderMgr::hasShaderType(unitConversion)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(unitConversion2)
                                    >18 ShaderMgr::hasShaderType(unitConversion)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                    >18 ShaderMgr::hasShaderType(checker)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture2,outUV,float,2,)
                              >15 Visitor::addShaderMethodBody(place2dTexture2,,,place2dTexture2.outUV124)
                              >15 Visitor::outputUpstreamShader(checker1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(checker1,checker)
                                  >17 Visitor::visitChecker(checker1)
                                    >18 OutputHelper::beginRSL(maya_checker,checker1)
                                    >18 OutputHelper::addRSLVariable(float,i_alphaGain,alphaGain,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.alphaGain)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.alphaGain)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.alphaGain)
                                    >18 OutputHelper::addRSLVariable(bool,i_alphaIsLuminance,alphaIsLuminance,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.alphaIsLuminance)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.alphaIsLuminance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.alphaIsLuminance)
                                    >18 OutputHelper::addRSLVariable(float,i_alphaOffset,alphaOffset,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.alphaOffset)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.alphaOffset)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.alphaOffset)
                                    >18 OutputHelper::addRSLVariable(color,i_color1,color1,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.color1)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.color1)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.color1)
                                    >18 OutputHelper::addRSLVariable(color,i_color2,color2,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.color2)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.color2)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.color2)
                                    >18 OutputHelper::addRSLVariable(color,i_colorGain,colorGain,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.colorGain)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.colorGain)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.colorGain)
                                    >18 OutputHelper::addRSLVariable(color,i_colorOffset,colorOffset,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.colorOffset)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.colorOffset)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffset)
                                    >18 OutputHelper::addRSLVariable(float,i_contrast,contrast,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.contrast)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.contrast)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.contrast)
                                    >18 OutputHelper::addRSLVariable(color,i_defaultColor,defaultColor,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.defaultColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.defaultColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColor)
                                    >18 OutputHelper::addRSLVariable(float,i_filter,filter,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.filter)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.filter)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.filter)
                                    >18 OutputHelper::addRSLVariable(float,i_filterOffset,filterOffset,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.filterOffset)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.filterOffset)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.filterOffset)
                                    >18 OutputHelper::addRSLVariable(bool,i_invert,invert,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.invert)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.invert)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.invert)
                                    >18 OutputHelper::addRSLVariable(vector,i_uvCoord,uvCoord,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.uvCoord)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.uvCoord)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.uvCoord)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                            >22 ShaderMgr::hasShaderType(place2dTexture)
                                    >18 OutputHelper::addRSLVariable(float,o_outAlpha,outAlpha,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.outAlpha)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.outAlpha)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.outAlpha)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,checker1)
                                      >19 ShaderMgr::convertibleConnection(checker1.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(checker1.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(checker1.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(checker1)
                              >15 ConvertShadingNetwork::getNodeVariables(checker1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.color1R)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.color1R)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.color1G)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.color1G)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.color1B)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.color1B)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.color1)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.color1)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.color2R)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.color2R)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.color2G)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.color2G)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.color2B)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.color2B)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.color2)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.color2)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.colorGainR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainR)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.colorGainG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainG)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.colorGainB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.colorGainB)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetR)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetG)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.colorOffsetB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffsetB)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.contrast)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.contrast)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.defaultColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.uCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.uCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.vCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.vCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                >16 ConvertShadingNetwork::addNodeInputVariable(checker1.uvCoord, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                  >17 ShaderMgr::getValidConnection(place2dTexture2)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(checker1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(checker1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(checker1,outColor,checker1.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(checker1,outColor,color,-1,)
                              >15 Visitor::addShaderMethodBody(checker1,place2dTexture2.outUV124,checker1.uvCoord124,checker1.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert3)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert3,lambert)
                                  >17 Visitor::visitLambert(lambert3)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert3)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                            >22 ShaderMgr::hasShaderType(checker)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert3)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert3)
                                      >19 ShaderMgr::convertibleConnection(lambert3.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert3)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert3, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                    >18 ShaderMgr::hasShaderType(checker)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert3.color, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                    >18 ShaderMgr::hasShaderType(checker)
                                  >17 ShaderMgr::getValidConnection(checker1)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert3,checker1.outColor124,lambert3.color124,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(lambert3)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert2SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert2SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert2SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(lambert2SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert2SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(lambert2SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(lambert2SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(lambert2SG)
                    >10 Visitor::outputShadingGroup(lambert2SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(lambert2SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(initialShadingGroup,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(lambert1)
                          >13 ConvertShadingNetwork::canShaderExported(lambert1)
                          >13 ConvertShadingNetwork::exportShaderBegin(lambert1)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1)
                            >14 Visitor::initShaderData(lambert1)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(lambert1, ret)
                                >16 DagMgr::begin(lambert1)
                                  >17 DagMgr::pushInputPlugs(lambert1)
                                    >18 ShaderMgr::getValidConnection(lambert1)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(file1)
                                        >20 ShaderMgr::hasShaderType(file)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                                >16 DagMgr::pushInputPlugs(file1)
                                  >17 ShaderMgr::getValidConnection(file1)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                      >19 ShaderMgr::hasShaderType(place2dTexture)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                      >19 ShaderMgr::hasShaderType(lambert)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                                  >17 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                    >18 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                >16 DagMgr::pushInputPlugs(place2dTexture1)
                                  >17 ShaderMgr::getValidConnection(place2dTexture1)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                                  >17 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                    >18 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                    >18 ConvertShadingNetwork::nodeIsConvertible(file1)
                                      >19 ShaderMgr::hasShaderType(file)
                                >16 DagMgr::isVisited(place2dTexture1)
                                >16 DagMgr::visit(place2dTexture1)
                                >16 DagMgr::isVisited(file1)
                                >16 DagMgr::visit(file1)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(lambert1)
                            >14 Visitor::outputBegin(lambert1)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(place2dTexture1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                                  >17 Visitor::visitPlace2dTexture(place2dTexture1)
                                    >18 OutputHelper::beginRSL(maya_place2dTexture,place2dTexture1)
                                    >18 OutputHelper::addRSLVariable(vector,i_uvCoord,uvCoord,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.uvCoord)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                                    >18 OutputHelper::addRSLVariable(float,i_coverageU,coverageU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                                    >18 OutputHelper::addRSLVariable(float,i_coverageV,coverageV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                                    >18 OutputHelper::addRSLVariable(bool,i_mirrorU,mirrorU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(bool,i_mirrorV,mirrorV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(float,i_noiseU,noiseU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                                    >18 OutputHelper::addRSLVariable(float,i_noiseV,noiseV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                                    >18 OutputHelper::addRSLVariable(float,i_offsetU,offsetU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                                    >18 OutputHelper::addRSLVariable(float,i_offsetV,offsetV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                                    >18 OutputHelper::addRSLVariable(float,i_repeatU,repeatU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                                    >18 OutputHelper::addRSLVariable(float,i_repeatV,repeatV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                                    >18 OutputHelper::addRSLVariable(float,i_rotateFrame,rotateFrame,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(float,i_rotateUV,rotateUV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(bool,i_stagger,stagger,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(float,i_translateFrameU,translateFrameU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                                    >18 OutputHelper::addRSLVariable(float,i_translateFrameV,translateFrameV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                                    >18 OutputHelper::addRSLVariable(bool,i_wrapU,wrapU,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(bool,i_wrapV,wrapV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(vector,o_outUV,outUV,place2dTexture1)
                                      >19 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                                        >20 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                          >21 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(place2dTexture1)
                              >15 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.vCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.vCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outU)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outU)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outV)
                                >16 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                              >15 Visitor::addShaderMethodBody(place2dTexture1,,,place2dTexture1.coverage124place2dTexture1.mirrorU124place2dTexture1.mirrorV124place2dTexture1.noiseUV124place2dTexture1.offset124place2dTexture1.repeatUV124place2dTexture1.rotateFrame124place2dTexture1.rotateUV124place2dTexture1.stagger124place2dTexture1.translateFrame124place2dTexture1.wrapU124place2dTexture1.wrapV124place2dTexture1.outUV124)
                              >15 Visitor::outputUpstreamShader(file1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                                  >17 Visitor::visitFile(file1)
                                    >18 OutputHelper::beginRSL(maya_file,file1)
                                    >18 OutputHelper::addRSLVariable(float,i_alphaGain,alphaGain,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.alphaGain)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                                    >18 OutputHelper::addRSLVariable(bool,i_alphaIsLuminance,alphaIsLuminance,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                                    >18 OutputHelper::addRSLVariable(float,i_alphaOffset,alphaOffset,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.alphaOffset)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                                    >18 OutputHelper::addRSLVariable(color,i_colorGain,colorGain,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.colorGain)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                                    >18 OutputHelper::addRSLVariable(color,i_colorOffset,colorOffset,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.colorOffset)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                                    >18 OutputHelper::addRSLVariable(color,i_defaultColor,defaultColor,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.defaultColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                                    >18 OutputHelper::addRSLVariable(index,i_filterType,filterType,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.filterType)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                                    >18 OutputHelper::addRSLVariable(float,i_filter,filter,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.filter)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                                    >18 OutputHelper::addRSLVariable(float,i_filterOffset,filterOffset,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.filterOffset)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                                    >18 OutputHelper::addRSLVariable(bool,i_invert,invert,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.invert)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                                    >18 OutputHelper::addRSLVariable(vector,i_uvCoord,uvCoord,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.uvCoord)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                            >22 ShaderMgr::hasShaderType(place2dTexture)
                                    >18 OutputHelper::addRSLVariable(bool,i_fileHasAlpha,fileHasAlpha,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                                    >18 OutputHelper::addRSLVariable(float,o_outAlpha,outAlpha,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.outAlpha)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                            >22 ShaderMgr::hasShaderType(lambert)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,file1)
                                      >19 ShaderMgr::convertibleConnection(file1.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(file1)
                              >15 ConvertShadingNetwork::getNodeVariables(file1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGainB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGainB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffsetB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffsetB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.vCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.vCoord)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                >16 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                    >18 ShaderMgr::hasShaderType(place2dTexture)
                                  >17 ShaderMgr::getValidConnection(place2dTexture1)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                    >18 ShaderMgr::hasShaderType(lambert)
                                >16 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                                  >17 Visitor::addShaderMethodVariavles(file1,outColor,color,-1,)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                              >15 Visitor::addShaderMethodBody(file1,place2dTexture1.outUV124,file1.uvCoord124,file1.outColor124)
                              >15 Visitor::outputUpstreamShader(lambert1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                                  >17 Visitor::visitLambert(lambert1)
                                    >18 OutputHelper::beginRSL(maya_lambert,lambert1)
                                    >18 OutputHelper::addRSLVariable(color,i_ambientColor,ambientColor,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                    >18 OutputHelper::addRSLVariable(color,i_color,color,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(file1)
                                            >22 ShaderMgr::hasShaderType(file)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                                    >18 OutputHelper::addRSLVariable(color,i_incandescence,incandescence,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.matteOpacity)
                                    >18 OutputHelper::addRSLVariable(bool,i_refractions,refractions,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.refractions)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.refractions)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.refractions)
                                    >18 OutputHelper::addRSLVariable(float,i_refractiveIndex,refractiveIndex,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.refractiveIndex)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.refractiveIndex)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.refractiveIndex)
                                    >18 OutputHelper::addRSLVariable(index,i_refractionLimit,refractionLimit,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.refractionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.refractionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.refractionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_lightAbsorbance,lightAbsorbance,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.lightAbsorbance)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.lightAbsorbance)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.lightAbsorbance)
                                    >18 OutputHelper::addRSLVariable(float,i_shadowAttenuation,shadowAttenuation,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.shadowAttenuation)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.shadowAttenuation)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.shadowAttenuation)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(lambert1)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_transparency,transparency,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,lambert1)
                                      >19 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(lambert1)
                              >15 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                >16 ConvertShadingNetwork::addNodeInputVariable(lambert1.color, inputSrc, inputDes)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(file1)
                                    >18 ShaderMgr::hasShaderType(file)
                                  >17 ShaderMgr::getValidConnection(file1)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                              >15 Visitor::addShaderMethodBody(lambert1,file1.outColor124,lambert1.color124,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(lambert1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(initialShadingGroup,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(initialShadingGroup,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(initialShadingGroup,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                  >9 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                    >10 Visitor::outputShadingGroup(initialShadingGroup)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,miEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,miEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqVolumeShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(perspShape,liqLensShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(perspShape,liqLensShader)
                  >9 ShadingNetworkUser::export_user()
                >8  ConvertShadingNetwork::afterExport()
                  >9 ShadingNetworkUser::afterExport_user()
            >6 liqRibTranslatorNew::worldPrologue__(perspShape)
              >7 Renderer::worldPrologue(perspShape)
            >6 liqRibTranslatorNew::lightBlock__(perspShape)
              >7 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight1|pointLightShape1,,perspShape,ref=0)
                      >11 liqRibData::getFullPathName()
                    >10 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,perspShape,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                        >12 addLightGroupForLight(|pointLight1|pointLightShape1)
              >7 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
              >7 Renderer::writeLight_pre(|pointLight2|pointLightShape2,perspShape)
              >7 liqRibObj::writeObject(,perspShape,0)
                >8 liqRibLightData::write(,job=perspShape,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|pointLight2|pointLightShape2,,perspShape,ref=0)
                      >11 liqRibData::getFullPathName()
                    >10 er_writeLightData.cpp::_write(|pointLight2|pointLightShape2,perspShape,...)
                      >11 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                        >12 addLightGroupForLight(|pointLight2|pointLightShape2)
              >7 Renderer::writeLight_post(|pointLight2|pointLightShape2,perspShape)
            >6 liqRibTranslatorNew::coordSysBlock__(perspShape)
              >7 Renderer::coordSysBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock__(perspShape)
              >7 liqRibTranslatorNew::objectBlock_data(perspShape)
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|persp|perspShape,perspShape)
                  >9 Renderer::exportOneObject_data(|persp|perspShape,perspShape)
                    >10 Renderer::_writeObject(|persp|perspShape,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_persp_perspShape.1.rib,perspShape,0)
                        >12 liqRibCameraData::write(R:/MyDocuments/maya/projects/default/rib/_persp_perspShape.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|persp|perspShape,R:/MyDocuments/maya/projects/default/rib/_persp_perspShape.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeCameraData.cpp::_write_camera_maya(|persp|perspShape,perspShape)
                              >15 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,miEnvironmentShader)
                              >15 Renderer::cameraOutput(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane1|pPlaneShape1,perspShape)
                              >15 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                              >15 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,perspShape)
                    >10 Renderer::_writeObject(|pPlane2|pPlaneShape2,perspShape,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,perspShape,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,job=perspShape,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane2|pPlaneShape2,R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,perspShape,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane2|pPlaneShape2,perspShape)
                              >15 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                              >15 _exportVertexFromNodePlug(|pPlane2|pPlaneShape2,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
              >7 liqRibTranslatorNew::objectBlock_reference(perspShape)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|persp|perspShape,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|persp|perspShape,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|persp|perspShape,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|persp|perspShape)
                    >10 Renderer::exportLightLinks(perspShape,|persp|perspShape,lightedByWhichLightShapes.size=0)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|persp|perspShape,|persp|perspShape,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|persp|perspShape,|persp|perspShape,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|persp|perspShape,|persp|perspShape,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|persp|perspShape,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|persp|perspShape,v=0,s=0,c=0,,|persp|perspShape,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|persp|perspShape,|persp|perspShape,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|persp|perspShape)
                  >9 Renderer::exportOneObject_reference(|persp|perspShape,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|persp|perspShape,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                  >9 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,perspShape)
                  >9 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane2|pPlaneShape2)
                    >10 Renderer::exportLightLinks(perspShape,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=2)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,perspShape)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,perspShape)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                  >9 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,perspShape)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,perspShape)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(1)
              >7 Renderer::frameEpilogue(1)
            >6 liqRibTranslatorNew::ribEpilogue__(perspShape)
              >7 Renderer::ribPrologue_end(perspShape)
                >8 Renderer::cookInstanceGroup()
                >8 Renderer::render()
                  >9 Renderer::renderPreview(200,150,0,0,perspShape,perspShape,perspShape_option)
                    >10 Renderer::_renderPreview(200,150,0,0,perspShape,|persp,perspShape_option)
          >5 Renderer::HeroPassEnd(perspShape)
        >4 liqRenderScript::addJob(job.title=file_place2dTexture_conFrame1,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
      >3 OutputMgr::uninit()
        >4 OutputCall::~OutputCall()
        >4 OutputBase::~OutputBase()
        >4 OutputESS::~OutputESS()
        >4 OutputBase::~OutputBase()
        >4 OutputESA::~OutputESA()
        >4 OutputBase::~OutputBase()
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
      >3 ShaderMgr::clearValidConnection()
      >3 Renderer::~Renderer()
    >2 RendererMgr::unsetFactory()
