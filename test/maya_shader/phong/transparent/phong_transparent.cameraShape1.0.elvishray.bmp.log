>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(elvishray)
  >1 RendererMgr::install()
    >2 Renderer::Renderer()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/phong_transparent.cameraShape1.6.elvishray.bmp)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(phong_transparentFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,cameraShape1)
          >5 liqRibTranslator::generateFileName(5,cameraShape1)
            >6 liqRibTranslator::generateImageName(, job(cameraShape1)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(6)
        >4 liqRibTranslatorNew::scanScene__(6,0)
          >5 tJobScriptMgr::scanScene(6,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibHT::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibHT::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
              >7 liqRibHT::hash(|pointLight2|pointLightShape2,1)
              >7 liqRibHT::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,4)
                >8 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(6,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
            >6 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape2,2)
              >7 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
            >6 liqRibHT::insert(|pCube2|pCubeShape2,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pCube2|pCubeShape2,3)
              >7 liqRibHT::find(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube2|pCubeShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube2,,2)
                >8 liqRibNode::parseVectorAttributes(pCube2,,3)
                >8 liqRibNode::parseVectorAttributes(pCube2,,4)
                >8 liqRibNode::findShadingGroup(|pCube2|pCubeShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube2|pCubeShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube2|pCubeShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
            >6 liqRibHT::insert(|pPlane3|pPlaneShape3,lframe,0,0,4,matrix,,-1)
              >7 liqRibHT::hash(|pPlane3|pPlaneShape3,4)
              >7 liqRibHT::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane3|pPlaneShape3,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,4)
                >8 liqRibNode::findShadingGroup(|pPlane3|pPlaneShape3,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane3|pPlaneShape3,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane3|pPlaneShape3)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
            >6 liqRibHT::insert(|pPlane4|pPlaneShape4,lframe,0,0,5,matrix,,-1)
              >7 liqRibHT::hash(|pPlane4|pPlaneShape4,5)
              >7 liqRibHT::find(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane4|pPlaneShape4,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane4,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane4,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane4,,4)
                >8 liqRibNode::findShadingGroup(|pPlane4|pPlaneShape4,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane4|pPlaneShape4,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane4|pPlaneShape4)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape4)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
            >6 liqRibHT::insert(|camera1_group|camera1_aim|camera1_aimShape,lframe,0,0,6,matrix,,-1)
              >7 liqRibHT::hash(|camera1_group|camera1_aim|camera1_aimShape,6)
              >7 liqRibHT::find(|camera1_group|camera1_aim|camera1_aimShape,|camera1_group|camera1_aim|camera1_aimShape,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|camera1_group|camera1_aim|camera1_aimShape,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(camera1_aim,,2)
                >8 liqRibNode::parseVectorAttributes(camera1_aim,,3)
                >8 liqRibNode::parseVectorAttributes(camera1_aim,,4)
                >8 liqRibNode::findShadingGroup(|camera1_group|camera1_aim|camera1_aimShape,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|camera1_group|camera1_aim|camera1_aimShape,0)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,6,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,6,7)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|camera1_group|camera1|cameraShape1,)
              >7 liqRibTranslator::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|camera1_group|camera1|cameraShape1)
            >6 liqRibTranslator::getCameraFilmOffset(|camera1_group|camera1|cameraShape1,)
            >6 liqRibTranslator::getCameraTransform(|camera1_group|camera1|cameraShape1,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,6,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_begin(cameraShape1)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/phong_transparent,yaoyansi,time)
            >6 Renderer::ribPrologue_options(cameraShape1)
          >5 liqRibTranslatorNew::framePrologue__(6,cameraShape1)
            >6 Renderer::framePrologue(6,cameraShape1)
              >7 Renderer::framePrologue_camera(6,cameraShape1)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|camera1_group|camera1|cameraShape1,liqEnvironmentShader)
                >8 Renderer::cameraOutput(cameraShape1)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(phong3SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong3)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong3)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong3,surfaceShader)
                    >10 Visitor::initShaderData(phong3,surfaceShader)
                    >10 Visitor::initShaderData(phong3,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong3, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong3)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong3)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                    >10 Visitor::preOutput(phong3)
                    >10 Visitor::preOutput(phong3)
                    >10 Visitor::outputBegin(phong3)
                    >10 Visitor::outputBegin(phong3)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong3,phong)
                          >13 Visitor::visitPhong(phong3)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong3)
                            >14 ShaderMgr::convertibleConnection(phong3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                            >14 ShaderMgr::convertibleConnection(phong3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                            >14 ShaderMgr::convertibleConnection(phong3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong3.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong3.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong3.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong3.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong3.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong3,phong)
                          >13 Visitor::visitPhong(phong3)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong3)
                            >14 ShaderMgr::convertibleConnection(phong3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                            >14 ShaderMgr::convertibleConnection(phong3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                            >14 ShaderMgr::convertibleConnection(phong3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong3.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong3.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong3.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong3.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong3.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong3)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong3, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong3, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong3,,)
                      >11 Visitor::addShaderMethodBody(phong3,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong3)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong3SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong3SG)
                  >9 Visitor::outputShadingGroup(phong3SG)
                  >9 Visitor::outputShadingGroup(phong3SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong3SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong4)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong4,surfaceShader)
                    >10 Visitor::initShaderData(phong4,surfaceShader)
                    >10 Visitor::initShaderData(phong4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong4)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong4)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                    >10 Visitor::preOutput(phong4)
                    >10 Visitor::preOutput(phong4)
                    >10 Visitor::outputBegin(phong4)
                    >10 Visitor::outputBegin(phong4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong4,phong)
                          >13 Visitor::visitPhong(phong4)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong4)
                            >14 ShaderMgr::convertibleConnection(phong4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                            >14 ShaderMgr::convertibleConnection(phong4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                            >14 ShaderMgr::convertibleConnection(phong4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong4.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong4.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong4.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong4,phong)
                          >13 Visitor::visitPhong(phong4)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong4)
                            >14 ShaderMgr::convertibleConnection(phong4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                            >14 ShaderMgr::convertibleConnection(phong4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                            >14 ShaderMgr::convertibleConnection(phong4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong4.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong4.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong4.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong4)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong4,,)
                      >11 Visitor::addShaderMethodBody(phong4,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong4SG)
                  >9 Visitor::outputShadingGroup(phong4SG)
                  >9 Visitor::outputShadingGroup(phong4SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong4SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert2SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong2)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong2)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong2,surfaceShader)
                    >10 Visitor::initShaderData(phong2,surfaceShader)
                    >10 Visitor::initShaderData(phong2,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong2, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong2)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong2)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                    >10 Visitor::preOutput(phong2)
                    >10 Visitor::preOutput(phong2)
                    >10 Visitor::outputBegin(phong2)
                    >10 Visitor::outputBegin(phong2)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong2,phong)
                          >13 Visitor::visitPhong(phong2)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong2)
                            >14 ShaderMgr::convertibleConnection(phong2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                            >14 ShaderMgr::convertibleConnection(phong2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                            >14 ShaderMgr::convertibleConnection(phong2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong2.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong2.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong2.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong2.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong2,phong)
                          >13 Visitor::visitPhong(phong2)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong2)
                            >14 ShaderMgr::convertibleConnection(phong2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                            >14 ShaderMgr::convertibleConnection(phong2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                            >14 ShaderMgr::convertibleConnection(phong2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong2.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong2.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong2.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong2.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong2.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong2.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong2.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong2)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong2,,)
                      >11 Visitor::addShaderMethodBody(phong2,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong2)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert2SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert2SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert2SG)
                  >9 Visitor::outputShadingGroup(lambert2SG)
                  >9 Visitor::outputShadingGroup(lambert2SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert2SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert3SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert3SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong1)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong1)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert3SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert3SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong1,,)
                      >11 Visitor::addShaderMethodBody(phong1,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert3SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert3SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert3SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(lambert3SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert3SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert3SG)
                  >9 Visitor::outputShadingGroup(lambert3SG)
                  >9 Visitor::outputShadingGroup(lambert3SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert3SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight1|pointLightShape1,,cameraShape1,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight1|pointLightShape1,cameraShape1,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                      >11 addLightGroupForLight(|pointLight1|pointLightShape1)
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight2|pointLightShape2,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight2|pointLightShape2,,cameraShape1,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight2|pointLightShape2,cameraShape1,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                      >11 addLightGroupForLight(|pointLight2|pointLightShape2)
            >6 Renderer::writeLight_post(|pointLight2|pointLightShape2,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
            >6 Renderer::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.6.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.6.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.6.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane2|pPlaneShape2,cameraShape1)
                            >14 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane2|pPlaneShape2,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube2|pCubeShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pCube2|pCubeShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pCube2|pCubeShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.6.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.6.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube2|pCubeShape2,R:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.6.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pCube2|pCubeShape2,cameraShape1)
                            >14 liqRibHT::find(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pCube2|pCubeShape2,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane3|pPlaneShape3,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane3|pPlaneShape3,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane3|pPlaneShape3,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.6.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.6.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane3|pPlaneShape3,R:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.6.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane3|pPlaneShape3,cameraShape1)
                            >14 liqRibHT::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane3|pPlaneShape3,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane4|pPlaneShape4,cameraShape1)
                >8 Renderer::exportOneObject_data(|pPlane4|pPlaneShape4,cameraShape1)
                  >9 Renderer::_writeObject(|pPlane4|pPlaneShape4,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.6.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.6.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane4|pPlaneShape4,R:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.6.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane4|pPlaneShape4,cameraShape1)
                            >14 liqRibHT::find(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane4|pPlaneShape4,0)
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane2|pPlaneShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube2|pCubeShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube2|pCubeShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube2|pCubeShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pCube2|pCubeShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pCube2|pCubeShape2,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube2|pCubeShape2,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube2|pCubeShape2,v=0,s=0,c=0,,|pCube2|pCubeShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube2|pCubeShape2)
                >8 Renderer::exportOneObject_reference(|pCube2|pCubeShape2,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube2|pCubeShape2,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane3|pPlaneShape3,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane3|pPlaneShape3,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane3|pPlaneShape3,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane3|pPlaneShape3)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane3|pPlaneShape3,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane3|pPlaneShape3,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane3|pPlaneShape3,v=0,s=0,c=0,,|pPlane3|pPlaneShape3,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane3|pPlaneShape3)
                >8 Renderer::exportOneObject_reference(|pPlane3|pPlaneShape3,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane3|pPlaneShape3,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane4|pPlaneShape4,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane4|pPlaneShape4,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane4|pPlaneShape4,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane4|pPlaneShape4)
                  >9 Renderer::exportLightLinks(cameraShape1,|pPlane4|pPlaneShape4,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane4|pPlaneShape4,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane4|pPlaneShape4,v=0,s=0,c=0,,|pPlane4|pPlaneShape4,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane4|pPlaneShape4)
                >8 Renderer::exportOneObject_reference(|pPlane4|pPlaneShape4,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane4|pPlaneShape4,cameraShape1)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(6)
            >6 Renderer::frameEpilogue(6)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
              >7 Renderer::cookInstanceGroup()
              >7 Renderer::render()
        >4 Renderer::HeroPassEnd(cameraShape1)
      >3 liqRenderScript::addJob(job.title=phong_transparentFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
    >2 Renderer::~Renderer()
  >1 RendererMgr::unsetFactory()
