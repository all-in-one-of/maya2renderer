  >1 liqRibTranslator::doIt()-->if(checkSettings()==true)
    >2 RendererMgr::setFactory(ElvishRender)
    >2 RendererMgr::install()
      >3 Renderer::Renderer()
      >3 ShaderMgr::setValidConnection()
      >3 ShaderMgr::getShaderConnectionMap()
      >3 RNodeVisitorMgr::setValidConnection(...)
        >4 CheckerNodeVisitor::setValidConnection(...)
        >4 FlatColorNodeVisitor::setValidConnection(...)
        >4 erPhysicalskyNodeVisitor::setValidConnection(...)
        >4 erSkylightNodeVisitor::setValidConnection(...)
        >4 TestLightNodeVisitor::setValidConnection(...)
        >4 ArchitecturalNodeVisitor::setValidConnection(...)
        >4 Checker2NodeVisitor::setValidConnection(...)
    >2 RendererMgr::prologue()
    >2 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/arealight.cameraShape1.1.ElvishRender.bmp)
      >3 OutputMgr::setOutputImagePath(R:/MyDocuments/maya/projects/default/rib/arealight.cameraShape1.1.ElvishRender.bmp)
      >3 OutputMgr::add(1)
      >3 OutputMgr::add(2)
      >3 OutputMgr::add(0)
      >3 OutputMgr::init()
        >4 OutputMgr::createOutput(1)
          >5 OutputBase::OutputBase()
          >5 OutputESS::OutputESS(R:/MyDocuments/maya/projects/default/rib/arealight.cameraShape1.1.ElvishRender.bmp)
        >4 OutputMgr::createOutput(2)
          >5 OutputBase::OutputBase()
          >5 OutputESA::OutputESA(R:/MyDocuments/maya/projects/default/rib/arealight.cameraShape1.1.ElvishRender.bmp)
        >4 OutputMgr::createOutput(0)
          >5 OutputBase::OutputBase()
          >5 OutputCall::OutputCall()
        >4 OutputESS::init()
        >4 OutputESA::init()
        >4 OutputCall::init()
    >2 Renderer::canExport()
    >2 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
      >3 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
        >4 liqRibTranslator::verifyOutputDirectories()
          >5 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
          >5 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
          >5 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
          >5 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
        >4 liqRibTranslator::generateRenderScriptName()
        >4 liqRibTranslator::generateTempMayaSceneName()
        >4 tFrameScriptJobMgr::setCommonParameters(arealightFrame0)
        >4 liqRibTranslatorNew::processOneFrame(0, liqglo__)
          >5 liqRibTranslatorNew::buildJobs__()
            >6 liqRibTranslatorNew::buildShadowJobs__()
              >7 tLightMgr::buildShadowJob(thisJob___, 0)
              >7 tLightMgr::buildShadowCameraJob(thisJob___, 0)
            >6 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
            >6 liqRibTranslator::generateFileName(4,cameraShape1)
            >6 liqRibTranslator::generateFileName(5,cameraShape1)
              >7 liqRibTranslator::generateImageName(, job(cameraShape1)), 
          >5 liqRibTranslatorNew::calaculateSamplingTime(1)
          >5 liqRibTranslatorNew::scanScene__(1,0)
            >6 tLightMgr::scanScene(1,0, htable__, count, returnStatus__)
              >7 liqRibHT::insert(|areaLight1|areaLightShape1,lframe,0,3,0,matrix,,-1)
                >8 liqRibHT::hash(|areaLight1|areaLightShape1,0)
                >8 liqRibHT::find(|areaLight1|areaLightShape1,|areaLight1|areaLightShape1,3)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|areaLight1|areaLightShape1,0,3,-1)
                  >9 liqRibNode::parseVectorAttributes(areaLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(areaLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(areaLight1,,4)
                  >9 liqRibNode::findShadingGroup(|areaLight1|areaLightShape1,3)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|areaLight1|areaLightShape1,3)
                    >10 liqRibLightData::liqRibLightData(|areaLight1|areaLightShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(areaLightShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
              >7 liqRibHT::insert(|areaLight1|areaLightShape1CoordSys,lframe,0,10,1,matrix,,-1)
                >8 liqRibHT::hash(|areaLight1|areaLightShape1CoordSys,1)
                >8 liqRibHT::find(|areaLight1|areaLightShape1CoordSys,|areaLight1|areaLightShape1CoordSys,10)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|areaLight1|areaLightShape1CoordSys,0,10,-1)
                  >9 liqRibNode::parseVectorAttributes(areaLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(areaLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(areaLight1,,4)
                  >9 liqRibNode::findShadingGroup(|areaLight1|areaLightShape1CoordSys,10)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|areaLight1|areaLightShape1CoordSys,10)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|persp|perspShape,lframe,0,0,2,matrix,,-1)
                >8 liqRibHT::hash(|persp|perspShape,2)
                >8 liqRibHT::find(|persp|perspShape,|persp|perspShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|persp|perspShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(persp,,2)
                  >9 liqRibNode::parseVectorAttributes(persp,,3)
                  >9 liqRibNode::parseVectorAttributes(persp,,4)
                  >9 liqRibNode::findShadingGroup(|persp|perspShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|persp|perspShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|top|topShape,lframe,0,0,3,matrix,,-1)
                >8 liqRibHT::hash(|top|topShape,3)
                >8 liqRibHT::find(|top|topShape,|top|topShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|top|topShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(top,,2)
                  >9 liqRibNode::parseVectorAttributes(top,,3)
                  >9 liqRibNode::parseVectorAttributes(top,,4)
                  >9 liqRibNode::findShadingGroup(|top|topShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|top|topShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|front|frontShape,lframe,0,0,4,matrix,,-1)
                >8 liqRibHT::hash(|front|frontShape,4)
                >8 liqRibHT::find(|front|frontShape,|front|frontShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|front|frontShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(front,,2)
                  >9 liqRibNode::parseVectorAttributes(front,,3)
                  >9 liqRibNode::parseVectorAttributes(front,,4)
                  >9 liqRibNode::findShadingGroup(|front|frontShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|front|frontShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|side|sideShape,lframe,0,0,5,matrix,,-1)
                >8 liqRibHT::hash(|side|sideShape,5)
                >8 liqRibHT::find(|side|sideShape,|side|sideShape,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|side|sideShape,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(side,,2)
                  >9 liqRibNode::parseVectorAttributes(side,,3)
                  >9 liqRibNode::parseVectorAttributes(side,,4)
                  >9 liqRibNode::findShadingGroup(|side|sideShape,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|side|sideShape,0)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,6,matrix,,-1)
                >8 liqRibHT::hash(|pPlane1|pPlaneShape1,6)
                >8 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane1,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,7,matrix,,-1)
                >8 liqRibHT::hash(|pPlane2|pPlaneShape2,7)
                >8 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(pPlane2,,2)
                  >9 liqRibNode::parseVectorAttributes(pPlane2,,3)
                  >9 liqRibNode::parseVectorAttributes(pPlane2,,4)
                  >9 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getColor(&shader,&color)
                  >9 liqRibNode::getOpacity(&shader,&color)
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                    >10 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                      >11 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                        >12 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|areaLight1|areaLightShape1CoordSys,lframe,0,10,8,matrix,,-1)
                >8 liqRibHT::hash(|areaLight1|areaLightShape1CoordSys,8)
                >8 liqRibHT::find(|areaLight1|areaLightShape1CoordSys,|areaLight1|areaLightShape1CoordSys,10)
                >8 liqRibNode::set(|areaLight1|areaLightShape1CoordSys,0,10,-1)
                  >9 liqRibNode::parseVectorAttributes(areaLight1,,2)
                  >9 liqRibNode::parseVectorAttributes(areaLight1,,3)
                  >9 liqRibNode::parseVectorAttributes(areaLight1,,4)
                  >9 liqRibNode::findShadingGroup(|areaLight1|areaLightShape1CoordSys,10)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|areaLight1|areaLightShape1CoordSys,10)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
              >7 liqRibHT::insert(|camera1|cameraShape1,lframe,0,0,9,matrix,,-1)
                >8 liqRibHT::hash(|camera1|cameraShape1,9)
                >8 liqRibHT::find(|camera1|cameraShape1,|camera1|cameraShape1,0)
                >8 liqRibNode::liqRibNode(instanceOfNode,)
                >8 liqRibNode::set(|camera1|cameraShape1,0,0,-1)
                  >9 liqRibNode::parseVectorAttributes(camera1,,2)
                  >9 liqRibNode::parseVectorAttributes(camera1,,3)
                  >9 liqRibNode::parseVectorAttributes(camera1,,4)
                  >9 liqRibNode::findShadingGroup(|camera1|cameraShape1,0)
                  >9 liqRibNode::findShader()
                  >9 liqRibNode::findDisp()
                  >9 liqRibNode::findVolume()
                  >9 liqRibNode::getMatteMode(&shader)
                  >9 liqRibObj::liqRibObj(|camera1|cameraShape1,0)
                    >10 liqRibCameraData::liqRibCameraData(|camera1|cameraShape1)
            >6 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,10)
            >6 tCameraMgr::getCameraData(cameraShape1,0)
              >7 tCameraMgr::getCameraInfo(|camera1|cameraShape1,)
                >8 tCameraMgr::portFieldOfView(224,150,&horizontal,&vertical,&fnCamera)
                  >9 tCameraMgr::computeViewingFrustum(1.49333,,&left,&right,&bottom,&top,|camera1|cameraShape1)
              >7 tCameraMgr::getCameraFilmOffset(|camera1|cameraShape1,)
              >7 tCameraMgr::getCameraTransform(|camera1|cameraShape1,)
          >5 liqRibTranslatorNew::doTextures(size=0)
            >6 Renderer::frameEpilogue(txtList_.size=0)
          >5 liqRibTranslatorNew::doShadows(size=0)
            >6 Renderer::doShadows(shadowList_.size=0)
          >5 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::isHeroPassReady(cameraShape1)
          >5 Renderer::HeroPassBegin(cameraShape1)
          >5 tHeroRibWriterMgr::write(liqglo___,cameraShape1,1,0)
            >6 liqRibTranslatorNew::ribPrologue__(cameraShape1)
              >7 Renderer::ribPrologue_begin(cameraShape1)
                >8 Renderer::dummyPhongShader()
              >7 Renderer::ribPrologue_comment(2.3.5,R:/MyDocuments/maya/projects/default/arealight,yaoyansi,time)
              >7 Renderer::ribPrologue_options(cameraShape1)
            >6 liqRibTranslatorNew::framePrologue__(1,cameraShape1)
              >7 Renderer::framePrologue(1,cameraShape1)
            >6 ShaderMgr::exportShaderGraph()
              >7 ConvertShadingNetwork::exportShaderGraph()
                >8 ConvertShadingNetwork::beforeExport()
                  >9 ShadingNetworkUser::beforeExport_user()
                >8 ConvertShadingNetwork::__export()
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong2SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong2SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(phong2)
                          >13 ConvertShadingNetwork::canShaderExported(phong2)
                          >13 ConvertShadingNetwork::exportShaderBegin(phong2)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(phong2)
                            >14 Visitor::initShaderData(phong2)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong2, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(phong2, ret)
                                >16 DagMgr::begin(phong2)
                                  >17 DagMgr::pushInputPlugs(phong2)
                                    >18 ShaderMgr::getValidConnection(phong2)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(phong2)
                            >14 Visitor::outputBegin(phong2)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(phong2)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(phong2,phong)
                                  >17 Visitor::visitPhong(phong2)
                                    >18 OutputHelper::beginRSL(maya_phong,phong2)
                                    >18 OutputHelper::addRSLVariable(vector,i_ambientColor,ambientColor,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                                    >18 OutputHelper::addRSLVariable(vector,i_color,color,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                                    >18 OutputHelper::addRSLVariable(float,i_cosinePower,cosinePower,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.cosinePower)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                                    >18 OutputHelper::addRSLVariable(vector,i_incandescence,incandescence,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(phong2)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(vector,i_transparency,transparency,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,phong2)
                                      >19 ShaderMgr::convertibleConnection(phong2.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(phong2)
                              >15 ConvertShadingNetwork::getNodeVariables(phong2, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong2SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong2.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong2.outTransparency)
                              >15 Visitor::addShaderMethodBody(phong2,,,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(phong2)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong2SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong2SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong2SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong2SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong2SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong2SG)
                    >10 Visitor::outputShadingGroup(phong2SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong2SG)
                  >9 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                  >9 Renderer::getValidShaderPlugsInShadingGroup()
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,surfaceShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,surfaceShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong1SG,surfaceShader)
                        >12 ConvertShadingNetwork::exportShaderNode(phong1)
                          >13 ConvertShadingNetwork::canShaderExported(phong1)
                          >13 ConvertShadingNetwork::exportShaderBegin(phong1)
                          >13 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1)
                            >14 Visitor::initShaderData(phong1)
                            >14 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                              >15 DagMgr::BreadthFirstTraversal(phong1, ret)
                                >16 DagMgr::begin(phong1)
                                  >17 DagMgr::pushInputPlugs(phong1)
                                    >18 ShaderMgr::getValidConnection(phong1)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                      >19 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                        >20 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                                    >18 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                      >19 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                                >16 DagMgr::end()
                            >14 Visitor::preOutput(phong1)
                            >14 Visitor::outputBegin(phong1)
                            >14 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                              >15 Visitor::outputUpstreamShader(phong1)
                                >16 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                                  >17 Visitor::visitPhong(phong1)
                                    >18 OutputHelper::beginRSL(maya_phong,phong1)
                                    >18 OutputHelper::addRSLVariable(vector,i_ambientColor,ambientColor,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.ambientColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                    >18 OutputHelper::addRSLVariable(vector,i_color,color,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.color)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                    >18 OutputHelper::addRSLVariable(float,i_cosinePower,cosinePower,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.cosinePower)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                                    >18 OutputHelper::addRSLVariable(float,i_diffuse,diffuse,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.diffuse)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                    >18 OutputHelper::addRSLVariable(vector,i_incandescence,incandescence,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.incandescence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                                    >18 OutputHelper::addRSLVariable(index,i_matteOpacityMode,matteOpacityMode,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                                    >18 OutputHelper::addRSLVariable(float,i_matteOpacity,matteOpacity,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                                    >18 OutputHelper::add_liq_UserDefinedNormal(phong1)
                                    >18 OutputHelper::addRSLVariable(normal,i_normalCamera,normalCamera,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.normalCamera)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                                    >18 OutputHelper::addRSLVariable(color,i_specularColor,specularColor,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.specularColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                                    >18 OutputHelper::addRSLVariable(float,i_reflectivity,reflectivity,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.reflectivity)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                                    >18 OutputHelper::addRSLVariable(color,i_reflectedColor,reflectedColor,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                                    >18 OutputHelper::addRSLVariable(index,i_reflectionLimit,reflectionLimit,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                                    >18 OutputHelper::addRSLVariable(float,i_translucence,translucence,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.translucence)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceDepth,translucenceDepth,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                                    >18 OutputHelper::addRSLVariable(float,i_translucenceFocus,translucenceFocus,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                                    >18 OutputHelper::addRSLVariable(vector,i_transparency,transparency,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.transparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                    >18 OutputHelper::addRSLVariable(color,o_outColor,outColor,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.outColor)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                          >21 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                            >22 ShaderMgr::hasShaderType(shadingEngine)
                                    >18 OutputHelper::addRSLVariable(color,o_outTransparency,outTransparency,phong1)
                                      >19 ShaderMgr::convertibleConnection(phong1.outTransparency)
                                        >20 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                          >21 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                                    >18 OutputHelper::endRSL()
                              >15 ShaderMgr::getValidConnection(phong1)
                              >15 ConvertShadingNetwork::getNodeVariables(phong1, validConnections,  inputSrc, inputDes, outputSrc)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                  >17 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                    >18 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                                >16 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                  >17 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                              >15 Visitor::addShaderMethodBody(phong1,,,)
                            >14 ConvertShadingNetwork::outputShaderMethod()
                              >15 Visitor::outputShaderMethod()
                            >14 Visitor::outputEnd()
                            >14 Visitor::postOutput()
                          >13 ConvertShadingNetwork::exportShaderEnd(phong1)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,displacementShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,displacementShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong1SG,displacementShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,volumeShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,volumeShader)
                      >11 ConvertShadingNetwork::_exportShaderNodeInPlug(phong1SG,volumeShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqShadowShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,liqShadowShader)
                  >9 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::exportShaderNodeInPlug(phong1SG,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                  >9 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                    >10 Visitor::outputShadingGroup(phong1SG)
                  >9 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(cameraShape1,miEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(cameraShape1,miEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(cameraShape1,liqVolumeShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(cameraShape1,liqEnvironmentShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(cameraShape1,liqEnvironmentShader)
                  >9 ConvertShadingNetwork::exportShaderNodeInPlug(cameraShape1,liqLensShader)
                    >10 ConvertShadingNetwork::_exportShaderNodeInPlug(cameraShape1,liqLensShader)
                  >9 ShadingNetworkUser::export_user()
                >8  ConvertShadingNetwork::afterExport()
                  >9 ShadingNetworkUser::afterExport_user()
            >6 liqRibTranslatorNew::worldPrologue__(cameraShape1)
              >7 Renderer::worldPrologue(cameraShape1)
            >6 liqRibTranslatorNew::lightBlock__(cameraShape1)
              >7 Renderer::writeLight_pre(|areaLight1|areaLightShape1,cameraShape1)
              >7 liqRibObj::writeObject(,cameraShape1,0)
                >8 liqRibLightData::write(,job=cameraShape1,0)
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::write(|areaLight1|areaLightShape1,,cameraShape1,ref=0)
                      >11 liqRibData::getFullPathName()
                    >10 er_writeLightData.cpp::_write(|areaLight1|areaLightShape1,cameraShape1,...)
                      >11 Renderer::exportAreaLight(areaLightShape1,cameraShape1)
                        >12 addLightGroupForLight(|areaLight1|areaLightShape1)
              >7 Renderer::writeLight_post(|areaLight1|areaLightShape1,cameraShape1)
            >6 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
              >7 Renderer::coordSysBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock__(cameraShape1)
              >7 liqRibTranslatorNew::objectBlock_data(cameraShape1)
                >8 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,cameraShape1)
                    >10 Renderer::_writeObject(|pPlane1|pPlaneShape1,cameraShape1,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=cameraShape1,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,cameraShape1,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane1|pPlaneShape1,cameraShape1)
                              >15 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                              >15 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,cameraShape1)
                    >10 Renderer::_writeObject(|pPlane2|pPlaneShape2,cameraShape1,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,cameraShape1,0)
                        >12 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,job=cameraShape1,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|pPlane2|pPlaneShape2,R:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,cameraShape1,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeMeshData.cpp::_write1(|pPlane2|pPlaneShape2,cameraShape1)
                              >15 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                              >15 _exportVertexFromNodePlug(|pPlane2|pPlaneShape2,0)
                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                              >15 liqRibData::getFullPathName()
                >8 liqRibTranslatorNew::oneObjectBlock_data(|camera1|cameraShape1,cameraShape1)
                  >9 Renderer::exportOneObject_data(|camera1|cameraShape1,cameraShape1)
                    >10 Renderer::_writeObject(|camera1|cameraShape1,cameraShape1,0,0,0)
                      >11 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,cameraShape1,0)
                        >12 liqRibCameraData::write(R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,job=cameraShape1,0)
                            >14 liqRibData::getFullPathName()
                          >13 Renderer::write(|camera1|cameraShape1,R:/MyDocuments/maya/projects/default/rib/_camera1_cameraShape1.1.rib,cameraShape1,ref=0)
                              >15 liqRibData::getFullPathName()
                            >14 er_writeCameraData.cpp::_write_camera_maya(|camera1|cameraShape1,cameraShape1)
                              >15 liqRibHT::find(|camera1|cameraShape1,|camera1|cameraShape1,0)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|camera1|cameraShape1,liqEnvironmentShader)
                              >15 Renderer::gatherCameraShaders(cameraShaders.size=0,|camera1|cameraShape1,miEnvironmentShader)
                              >15 Renderer::cameraOutput(cameraShape1)
              >7 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
                >8 Renderer::objectBlock_reference_begin()
                >8 liqRibTranslatorNew::preGeometryMel()
                  >9 Renderer::preGeometryMel()
                >8 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane1|pPlaneShape1)
                    >10 Renderer::exportLightLinks(cameraShape1,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,cameraShape1)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,cameraShape1)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                  >9 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,cameraShape1)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pPlane2|pPlaneShape2)
                    >10 Renderer::exportLightLinks(cameraShape1,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,cameraShape1)
                  >9 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,cameraShape1)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                  >9 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,cameraShape1)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,cameraShape1)
                >8 liqRibTranslatorNew::oneObjectBlock_reference(|camera1|cameraShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_begin(|camera1|cameraShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block0(|camera1|cameraShape1,cameraShape1)
                  >9 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|camera1|cameraShape1)
                    >10 Renderer::exportLightLinks(cameraShape1,|camera1|cameraShape1,lightedByWhichLightShapes.size=0)
                  >9 liqRibTranslatorNew::checkSurfaceShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkDisplacementShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 liqRibTranslatorNew::checkVolumeShader(|camera1|cameraShape1,|camera1|cameraShape1,,,)
                  >9 Renderer::oneObjectBlock_reference_attribute_block1(|camera1|cameraShape1,cameraShape1)
                  >9 liqRibTranslatorNew::writeShader_(1,|camera1|cameraShape1,v=0,s=0,c=0,,|camera1|cameraShape1,cameraShape1)
                    >10 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|camera1|cameraShape1,|camera1|cameraShape1,0)
                  >9 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|camera1|cameraShape1)
                  >9 Renderer::exportOneObject_reference(|camera1|cameraShape1,cameraShape1)
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                    >10 liqRibData::getFullPathName()
                  >9 Renderer::oneObjectBlock_reference_attribute_end(|camera1|cameraShape1,cameraShape1)
                >8 Renderer::objectBlock_reference_end()
            >6 liqRibTranslatorNew::worldEpilogue__()
              >7 liqRibTranslator::worldEpilogue()
                >8 Renderer::worldEpilogue()
            >6 liqRibTranslatorNew::frameEpilogue__(1)
              >7 Renderer::frameEpilogue(1)
            >6 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
              >7 Renderer::ribPrologue_end(cameraShape1)
                >8 Renderer::cookInstanceGroup()
                >8 Renderer::render()
                  >9 Renderer::renderPreview(200,150,0,0,cameraShape1,cameraShape1,cameraShape1_option)
                    >10 Renderer::_renderPreview(200,150,0,0,cameraShape1,|camera1,cameraShape1_option)
          >5 Renderer::HeroPassEnd(cameraShape1)
        >4 liqRenderScript::addJob(job.title=arealightFrame0,0)
          >5 liqRenderScript::popNextJobID()
        >4 liqRibTranslatorNew::postActions(defaultRenderLayer)
    >2 RendererMgr::test()
    >2 Renderer::closeLog()(but do nothing now)
      >3 OutputMgr::uninit()
        >4 OutputESS::~OutputESS()
        >4 OutputBase::~OutputBase()
        >4 OutputESA::~OutputESA()
        >4 OutputBase::~OutputBase()
        >4 OutputCall::~OutputCall()
        >4 OutputBase::~OutputBase()
    >2 RendererMgr::epilogue()
    >2 RendererMgr::uninstall()
      >3 ShaderMgr::clearValidConnection()
      >3 Renderer::~Renderer()
    >2 RendererMgr::unsetFactory()
