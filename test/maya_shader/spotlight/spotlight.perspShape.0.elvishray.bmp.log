>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(elvishray)
  >1 RendererMgr::install()
    >2 Renderer::Renderer()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(R:/MyDocuments/maya/projects/default/rib/spotlight.perspShape.1.elvishray.bmp)
    >2 OutputMgr::setOutputImagePath(R:/MyDocuments/maya/projects/default/rib/spotlight.perspShape.1.elvishray.bmp)
    >2 OutputMgr::add(0)
    >2 OutputMgr::add(1)
    >2 OutputMgr::add(2)
    >2 OutputMgr::init()
      >3 OutputMgr::createOutput(0)
        >4 OutputBase::OutputBase()
        >4 OutputCall::OutputCall()
      >3 OutputMgr::createOutput(1)
        >4 OutputBase::OutputBase()
        >4 OutputESS::OutputESS(R:/MyDocuments/maya/projects/default/rib/spotlight.perspShape.1.elvishray.bmp)
      >3 OutputMgr::createOutput(2)
        >4 OutputBase::OutputBase()
        >4 OutputESA::OutputESA(R:/MyDocuments/maya/projects/default/rib/spotlight.perspShape.1.elvishray.bmp)
      >3 OutputCall::init()
      >3 OutputESS::init()
      >3 OutputESA::init()
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(spotlightFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(liquidLight2)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(liquidLight2)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidLight2)
              >7 liqShader::processExpression(shadownamepx,*light)
                >8 removeRedundentExtsion()
                >8 liqExpression::liqExpression([MakeTexture ],)
              >7 liqShader::processExpression(shadownamenx,*light)
                >8 removeRedundentExtsion()
                >8 liqExpression::liqExpression([MakeTexture ],)
              >7 liqShader::processExpression(shadownamepy,*light)
                >8 removeRedundentExtsion()
                >8 liqExpression::liqExpression([MakeTexture ],)
              >7 liqShader::processExpression(shadownameny,*light)
                >8 removeRedundentExtsion()
                >8 liqExpression::liqExpression([MakeTexture ],)
              >7 liqShader::processExpression(shadownamepz,*light)
                >8 removeRedundentExtsion()
                >8 liqExpression::liqExpression([MakeTexture ],)
              >7 liqShader::processExpression(shadownamenz,*light)
                >8 removeRedundentExtsion()
                >8 liqExpression::liqExpression([MakeTexture ],)
              >7 liqShader::processExpression(__category,*light)
                >8 removeRedundentExtsion()
                >8 liqExpression::liqExpression([MakeTexture ],)
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,perspShape)
          >5 liqRibTranslator::generateFileName(5,perspShape)
            >6 liqRibTranslator::generateImageName(, job(perspShape)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|spotLight3|spotLightShape3,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|spotLight3|spotLightShape3,0)
              >7 liqRibHT::find(|spotLight3|spotLightShape3,|spotLight3|spotLightShape3,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|spotLight3|spotLightShape3,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(spotLight3,,2)
                >8 liqRibNode::parseVectorAttributes(spotLight3,,3)
                >8 liqRibNode::parseVectorAttributes(spotLight3,,4)
                >8 liqRibNode::findShadingGroup(|spotLight3|spotLightShape3,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|spotLight3|spotLightShape3,3)
                  >9 liqRibLightData::liqRibLightData(|spotLight3|spotLightShape3)
                    >10 liqRibData::addAdditionalSurfaceParameters(spotLightShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pPlane1|pPlaneShape1,1)
              >7 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,2)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|persp|perspShape,)
              >7 liqRibTranslator::portFieldOfView(200,150,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
            >6 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
            >6 liqRibTranslator::getCameraTransform(|persp|perspShape,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),R:/MyDocuments/maya/projects/default/spotlight,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                >8 Renderer::cameraOutput(perspShape)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong1)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong1)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 OutputHelper::add_liq_UserDefinedNormal(phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong1, validConnections,  inputSrc, inputDes, outputSrc)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.colorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.colorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescenceB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescenceB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraX)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraX)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraY)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraY)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCameraZ)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCameraZ)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColorB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyR)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyR)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyG)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyG)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparencyB)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparencyB)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong1,,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|spotLight3|spotLightShape3,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|spotLight3|spotLightShape3,,perspShape,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|spotLight3|spotLightShape3,perspShape,...)
                    >10 Renderer::exportSpotLight(spotlight,spotLightShape3,...)
                      >11 addLightGroupForLight(|spotLight3|spotLightShape3)
            >6 Renderer::writeLight_post(|spotLight3|spotLightShape3,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
            >6 Renderer::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane1|pPlaneShape1,R:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write1(|pPlane1|pPlaneShape1,perspShape)
                            >14 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                            >14 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                            >14 liqTokenPointer:getTokenFloatArraySize() 
,m_pType=1
,m_dType=2
,m_tokenName=P
,detailedTokenName=P
,m_arraySize=4
,m_uArraySize=0
,m_eltSize=3
,m_isArray=1
,m_isUArray=0
,m_isString=0
,m_isFull=0
,m_stringSize=0
,m_tokenSize=12
,m_tokenFloats.use_count()=1

                            >14 liqRibData::getFullPathName()
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
              >7 Renderer::render()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=spotlightFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
    >2 OutputMgr::uninit()
      >3 OutputCall::~OutputCall()
      >3 OutputBase::~OutputBase()
      >3 OutputESS::~OutputESS()
      >3 OutputBase::~OutputBase()
      >3 OutputESA::~OutputESA()
      >3 OutputBase::~OutputBase()
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
    >2 Renderer::~Renderer()
  >1 RendererMgr::unsetFactory()
