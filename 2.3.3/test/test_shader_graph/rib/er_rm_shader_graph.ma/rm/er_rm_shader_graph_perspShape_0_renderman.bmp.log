>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::createFactory(renderman)
  >1 RendererMgr::install()
  >1 RendererMgr::prologue()
    >2 Renderer::openLog()(but do nothing now)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(er_rm_shader_graphFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(lambert5)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqGetSloInfo::setShaderNode(lambert5)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(lambert5)
          >5 liqShader::liqShader(lambert14)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqGetSloInfo::setShaderNode(lambert14)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(plastic)
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibClipPlaneData::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
              >7 liqRibHT::hash(|pointLight2|pointLightShape2,1)
              >7 liqRibClipPlaneData::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,4)
                >8 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                >8 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube1|pCubeShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pCube1|pCubeShape1,2)
              >7 liqRibClipPlaneData::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube1,,2)
                >8 liqRibNode::parseVectorAttributes(pCube1,,3)
                >8 liqRibNode::parseVectorAttributes(pCube1,,4)
                >8 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube2|pCubeShape2,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pCube2|pCubeShape2,3)
              >7 liqRibClipPlaneData::find(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube2|pCubeShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube2,,2)
                >8 liqRibNode::parseVectorAttributes(pCube2,,3)
                >8 liqRibNode::parseVectorAttributes(pCube2,,4)
                >8 liqRibNode::findShadingGroup(|pCube2|pCubeShape2,0)
                >8 liqRibNode::findShader(lambert6SG)
                >8 liqRibNode::findDisp(lambert6SG)
                >8 liqRibNode::findVolume(lambert6SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube2|pCubeShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube2|pCubeShape2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube3|pCubeShape3,lframe,0,0,4,matrix,,-1)
              >7 liqRibHT::hash(|pCube3|pCubeShape3,4)
              >7 liqRibClipPlaneData::find(|pCube3|pCubeShape3,|pCube3|pCubeShape3,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube3|pCubeShape3,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube3,,2)
                >8 liqRibNode::parseVectorAttributes(pCube3,,3)
                >8 liqRibNode::parseVectorAttributes(pCube3,,4)
                >8 liqRibNode::findShadingGroup(|pCube3|pCubeShape3,0)
                >8 liqRibNode::findShader(blinn1SG)
                >8 liqRibNode::findDisp(blinn1SG)
                >8 liqRibNode::findVolume(blinn1SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube3|pCubeShape3,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube3|pCubeShape3)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube4|pCubeShape4,lframe,0,0,5,matrix,,-1)
              >7 liqRibHT::hash(|pCube4|pCubeShape4,5)
              >7 liqRibClipPlaneData::find(|pCube4|pCubeShape4,|pCube4|pCubeShape4,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube4|pCubeShape4,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube4,,2)
                >8 liqRibNode::parseVectorAttributes(pCube4,,3)
                >8 liqRibNode::parseVectorAttributes(pCube4,,4)
                >8 liqRibNode::findShadingGroup(|pCube4|pCubeShape4,0)
                >8 liqRibNode::findShader(blinn2SG)
                >8 liqRibNode::findDisp(blinn2SG)
                >8 liqRibNode::findVolume(blinn2SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube4|pCubeShape4,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube4|pCubeShape4)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape4)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube5|pCubeShape5,lframe,0,0,6,matrix,,-1)
              >7 liqRibHT::hash(|pCube5|pCubeShape5,6)
              >7 liqRibClipPlaneData::find(|pCube5|pCubeShape5,|pCube5|pCubeShape5,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube5|pCubeShape5,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube5,,2)
                >8 liqRibNode::parseVectorAttributes(pCube5,,3)
                >8 liqRibNode::parseVectorAttributes(pCube5,,4)
                >8 liqRibNode::findShadingGroup(|pCube5|pCubeShape5,0)
                >8 liqRibNode::findShader(lambert7SG)
                >8 liqRibNode::findDisp(lambert7SG)
                >8 liqRibNode::findVolume(lambert7SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube5|pCubeShape5,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube5|pCubeShape5)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape5)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube6|pCubeShape6,lframe,0,0,7,matrix,,-1)
              >7 liqRibHT::hash(|pCube6|pCubeShape6,7)
              >7 liqRibClipPlaneData::find(|pCube6|pCubeShape6,|pCube6|pCubeShape6,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube6|pCubeShape6,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube6,,2)
                >8 liqRibNode::parseVectorAttributes(pCube6,,3)
                >8 liqRibNode::parseVectorAttributes(pCube6,,4)
                >8 liqRibNode::findShadingGroup(|pCube6|pCubeShape6,0)
                >8 liqRibNode::findShader(lambert9SG)
                >8 liqRibNode::findDisp(lambert9SG)
                >8 liqRibNode::findVolume(lambert9SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube6|pCubeShape6,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube6|pCubeShape6)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape6)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,8)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 rm::Renderer::doTextures(txtList.size()=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 rm::Renderer::doShadows(shadowList_.size()=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/er_rm_shader_graph_perspShape.0001.rib(strlen=79)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=16:32:50.68),E:/MyDocuments/maya/projects/default/er_rm_shader_graph,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 tHeroRibWriterMgr::framePrologue_display(perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 tRibCameraMgr::framePrologue_camera(1,job.title=perspShape)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,initialShadingGroup,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert1)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1,pCubeShape1,surfaceShader)
                    >10 Visitor::initShaderData(lambert1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                          >13 ShaderMgr::hasShaderType(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                          >13 ShaderMgr::hasShaderType(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                          >13 ShaderMgr::hasShaderType(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert3, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                    >10 Visitor::preOutput(lambert1)
                    >10 Visitor::outputBegin(lambert1), open shader file
                      >11 getShaderFilePath_SRC(lambert1)
                        >12 getShaderFilePath_NoExt(lambert1)
                      >11 getShaderName(lambert1)
                      >11 Visitor::defineAOVVariables(lambert1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(lambert2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert2,lambert)
                          >13 Visitor::visitLambert(lambert2)
                            >14 OutputHelper::beginRSL(lambert2)
                              >15 getShaderName(lambert2)
                            >14 ShaderMgr::convertibleConnection(lambert2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                            >14 ShaderMgr::convertibleConnection(lambert2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(lambert2,outColor,lambert2.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,lambert2_outColor)
                            >14 getVariableName(lambert2_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert2,,lambert2_outColor124)
                        >12 getVariableName(lambert2_outColor)
                        >12 getShaderName(lambert2)
                      >11 Visitor::outputUpstreamShader(lambert3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert3,lambert)
                          >13 Visitor::visitLambert(lambert3)
                            >14 OutputHelper::beginRSL(lambert3)
                              >15 getShaderName(lambert3)
                            >14 ShaderMgr::convertibleConnection(lambert3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                            >14 ShaderMgr::convertibleConnection(lambert3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert3.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert3, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert3, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(lambert3,outColor,lambert3.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,lambert3_outColor)
                            >14 getVariableName(lambert3_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert3,,lambert3_outColor124)
                        >12 getVariableName(lambert3_outColor)
                        >12 getShaderName(lambert3)
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                              >15 getShaderName(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(lambert4,outColor,lambert4.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,lambert4_outColor)
                            >14 getVariableName(lambert4_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,,lambert4_outColor124)
                        >12 getVariableName(lambert4_outColor)
                        >12 getShaderName(lambert4)
                      >11 Visitor::outputUpstreamShader(lambert1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                          >13 Visitor::visitLambert(lambert1)
                            >14 OutputHelper::beginRSL(lambert1)
                              >15 getShaderName(lambert1)
                            >14 ShaderMgr::convertibleConnection(lambert1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                            >14 ShaderMgr::convertibleConnection(lambert1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert1.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert1.ambientColor, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert1.incandescence, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert1,lambert2_outColor124lambert3_outColor124lambert4_outColor124,)
                        >12 getVariableName(lambert2_outColor)
                        >12 getVariableName(lambert3_outColor)
                        >12 getVariableName(lambert4_outColor)
                        >12 getShaderName(lambert1)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert1)
                        >12 getShaderFilePath_NoExt(lambert1)
                      >11 getShaderFilePath_SRC(lambert1)
                        >12 getShaderFilePath_NoExt(lambert1)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,initialShadingGroup,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,initialShadingGroup,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                >8 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                  >9 Visitor::outputShadingGroup(initialShadingGroup)
                    >10 Visitor::outputShadingGroup(initialShadingGroup,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert6SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert6SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert6)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert6)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert6,pCubeShape2,surfaceShader)
                    >10 Visitor::initShaderData(lambert6,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert6, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert6)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                    >10 Visitor::preOutput(lambert6)
                    >10 Visitor::outputBegin(lambert6), open shader file
                      >11 getShaderFilePath_SRC(lambert6)
                        >12 getShaderFilePath_NoExt(lambert6)
                      >11 getShaderName(lambert6)
                      >11 Visitor::defineAOVVariables(lambert6)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(lambert6)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert6,lambert)
                          >13 Visitor::visitLambert(lambert6)
                            >14 OutputHelper::beginRSL(lambert6)
                              >15 getShaderName(lambert6)
                            >14 ShaderMgr::convertibleConnection(lambert6.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                            >14 ShaderMgr::convertibleConnection(lambert6.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert6.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert6.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert6.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert6.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert6.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert6, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert6, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert6SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert6.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert6.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert6,,)
                        >12 getShaderName(lambert6)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert6)
                        >12 getShaderFilePath_NoExt(lambert6)
                      >11 getShaderFilePath_SRC(lambert6)
                        >12 getShaderFilePath_NoExt(lambert6)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert6)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert6SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert6SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert6SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert6SG)
                  >9 Visitor::outputShadingGroup(lambert6SG)
                    >10 Visitor::outputShadingGroup(lambert6SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert6SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(blinn1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape3,blinn1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(blinn1)
                  >9 ConvertShadingNetwork::exportShaderBegin(blinn1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(blinn1,pCubeShape3,surfaceShader)
                    >10 Visitor::initShaderData(blinn1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(blinn1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(blinn1)
                        >12 ShaderMgr::hasShaderType(blinn)
                      >11 ShaderMgr::getValidConnectionRef(blinn)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.eccentricity)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.eccentricity)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.specularRollOff)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.specularRollOff)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn1SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                    >10 Visitor::preOutput(blinn1)
                    >10 Visitor::outputBegin(blinn1), open shader file
                      >11 getShaderFilePath_SRC(blinn1)
                        >12 getShaderFilePath_NoExt(blinn1)
                      >11 getShaderName(blinn1)
                      >11 Visitor::defineAOVVariables(blinn1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(blinn1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(blinn1,blinn)
                          >13 Visitor::visitBlinn(blinn1)
                            >14 OutputHelper::beginRSL(blinn1)
                              >15 getShaderName(blinn1)
                            >14 ShaderMgr::convertibleConnection(blinn1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn1.color)
                            >14 ShaderMgr::convertibleConnection(blinn1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn1.transparency)
                            >14 ShaderMgr::convertibleConnection(blinn1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(blinn1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescence)
                            >14 ShaderMgr::convertibleConnection(blinn1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn1.diffuse)
                            >14 ShaderMgr::convertibleConnection(blinn1.eccentricity)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn1.eccentricity)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn1.eccentricity)
                            >14 ShaderMgr::convertibleConnection(blinn1.specularRollOff)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn1.specularRollOff)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn1.specularRollOff)
                            >14 ShaderMgr::convertibleConnection(blinn1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColor)
                            >14 ShaderMgr::convertibleConnection(blinn1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(blinn)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(blinn1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(blinn1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                      >11 Visitor::addShaderMethodBody(blinn1,,)
                        >12 getShaderName(blinn1)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(blinn1)
                        >12 getShaderFilePath_NoExt(blinn1)
                      >11 getShaderFilePath_SRC(blinn1)
                        >12 getShaderFilePath_NoExt(blinn1)
                  >9 ConvertShadingNetwork::exportShaderEnd(blinn1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape3,blinn1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape3,blinn1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(blinn1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(blinn1SG)
                  >9 Visitor::outputShadingGroup(blinn1SG)
                    >10 Visitor::outputShadingGroup(blinn1SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(blinn1SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(blinn2SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape4,blinn2SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(blinn2)
                  >9 ConvertShadingNetwork::exportShaderBegin(blinn2)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(blinn2,pCubeShape4,surfaceShader)
                    >10 Visitor::initShaderData(blinn2,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(blinn2, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                        >12 ShaderMgr::hasShaderType(blinn)
                      >11 ShaderMgr::getValidConnectionRef(blinn)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.color)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn3)
                          >13 ShaderMgr::hasShaderType(blinn)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn4)
                          >13 ShaderMgr::hasShaderType(blinn)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescence)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn5)
                          >13 ShaderMgr::hasShaderType(blinn)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.eccentricity)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.eccentricity)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.specularRollOff)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.specularRollOff)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(blinn2.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(blinn2.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn2SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(blinn3, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn3)
                          >13 ShaderMgr::hasShaderType(blinn)
                        >12 ShaderMgr::getValidConnectionRef(blinn)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn3SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                            >14 ShaderMgr::hasShaderType(blinn)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(blinn4, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn4)
                          >13 ShaderMgr::hasShaderType(blinn)
                        >12 ShaderMgr::getValidConnectionRef(blinn)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                            >14 ShaderMgr::hasShaderType(blinn)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(blinn5, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn5)
                          >13 ShaderMgr::hasShaderType(blinn)
                        >12 ShaderMgr::getValidConnectionRef(blinn)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                            >14 ShaderMgr::hasShaderType(blinn)
                    >10 Visitor::preOutput(blinn2)
                    >10 Visitor::outputBegin(blinn2), open shader file
                      >11 getShaderFilePath_SRC(blinn2)
                        >12 getShaderFilePath_NoExt(blinn2)
                      >11 getShaderName(blinn2)
                      >11 Visitor::defineAOVVariables(blinn2)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(blinn3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(blinn3,blinn)
                          >13 Visitor::visitBlinn(blinn3)
                            >14 OutputHelper::beginRSL(blinn3)
                              >15 getShaderName(blinn3)
                            >14 ShaderMgr::convertibleConnection(blinn3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn3.color)
                            >14 ShaderMgr::convertibleConnection(blinn3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn3.transparency)
                            >14 ShaderMgr::convertibleConnection(blinn3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(blinn3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescence)
                            >14 ShaderMgr::convertibleConnection(blinn3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn3.diffuse)
                            >14 ShaderMgr::convertibleConnection(blinn3.eccentricity)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn3.eccentricity)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn3.eccentricity)
                            >14 ShaderMgr::convertibleConnection(blinn3.specularRollOff)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn3.specularRollOff)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn3.specularRollOff)
                            >14 ShaderMgr::convertibleConnection(blinn3.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn3.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColor)
                            >14 ShaderMgr::convertibleConnection(blinn3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                  >17 ShaderMgr::hasShaderType(blinn)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(blinn)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(blinn3, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(blinn3, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn3.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn3.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn3SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                            >14 ShaderMgr::hasShaderType(blinn)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(blinn3,outColor,blinn3.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,blinn3_outColor)
                            >14 getVariableName(blinn3_outColor)
                      >11 Visitor::addShaderMethodBody(blinn3,,blinn3_outColor124)
                        >12 getVariableName(blinn3_outColor)
                        >12 getShaderName(blinn3)
                      >11 Visitor::outputUpstreamShader(blinn4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(blinn4,blinn)
                          >13 Visitor::visitBlinn(blinn4)
                            >14 OutputHelper::beginRSL(blinn4)
                              >15 getShaderName(blinn4)
                            >14 ShaderMgr::convertibleConnection(blinn4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn4.color)
                            >14 ShaderMgr::convertibleConnection(blinn4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn4.transparency)
                            >14 ShaderMgr::convertibleConnection(blinn4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(blinn4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescence)
                            >14 ShaderMgr::convertibleConnection(blinn4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn4.diffuse)
                            >14 ShaderMgr::convertibleConnection(blinn4.eccentricity)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn4.eccentricity)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn4.eccentricity)
                            >14 ShaderMgr::convertibleConnection(blinn4.specularRollOff)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn4.specularRollOff)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn4.specularRollOff)
                            >14 ShaderMgr::convertibleConnection(blinn4.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn4.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColor)
                            >14 ShaderMgr::convertibleConnection(blinn4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                  >17 ShaderMgr::hasShaderType(blinn)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(blinn)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(blinn4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(blinn4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                            >14 ShaderMgr::hasShaderType(blinn)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(blinn4,outColor,blinn4.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,blinn4_outColor)
                            >14 getVariableName(blinn4_outColor)
                      >11 Visitor::addShaderMethodBody(blinn4,,blinn4_outColor124)
                        >12 getVariableName(blinn4_outColor)
                        >12 getShaderName(blinn4)
                      >11 Visitor::outputUpstreamShader(blinn5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(blinn5,blinn)
                          >13 Visitor::visitBlinn(blinn5)
                            >14 OutputHelper::beginRSL(blinn5)
                              >15 getShaderName(blinn5)
                            >14 ShaderMgr::convertibleConnection(blinn5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn5.color)
                            >14 ShaderMgr::convertibleConnection(blinn5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn5.transparency)
                            >14 ShaderMgr::convertibleConnection(blinn5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(blinn5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescence)
                            >14 ShaderMgr::convertibleConnection(blinn5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn5.diffuse)
                            >14 ShaderMgr::convertibleConnection(blinn5.eccentricity)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn5.eccentricity)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn5.eccentricity)
                            >14 ShaderMgr::convertibleConnection(blinn5.specularRollOff)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn5.specularRollOff)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn5.specularRollOff)
                            >14 ShaderMgr::convertibleConnection(blinn5.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn5.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColor)
                            >14 ShaderMgr::convertibleConnection(blinn5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                                  >17 ShaderMgr::hasShaderType(blinn)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(blinn)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(blinn5, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(blinn5, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn2)
                            >14 ShaderMgr::hasShaderType(blinn)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(blinn5,outColor,blinn5.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,blinn5_outColor)
                            >14 getVariableName(blinn5_outColor)
                      >11 Visitor::addShaderMethodBody(blinn5,,blinn5_outColor124)
                        >12 getVariableName(blinn5_outColor)
                        >12 getShaderName(blinn5)
                      >11 Visitor::outputUpstreamShader(blinn2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(blinn2,blinn)
                          >13 Visitor::visitBlinn(blinn2)
                            >14 OutputHelper::beginRSL(blinn2)
                              >15 getShaderName(blinn2)
                            >14 ShaderMgr::convertibleConnection(blinn2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn2.color)
                            >14 ShaderMgr::convertibleConnection(blinn2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn2.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn3)
                                  >17 ShaderMgr::hasShaderType(blinn)
                            >14 ShaderMgr::convertibleConnection(blinn2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn4)
                                  >17 ShaderMgr::hasShaderType(blinn)
                            >14 ShaderMgr::convertibleConnection(blinn2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescence)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn5)
                                  >17 ShaderMgr::hasShaderType(blinn)
                            >14 ShaderMgr::convertibleConnection(blinn2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn2.diffuse)
                            >14 ShaderMgr::convertibleConnection(blinn2.eccentricity)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn2.eccentricity)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn2.eccentricity)
                            >14 ShaderMgr::convertibleConnection(blinn2.specularRollOff)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn2.specularRollOff)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn2.specularRollOff)
                            >14 ShaderMgr::convertibleConnection(blinn2.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn2.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColor)
                            >14 ShaderMgr::convertibleConnection(blinn2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(blinn)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(blinn2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(blinn2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn3)
                            >14 ShaderMgr::hasShaderType(blinn)
                        >12 ConvertShadingNetwork::addNodeInputVariable(blinn2.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn3)
                            >14 ShaderMgr::hasShaderType(blinn)
                          >13 ShaderMgr::getValidConnectionRef(blinn)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.ambientColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn4)
                            >14 ShaderMgr::hasShaderType(blinn)
                        >12 ConvertShadingNetwork::addNodeInputVariable(blinn2.ambientColor, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn4)
                            >14 ShaderMgr::hasShaderType(blinn)
                          >13 ShaderMgr::getValidConnectionRef(blinn)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.incandescence)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn5)
                            >14 ShaderMgr::hasShaderType(blinn)
                        >12 ConvertShadingNetwork::addNodeInputVariable(blinn2.incandescence, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn5)
                            >14 ShaderMgr::hasShaderType(blinn)
                          >13 ShaderMgr::getValidConnectionRef(blinn)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn2SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                      >11 Visitor::addShaderMethodBody(blinn2,blinn3_outColor124blinn4_outColor124blinn5_outColor124,)
                        >12 getVariableName(blinn3_outColor)
                        >12 getVariableName(blinn4_outColor)
                        >12 getVariableName(blinn5_outColor)
                        >12 getShaderName(blinn2)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(blinn2)
                        >12 getShaderFilePath_NoExt(blinn2)
                      >11 getShaderFilePath_SRC(blinn2)
                        >12 getShaderFilePath_NoExt(blinn2)
                  >9 ConvertShadingNetwork::exportShaderEnd(blinn2)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape4,blinn2SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape4,blinn2SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(blinn2SG)
                >8 ConvertShadingNetwork::outputShadingGroup(blinn2SG)
                  >9 Visitor::outputShadingGroup(blinn2SG)
                    >10 Visitor::outputShadingGroup(blinn2SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(blinn2SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert7SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape5,lambert7SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert7)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert7)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert7,pCubeShape5,surfaceShader)
                    >10 Visitor::initShaderData(lambert7,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert7, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert7.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert7.color)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert7.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert7.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn6)
                          >13 ShaderMgr::hasShaderType(blinn)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert8)
                          >13 ShaderMgr::hasShaderType(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert7.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert7.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert7.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert7.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert7.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert7SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(blinn6, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(blinn6)
                          >13 ShaderMgr::hasShaderType(blinn)
                        >12 ShaderMgr::getValidConnectionRef(blinn)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn6SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                            >14 ShaderMgr::hasShaderType(lambert)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert8, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert8)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert8SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparency)
                    >10 Visitor::preOutput(lambert7)
                    >10 Visitor::outputBegin(lambert7), open shader file
                      >11 getShaderFilePath_SRC(lambert7)
                        >12 getShaderFilePath_NoExt(lambert7)
                      >11 getShaderName(lambert7)
                      >11 Visitor::defineAOVVariables(lambert7)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(blinn6)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(blinn6,blinn)
                          >13 Visitor::visitBlinn(blinn6)
                            >14 OutputHelper::beginRSL(blinn6)
                              >15 getShaderName(blinn6)
                            >14 ShaderMgr::convertibleConnection(blinn6.color)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn6.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn6.color)
                            >14 ShaderMgr::convertibleConnection(blinn6.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn6.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn6.transparency)
                            >14 ShaderMgr::convertibleConnection(blinn6.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColor)
                            >14 ShaderMgr::convertibleConnection(blinn6.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn6.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescence)
                            >14 ShaderMgr::convertibleConnection(blinn6.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn6.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn6.diffuse)
                            >14 ShaderMgr::convertibleConnection(blinn6.eccentricity)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn6.eccentricity)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn6.eccentricity)
                            >14 ShaderMgr::convertibleConnection(blinn6.specularRollOff)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn6.specularRollOff)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn6.specularRollOff)
                            >14 ShaderMgr::convertibleConnection(blinn6.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn6.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColor)
                            >14 ShaderMgr::convertibleConnection(blinn6.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(blinn6.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(blinn6.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn6SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(blinn)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(blinn6, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(blinn6, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.color)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.eccentricity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.eccentricity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.specularRollOff)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.specularRollOff)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(blinn6.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(blinn6.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn6SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(blinn6,outColor,blinn6.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,blinn6_outColor)
                            >14 getVariableName(blinn6_outColor)
                      >11 Visitor::addShaderMethodBody(blinn6,,blinn6_outColor124)
                        >12 getVariableName(blinn6_outColor)
                        >12 getShaderName(blinn6)
                      >11 Visitor::outputUpstreamShader(lambert8)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert8,lambert)
                          >13 Visitor::visitLambert(lambert8)
                            >14 OutputHelper::beginRSL(lambert8)
                              >15 getShaderName(lambert8)
                            >14 ShaderMgr::convertibleConnection(lambert8.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert8.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert8.color)
                            >14 ShaderMgr::convertibleConnection(lambert8.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert8.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert8.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert8.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert8.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert8.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert8.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert8.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert8.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert8.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert8.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert8.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert8SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert8.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert8, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert8, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert8SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert7)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(lambert8,outColor,lambert8.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,lambert8_outColor)
                            >14 getVariableName(lambert8_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert8.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert8.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert8,,lambert8_outColor124)
                        >12 getVariableName(lambert8_outColor)
                        >12 getShaderName(lambert8)
                      >11 Visitor::outputUpstreamShader(lambert7)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert7,lambert)
                          >13 Visitor::visitLambert(lambert7)
                            >14 OutputHelper::beginRSL(lambert7)
                              >15 getShaderName(lambert7)
                            >14 ShaderMgr::convertibleConnection(lambert7.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert7.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert7.color)
                            >14 ShaderMgr::convertibleConnection(lambert7.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert7.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert7.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(blinn6)
                                  >17 ShaderMgr::hasShaderType(blinn)
                            >14 ShaderMgr::convertibleConnection(lambert7.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert8)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert7.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert7.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert7.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert7.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert7.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert7.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert7.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert7.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert7SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert7.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert7, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert7, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert7.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert7.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert7.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert7.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn6)
                            >14 ShaderMgr::hasShaderType(blinn)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert7.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(blinn6)
                            >14 ShaderMgr::hasShaderType(blinn)
                          >13 ShaderMgr::getValidConnectionRef(blinn)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert7.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert7.ambientColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert8)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert7.ambientColor, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert8)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert7.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert7.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert7.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert7.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert7.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert7.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert7SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert7.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert7.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert7,blinn6_outColor124lambert8_outColor124,)
                        >12 getVariableName(blinn6_outColor)
                        >12 getVariableName(lambert8_outColor)
                        >12 getShaderName(lambert7)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert7)
                        >12 getShaderFilePath_NoExt(lambert7)
                      >11 getShaderFilePath_SRC(lambert7)
                        >12 getShaderFilePath_NoExt(lambert7)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert7)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape5,lambert7SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape5,lambert7SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert7SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert7SG)
                  >9 Visitor::outputShadingGroup(lambert7SG)
                    >10 Visitor::outputShadingGroup(lambert7SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert7SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert9SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape6,lambert9SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert9)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert9)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert9,pCubeShape6,surfaceShader)
                    >10 Visitor::initShaderData(lambert9,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert9, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert9.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert9.color)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert9.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert9.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                          >13 ShaderMgr::hasShaderType(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                          >13 ShaderMgr::hasShaderType(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert9.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert9.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert9.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert9.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert9.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert9SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert10, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert11)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert10SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert11, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert11)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert11.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert11.color)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert11.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert11.transparency)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert11.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert11.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert11.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert11.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert11.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(lambert11SG)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                              >15 ShaderMgr::hasShaderType(lambert)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert12, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                          >13 ShaderMgr::hasShaderType(lambert)
                        >12 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert13)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert12SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert13, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert13)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert13.color)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert13.color)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert13.transparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert13.transparency)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColor)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert13.incandescence)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescence)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert13.diffuse)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert13.diffuse)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert13.outColor)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert13.outColor)
                            >14 ConvertShadingNetwork::nodeIsConvertible(lambert13SG)
                              >15 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                              >15 ShaderMgr::hasShaderType(lambert)
                          >13 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparency)
                            >14 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparency)
                    >10 Visitor::preOutput(lambert9)
                    >10 Visitor::outputBegin(lambert9), open shader file
                      >11 getShaderFilePath_SRC(lambert9)
                        >12 getShaderFilePath_NoExt(lambert9)
                      >11 getShaderName(lambert9)
                      >11 Visitor::defineAOVVariables(lambert9)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(lambert11)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert11,lambert)
                          >13 Visitor::visitLambert(lambert11)
                            >14 OutputHelper::beginRSL(lambert11)
                              >15 getShaderName(lambert11)
                            >14 ShaderMgr::convertibleConnection(lambert11.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert11.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert11.color)
                            >14 ShaderMgr::convertibleConnection(lambert11.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert11.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert11.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert11.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert11.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert11.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert11.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert11.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert11.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert11.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert11.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert11.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert11SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert11.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert11, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert11, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert11.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert11.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert11.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert11.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert11.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert11.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert11.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert11.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert11.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert11.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert11.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert11.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert11SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(lambert11,outColor,lambert11.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,lambert11_outColor)
                            >14 getVariableName(lambert11_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert11.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert11.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert11,,lambert11_outColor124)
                        >12 getVariableName(lambert11_outColor)
                        >12 getShaderName(lambert11)
                      >11 Visitor::outputUpstreamShader(lambert10)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert10,lambert)
                          >13 Visitor::visitLambert(lambert10)
                            >14 OutputHelper::beginRSL(lambert10)
                              >15 getShaderName(lambert10)
                            >14 ShaderMgr::convertibleConnection(lambert10.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert10.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert10.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert11)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert10.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert10.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert10.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert10.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert10.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert10.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert10.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert10.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert10.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert10.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert10.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert10.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert10SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert10.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert10, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert10, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert11)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert10.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert11)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert10SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(lambert10,outColor,lambert10.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,lambert10_outColor)
                            >14 getVariableName(lambert10_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert10.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert10.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert10,lambert11_outColor124,lambert10_outColor124)
                        >12 getVariableName(lambert11_outColor)
                        >12 getVariableName(lambert10_outColor)
                        >12 getShaderName(lambert10)
                      >11 Visitor::outputUpstreamShader(lambert13)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert13,lambert)
                          >13 Visitor::visitLambert(lambert13)
                            >14 OutputHelper::beginRSL(lambert13)
                              >15 getShaderName(lambert13)
                            >14 ShaderMgr::convertibleConnection(lambert13.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert13.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert13.color)
                            >14 ShaderMgr::convertibleConnection(lambert13.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert13.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert13.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert13.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert13.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert13.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert13.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert13.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert13.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert13.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert13.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert13.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert13SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert13.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert13, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert13, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert13.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert13.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert13.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert13.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert13.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert13.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert13.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert13.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert13.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert13.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert13.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert13.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert13SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(lambert13,outColor,lambert13.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,lambert13_outColor)
                            >14 getVariableName(lambert13_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert13.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert13.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert13,,lambert13_outColor124)
                        >12 getVariableName(lambert13_outColor)
                        >12 getShaderName(lambert13)
                      >11 Visitor::outputUpstreamShader(lambert12)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert12,lambert)
                          >13 Visitor::visitLambert(lambert12)
                            >14 OutputHelper::beginRSL(lambert12)
                              >15 getShaderName(lambert12)
                            >14 ShaderMgr::convertibleConnection(lambert12.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert12.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert12.color)
                            >14 ShaderMgr::convertibleConnection(lambert12.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert12.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert12.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert13)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert12.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert12.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert12.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert12.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert12.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert12.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert12.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert12.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert12.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert12SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert12.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert12, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert12, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert13)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert12.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert13)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert12SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert9)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(lambert12,outColor,lambert12.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,lambert12_outColor)
                            >14 getVariableName(lambert12_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert12.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert12.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert12,lambert13_outColor124,lambert12_outColor124)
                        >12 getVariableName(lambert13_outColor)
                        >12 getVariableName(lambert12_outColor)
                        >12 getShaderName(lambert12)
                      >11 Visitor::outputUpstreamShader(lambert9)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert9,lambert)
                          >13 Visitor::visitLambert(lambert9)
                            >14 OutputHelper::beginRSL(lambert9)
                              >15 getShaderName(lambert9)
                            >14 ShaderMgr::convertibleConnection(lambert9.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert9.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert9.color)
                            >14 ShaderMgr::convertibleConnection(lambert9.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert9.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert9.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert9.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(lambert9.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert9.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert9.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert9.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert9.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert9.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert9.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert9.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert9SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert9.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert9, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert9, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert9.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert9.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert9.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert9.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert9.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert10)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert9.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert9.ambientColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert9.ambientColor, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert12)
                            >14 ShaderMgr::hasShaderType(lambert)
                          >13 ShaderMgr::getValidConnectionRef(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert9.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert9.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert9.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert9.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert9.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert9.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert9SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert9.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert9.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert9,lambert10_outColor124lambert12_outColor124,)
                        >12 getVariableName(lambert10_outColor)
                        >12 getVariableName(lambert12_outColor)
                        >12 getShaderName(lambert9)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert9)
                        >12 getShaderFilePath_NoExt(lambert9)
                      >11 getShaderFilePath_SRC(lambert9)
                        >12 getShaderFilePath_NoExt(lambert9)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert9)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape6,lambert9SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape6,lambert9SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert9SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert9SG)
                  >9 Visitor::outputShadingGroup(lambert9SG)
                    >10 Visitor::outputShadingGroup(lambert9SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert9SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
            >6 Renderer::writeLight_pre(|pointLight2|pointLightShape2,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight2|pointLightShape2,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube1|pCubeShape1,E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube2|pCubeShape2,perspShape)
                >8 Renderer::exportOneObject_data(|pCube2|pCubeShape2,perspShape)
                  >9 Renderer::_writeObject(|pCube2|pCubeShape2,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube2|pCubeShape2,E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube3|pCubeShape3,perspShape)
                >8 Renderer::exportOneObject_data(|pCube3|pCubeShape3,perspShape)
                  >9 Renderer::_writeObject(|pCube3|pCubeShape3,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube3|pCubeShape3,E:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube4|pCubeShape4,perspShape)
                >8 Renderer::exportOneObject_data(|pCube4|pCubeShape4,perspShape)
                  >9 Renderer::_writeObject(|pCube4|pCubeShape4,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube4_pCubeShape4.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube4_pCubeShape4.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube4|pCubeShape4,E:/MyDocuments/maya/projects/default/rib/_pCube4_pCubeShape4.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube5|pCubeShape5,perspShape)
                >8 Renderer::exportOneObject_data(|pCube5|pCubeShape5,perspShape)
                  >9 Renderer::_writeObject(|pCube5|pCubeShape5,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube5_pCubeShape5.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube5_pCubeShape5.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube5|pCubeShape5,E:/MyDocuments/maya/projects/default/rib/_pCube5_pCubeShape5.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube6|pCubeShape6,perspShape)
                >8 Renderer::exportOneObject_data(|pCube6|pCubeShape6,perspShape)
                  >9 Renderer::_writeObject(|pCube6|pCubeShape6,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube6_pCubeShape6.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube6_pCubeShape6.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube6|pCubeShape6,E:/MyDocuments/maya/projects/default/rib/_pCube6_pCubeShape6.1.rib,perspShape,ref=0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube1|pCubeShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pCube1|pCubeShape1)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pCube1|pCubeShape1)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=1,c=0,,|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pCube1|pCubeShape1,perspShape)
                    >10 liqShaderFactory::getShader(lambert5)
                      >11 liqShader::liqShader(lambert5)
                        >12 liqShaderFactory::getUniqueShaderHandler()
                        >12 liqTokenPointer:set(,0,0,0)
                        >12 liqGetSloInfo::setShaderNode(lambert5)
                    >10 liqShader::getName()
                    >10 liqRibTranslatorNew::F1(|pCube1|pCubeShape1,lambert5)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                  >9 Visitor::outputShadingGroup(initialShadingGroup,1)
                    >10 _outputShadingGroup(initialShadingGroup)
                      >11 getShaderFilePath_NoExt(lambert1)
                >8 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube1|pCubeShape1,E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube2|pCubeShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube2|pCubeShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube2|pCubeShape2,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube2|pCubeShape2)
                  >9 Renderer::exportLightLinks(perspShape,|pCube2|pCubeShape2,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube2|pCubeShape2,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pCube2|pCubeShape2)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pCube2|pCubeShape2)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pCube2|pCubeShape2,v=0,s=0,c=0,,|pCube2|pCubeShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                    >10 liqRibTranslatorNew::F2(0,|pCube2|pCubeShape2)
                    >10 liqRibNode::findShader(lambert6SG)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube2|pCubeShape2)
                  >9 Visitor::outputShadingGroup(lambert6SG,1)
                    >10 _outputShadingGroup(lambert6SG)
                      >11 getShaderFilePath_NoExt(lambert6)
                >8 Renderer::exportOneObject_reference(|pCube2|pCubeShape2,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pCube2|pCubeShape2,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube2|pCubeShape2,E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube2|pCubeShape2,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube2|pCubeShape2,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube3|pCubeShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube3|pCubeShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube3|pCubeShape3,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube3|pCubeShape3)
                  >9 Renderer::exportLightLinks(perspShape,|pCube3|pCubeShape3,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube3|pCubeShape3,|pCube3|pCubeShape3,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube3|pCubeShape3,|pCube3|pCubeShape3,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube3|pCubeShape3,|pCube3|pCubeShape3,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube3|pCubeShape3,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pCube3|pCubeShape3)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pCube3|pCubeShape3)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pCube3|pCubeShape3,v=0,s=0,c=0,,|pCube3|pCubeShape3,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube3|pCubeShape3,|pCube3|pCubeShape3,0)
                    >10 liqRibTranslatorNew::F2(0,|pCube3|pCubeShape3)
                    >10 liqRibNode::findShader(blinn1SG)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube3|pCubeShape3)
                  >9 Visitor::outputShadingGroup(blinn1SG,1)
                    >10 _outputShadingGroup(blinn1SG)
                      >11 getShaderFilePath_NoExt(blinn1)
                >8 Renderer::exportOneObject_reference(|pCube3|pCubeShape3,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pCube3|pCubeShape3,|pCube3|pCubeShape3,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pCube3|pCubeShape3,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube3|pCubeShape3,E:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube3|pCubeShape3,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube3|pCubeShape3,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube4|pCubeShape4,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube4|pCubeShape4,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube4|pCubeShape4,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube4|pCubeShape4)
                  >9 Renderer::exportLightLinks(perspShape,|pCube4|pCubeShape4,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube4|pCubeShape4,|pCube4|pCubeShape4,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube4|pCubeShape4,|pCube4|pCubeShape4,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube4|pCubeShape4,|pCube4|pCubeShape4,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube4|pCubeShape4,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pCube4|pCubeShape4)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pCube4|pCubeShape4)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pCube4|pCubeShape4,v=0,s=0,c=0,,|pCube4|pCubeShape4,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube4|pCubeShape4,|pCube4|pCubeShape4,0)
                    >10 liqRibTranslatorNew::F2(0,|pCube4|pCubeShape4)
                    >10 liqRibNode::findShader(blinn2SG)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube4|pCubeShape4)
                  >9 Visitor::outputShadingGroup(blinn2SG,1)
                    >10 _outputShadingGroup(blinn2SG)
                      >11 getShaderFilePath_NoExt(blinn2)
                >8 Renderer::exportOneObject_reference(|pCube4|pCubeShape4,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pCube4|pCubeShape4,|pCube4|pCubeShape4,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pCube4|pCubeShape4,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube4_pCubeShape4.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube4_pCubeShape4.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube4|pCubeShape4,E:/MyDocuments/maya/projects/default/rib/_pCube4_pCubeShape4.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube4|pCubeShape4,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube4|pCubeShape4,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube5|pCubeShape5,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube5|pCubeShape5,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube5|pCubeShape5,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube5|pCubeShape5)
                  >9 Renderer::exportLightLinks(perspShape,|pCube5|pCubeShape5,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube5|pCubeShape5,|pCube5|pCubeShape5,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube5|pCubeShape5,|pCube5|pCubeShape5,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube5|pCubeShape5,|pCube5|pCubeShape5,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube5|pCubeShape5,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pCube5|pCubeShape5)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pCube5|pCubeShape5)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pCube5|pCubeShape5,v=0,s=0,c=0,,|pCube5|pCubeShape5,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube5|pCubeShape5,|pCube5|pCubeShape5,0)
                    >10 liqRibTranslatorNew::F2(0,|pCube5|pCubeShape5)
                    >10 liqRibNode::findShader(lambert7SG)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube5|pCubeShape5)
                  >9 Visitor::outputShadingGroup(lambert7SG,1)
                    >10 _outputShadingGroup(lambert7SG)
                      >11 getShaderFilePath_NoExt(lambert7)
                >8 Renderer::exportOneObject_reference(|pCube5|pCubeShape5,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pCube5|pCubeShape5,|pCube5|pCubeShape5,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pCube5|pCubeShape5,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube5_pCubeShape5.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube5_pCubeShape5.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube5|pCubeShape5,E:/MyDocuments/maya/projects/default/rib/_pCube5_pCubeShape5.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube5|pCubeShape5,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube5|pCubeShape5,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube6|pCubeShape6,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube6|pCubeShape6,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube6|pCubeShape6,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube6|pCubeShape6)
                  >9 Renderer::exportLightLinks(perspShape,|pCube6|pCubeShape6,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube6|pCubeShape6,|pCube6|pCubeShape6,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube6|pCubeShape6,|pCube6|pCubeShape6,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube6|pCubeShape6,|pCube6|pCubeShape6,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube6|pCubeShape6,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pCube6|pCubeShape6)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pCube6|pCubeShape6)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pCube6|pCubeShape6,v=0,s=1,c=0,,|pCube6|pCubeShape6,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pCube6|pCubeShape6,perspShape)
                    >10 liqShaderFactory::getShader(lambert14)
                      >11 liqShader::liqShader(lambert14)
                        >12 liqShaderFactory::getUniqueShaderHandler()
                        >12 liqTokenPointer:set(,0,0,0)
                        >12 liqGetSloInfo::setShaderNode(lambert14)
                    >10 liqShader::getName()
                    >10 liqRibTranslatorNew::F1(|pCube6|pCubeShape6,lambert14)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube6|pCubeShape6)
                  >9 Visitor::outputShadingGroup(lambert9SG,1)
                    >10 _outputShadingGroup(lambert9SG)
                      >11 getShaderFilePath_NoExt(lambert9)
                >8 Renderer::exportOneObject_reference(|pCube6|pCubeShape6,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pCube6|pCubeShape6,|pCube6|pCubeShape6,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pCube6|pCubeShape6,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube6_pCubeShape6.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube6_pCubeShape6.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube6|pCubeShape6,E:/MyDocuments/maya/projects/default/rib/_pCube6_pCubeShape6.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube6|pCubeShape6,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube6|pCubeShape6,perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
        >4 Renderer::HeroPassEnd(perspShape)
          >5 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/er_rm_shader_graph_perspShape.0001.rib)
            >6 liqProcessLauncher::_execute(prman,   "E:/MyDocuments/maya/projects/default/rib/er_rm_shader_graph_perspShape.0001.rib","E:/MyDocuments/maya/projects/default/", wait=0)
      >3 liqRenderScript::addJob(job.title=er_rm_shader_graphFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 RendererMgr::epilogue()
    >2 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::uninstall()
  >1 RendererMgr::deleteFactory()
