//surface shader name: lambert7
surface lambert7()
{



// define some extern variables which are used in 3delight shaders -----------------------------
 color __transparency = color (1,1,1);


// define the shaders --------------------------------------------------------------------------
//shader name: blinn6
void blinn6 (
 output color outColor;
)
{
  color inColor = color (0.5,0.5,0.5);
  color transparency = color (0,0,0);
  color ambColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  float eccentricity = float 0.3;
  float specRollOff = float 0.7;
  color specColor = color (0.5,0.5,0.5);
 extern normal N;
 normal Nn = normalize( N );
 Oi = Os * color ( 1 - transparency );
 color Cdiffuse;
 Cdiffuse = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambColor ) );
 color Cspecular = 0;
 float eccSq = pow( eccentricity, 2 );
 vector V = normalize( -I );
 float NV = Nn . V;
 illuminance( P, Nn, PI / 2 )
 {
  vector Ln = normalize( L );
  vector H = normalize( V + Ln );
  float NH = Nn . H;
  float NL = Nn . Ln;
  float VH = V . H;
  float D = pow( eccSq / 
                 ( pow( NH, 2 ) * 
                   ( eccSq - 1 ) + 1 ), 2 );
  float G = min( min( 1, 2 * NH * NV / VH ), 
                 2 * NH * NL / VH );
  Cspecular += Cl * ( D * G / NV ) * mix( 1, specRollOff, pow(1-VH, 3) );
 }
 Cspecular *= specColor;
 outColor = Cdiffuse + Cspecular;
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert8
void lambert8 (
 output color outColor;
)
{
  color inColor = color (0.5,0.5,0.5);
  color transparency = color (0,0,0);
  color ambientColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert7
void lambert7 (
 color transparency;
 color ambientColor;
)
{
  color inColor = color (0.5,0.5,0.5);
//lambert7.transparency <-- blinn6.outColor
//lambert7.ambientColor <-- lambert8.outColor
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}




// call the shaders ----------------------------------------------------------------------------
 color blinn6_outColor;
 color lambert8_outColor;

 //blinn6
 blinn6(blinn6_outColor);
//input: 
//output:blinn6_outColor,

 //lambert8
 lambert8(lambert8_outColor);
//input: 
//output:lambert8_outColor,

 //lambert7
 lambert7(blinn6_outColor, lambert8_outColor);
//input: blinn6_outColor,lambert8_outColor,
//output:

}
