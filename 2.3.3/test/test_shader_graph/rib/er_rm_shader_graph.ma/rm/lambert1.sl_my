//surface shader name: lambert1
surface lambert1()
{



// define some extern variables which are used in 3delight shaders -----------------------------
 color __transparency = color (1,1,1);


// define the shaders --------------------------------------------------------------------------
//shader name: lambert2
void lambert2 (
 output color outColor;
)
{
  color inColor = color (0.033884,0.82644,0.040885);
  color transparency = color (0,0,0);
  color ambientColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert3
void lambert3 (
 output color outColor;
)
{
  color inColor = color (0.5,0.5,0.5);
  color transparency = color (0,0,0);
  color ambientColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert4
void lambert4 (
 output color outColor;
)
{
  color inColor = color (0.5,0.5,0.5);
  color transparency = color (0,0,0);
  color ambientColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert1
void lambert1 (
 color transparency;
 color ambientColor;
 color incandescence;
)
{
  color inColor = color (0,0.00300002,0.5);
//lambert1.transparency <-- lambert2.outColor
//lambert1.ambientColor <-- lambert3.outColor
//lambert1.incandescence <-- lambert4.outColor
  float diffusion = float 0.8;
  color outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}




// call the shaders ----------------------------------------------------------------------------
 color lambert2_outColor;
 color lambert3_outColor;
 color lambert4_outColor;

 //lambert2
 lambert2(lambert2_outColor);
//input: 
//output:lambert2_outColor,

 //lambert3
 lambert3(lambert3_outColor);
//input: 
//output:lambert3_outColor,

 //lambert4
 lambert4(lambert4_outColor);
//input: 
//output:lambert4_outColor,

 //lambert1
 lambert1(lambert2_outColor, lambert3_outColor, lambert4_outColor);
//input: lambert2_outColor,lambert3_outColor,lambert4_outColor,
//output:

}
