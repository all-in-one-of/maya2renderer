//shader name: lambert2
void lambert2 (
 output vector outColor;
)
{
 vector inColor = vector (0.033884,0.82644,0.040885);
 vector transparency = vector (0,0,0);
 vector ambientColor = vector (0,0,0);
 vector incandescence = vector (0,0,0);
 float diffusion = float 0.8;
 vector outTransparency = vector (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          vector diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert3
void lambert3 (
 output vector outColor;
)
{
 vector inColor = vector (0.5,0.5,0.5);
 vector transparency = vector (0,0,0);
 vector ambientColor = vector (0,0,0);
 vector incandescence = vector (0,0,0);
 float diffusion = float 0.8;
 vector outTransparency = vector (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          vector diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert4
void lambert4 (
 output vector outColor;
)
{
 vector inColor = vector (0.5,0.5,0.5);
 vector transparency = vector (0,0,0);
 vector ambientColor = vector (0,0,0);
 vector incandescence = vector (0,0,0);
 float diffusion = float 0.8;
 vector outTransparency = vector (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          vector diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert1
void lambert1 (
 vector transparency;
 vector ambientColor;
 vector incandescence;
)
{
 vector inColor = vector (0,0.00300002,0.5);
//lambert1.transparency <-- lambert2.outColor
//lambert1.ambientColor <-- lambert3.outColor
//lambert1.incandescence <-- lambert4.outColor
 float diffusion = float 0.8;
 vector outColor = vector (0,0,0);
 vector outTransparency = vector (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          vector diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//surface shader name: lambert1
surface lambert1()
{
 vector lambert2_outColor;
 vector lambert3_outColor;
 vector lambert4_outColor;

 //lambert2
 lambert2(lambert2_outColor);
//input: 
//output:lambert2_outColor,

 //lambert3
 lambert3(lambert3_outColor);
//input: 
//output:lambert3_outColor,

 //lambert4
 lambert4(lambert4_outColor);
//input: 
//output:lambert4_outColor,

 //lambert1
 lambert1(lambert2_outColor, lambert3_outColor, lambert4_outColor);
//input: lambert2_outColor,lambert3_outColor,lambert4_outColor,
//output:

}
