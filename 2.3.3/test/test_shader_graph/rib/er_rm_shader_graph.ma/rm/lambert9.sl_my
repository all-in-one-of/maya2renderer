//surface shader name: lambert9
surface lambert9()
{



// define some extern variables which are used in 3delight shaders -----------------------------
 color __transparency = color (1,1,1);


// define the shaders --------------------------------------------------------------------------
//shader name: lambert11
void lambert11 (
 output color outColor;
)
{
  color inColor = color (0,0.01375,0.5);
  color transparency = color (0,0,0);
  color ambientColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert10
void lambert10 (
 color inColor;
 output color outColor;
)
{
//lambert10.color <-- lambert11.outColor
  color transparency = color (0,0,0);
  color ambientColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert13
void lambert13 (
 output color outColor;
)
{
  color inColor = color (0.479667,0.5,0);
  color transparency = color (0,0,0);
  color ambientColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert12
void lambert12 (
 color transparency;
 output color outColor;
)
{
  color inColor = color (0.5,0.5,0.5);
//lambert12.transparency <-- lambert13.outColor
  color ambientColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert9
void lambert9 (
 color transparency;
 color ambientColor;
)
{
  color inColor = color (0.5,0.5,0.5);
//lambert9.transparency <-- lambert10.outColor
//lambert9.ambientColor <-- lambert12.outColor
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}




// call the shaders ----------------------------------------------------------------------------
 color lambert11_outColor;
 color lambert10_outColor;
 color lambert13_outColor;
 color lambert12_outColor;

 //lambert11
 lambert11(lambert11_outColor);
//input: 
//output:lambert11_outColor,

 //lambert10
 lambert10(lambert11_outColor, lambert10_outColor);
//input: lambert11_outColor,
//output:lambert10_outColor,

 //lambert13
 lambert13(lambert13_outColor);
//input: 
//output:lambert13_outColor,

 //lambert12
 lambert12(lambert13_outColor, lambert12_outColor);
//input: lambert13_outColor,
//output:lambert12_outColor,

 //lambert9
 lambert9(lambert10_outColor, lambert12_outColor);
//input: lambert10_outColor,lambert12_outColor,
//output:

}
