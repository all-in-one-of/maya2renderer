//shader name: lambert11
void lambert11 (
 output vector outColor;
)
{
 vector inColor = vector (0,0.01375,0.5);
 vector transparency = vector (0,0,0);
 vector ambientColor = vector (0,0,0);
 vector incandescence = vector (0,0,0);
 float diffusion = float 0.8;
 vector outTransparency = vector (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          vector diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert10
void lambert10 (
 vector inColor;
 output vector outColor;
)
{
//lambert10.color <-- lambert11.outColor
 vector transparency = vector (0,0,0);
 vector ambientColor = vector (0,0,0);
 vector incandescence = vector (0,0,0);
 float diffusion = float 0.8;
 vector outTransparency = vector (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          vector diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert13
void lambert13 (
 output vector outColor;
)
{
 vector inColor = vector (0.479667,0.5,0);
 vector transparency = vector (0,0,0);
 vector ambientColor = vector (0,0,0);
 vector incandescence = vector (0,0,0);
 float diffusion = float 0.8;
 vector outTransparency = vector (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          vector diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert12
void lambert12 (
 vector transparency;
 output vector outColor;
)
{
 vector inColor = vector (0.5,0.5,0.5);
//lambert12.transparency <-- lambert13.outColor
 vector ambientColor = vector (0,0,0);
 vector incandescence = vector (0,0,0);
 float diffusion = float 0.8;
 vector outTransparency = vector (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          vector diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//shader name: lambert9
void lambert9 (
 vector transparency;
 vector ambientColor;
)
{
 vector inColor = vector (0.5,0.5,0.5);
//lambert9.transparency <-- lambert10.outColor
//lambert9.ambientColor <-- lambert12.outColor
 vector incandescence = vector (0,0,0);
 float diffusion = float 0.8;
 vector outColor = vector (0,0,0);
 vector outTransparency = vector (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          vector diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}

//surface shader name: lambert9
surface lambert9()
{
 vector lambert11_outColor;
 vector lambert10_outColor;
 vector lambert13_outColor;
 vector lambert12_outColor;

 //lambert11
 lambert11(lambert11_outColor);
//input: 
//output:lambert11_outColor,

 //lambert10
 lambert10(lambert11_outColor, lambert10_outColor);
//input: lambert11_outColor,
//output:lambert10_outColor,

 //lambert13
 lambert13(lambert13_outColor);
//input: 
//output:lambert13_outColor,

 //lambert12
 lambert12(lambert13_outColor, lambert12_outColor);
//input: lambert13_outColor,
//output:lambert12_outColor,

 //lambert9
 lambert9(lambert10_outColor, lambert12_outColor);
//input: lambert10_outColor,lambert12_outColor,
//output:

}
