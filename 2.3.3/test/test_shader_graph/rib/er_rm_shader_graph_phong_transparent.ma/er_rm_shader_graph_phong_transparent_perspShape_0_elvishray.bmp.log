>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::createFactory(elvishray)
  >1 RendererMgr::install()
  >1 RendererMgr::prologue()
    >2 Renderer::openLog()(but do nothing now)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(er_rm_shader_graph_phong_transparentFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane1|pPlaneShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pPlane1|pPlaneShape1,1)
              >7 liqRibClipPlaneData::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader(phong1SG)
                >8 liqRibNode::findDisp(phong1SG)
                >8 liqRibNode::findVolume(phong1SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane2|pPlaneShape2,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape2,2)
              >7 liqRibClipPlaneData::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::findShader(phong4SG)
                >8 liqRibNode::findDisp(phong4SG)
                >8 liqRibNode::findVolume(phong4SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane3|pPlaneShape3,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pPlane3|pPlaneShape3,3)
              >7 liqRibClipPlaneData::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane3|pPlaneShape3,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane3,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane3,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane3,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane3|pPlaneShape3,0)
                >8 liqRibNode::findShader(phong5SG)
                >8 liqRibNode::findDisp(phong5SG)
                >8 liqRibNode::findVolume(phong5SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane3|pPlaneShape3,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane3|pPlaneShape3)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane4|pPlaneShape4,lframe,0,0,4,matrix,,-1)
              >7 liqRibHT::hash(|pPlane4|pPlaneShape4,4)
              >7 liqRibClipPlaneData::find(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane4|pPlaneShape4,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane4,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane4,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane4,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane4|pPlaneShape4,0)
                >8 liqRibNode::findShader(phong6SG)
                >8 liqRibNode::findDisp(phong6SG)
                >8 liqRibNode::findVolume(phong6SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane4|pPlaneShape4,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane4|pPlaneShape4)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape4)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,5)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=23:42:33.62),E:/MyDocuments/maya/projects/default/er_rm_shader_graph_phong_transparent,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,phong1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong1)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1,pPlaneShape1)
                    >10 Visitor::initShaderData(phong1)
                    >10 Visitor::initShaderData(phong1)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong1)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,place2dTexture1_repeatUV, place2dTexture1_outUV,[],[place2dTexture1_repeatUV, place2dTexture1_outUV])
                      >11 Visitor::addShaderMethodBody(place2dTexture1,place2dTexture1_repeatUV, place2dTexture1_outUV,[],[place2dTexture1_repeatUV, place2dTexture1_outUV])
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV, file1_outColor,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV, file1_outColor,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorU,place2dTexture2.mirrorU, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorV,place2dTexture2.mirrorV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,repeatUV,place2dTexture2.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture2_repeatUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture2_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateFrame,place2dTexture2.rotateFrame, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateUV,place2dTexture2.rotateUV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,stagger,place2dTexture2.stagger, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapU,place2dTexture2.wrapU, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapV,place2dTexture2.wrapV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture2_outUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture2_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture2,place2dTexture2_repeatUV, place2dTexture2_outUV,[],[place2dTexture2_repeatUV, place2dTexture2_outUV])
                      >11 Visitor::addShaderMethodBody(place2dTexture2,place2dTexture2_repeatUV, place2dTexture2_outUV,[],[place2dTexture2_repeatUV, place2dTexture2_outUV])
                      >11 Visitor::outputUpstreamShader(file2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                          >13 Visitor::visitFile(file2)
                            >14 OutputHelper::beginRSL(file2)
                            >14 ShaderMgr::convertibleConnection(file2.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file2.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file2.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                            >14 ShaderMgr::convertibleConnection(file2.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file2.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file2.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file2.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                            >14 ShaderMgr::convertibleConnection(file2.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                            >14 ShaderMgr::convertibleConnection(file2.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file2.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                            >14 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(file2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                          >13 Visitor::visitFile(file2)
                            >14 OutputHelper::beginRSL(file2)
                            >14 ShaderMgr::convertibleConnection(file2.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file2.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file2.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                            >14 ShaderMgr::convertibleConnection(file2.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file2.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file2.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file2.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                            >14 ShaderMgr::convertibleConnection(file2.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                            >14 ShaderMgr::convertibleConnection(file2.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file2.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                            >14 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(file2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file2.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file2,outColor,file2.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file2_outColor)
                          >13 Visitor::addShaderMethodVariavles(3,file2_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file2,outTransparency,file2.outTransparency, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file2_outTransparency)
                          >13 Visitor::addShaderMethodVariavles(3,file2_outTransparency)
                      >11 Visitor::addShaderMethodBody(file2,place2dTexture2_outUV, file2_outColor, file2_outTransparency,[place2dTexture2_outUV],[file2_outColor, file2_outTransparency])
                      >11 Visitor::addShaderMethodBody(file2,place2dTexture2_outUV, file2_outColor, file2_outTransparency,[place2dTexture2_outUV],[file2_outColor, file2_outTransparency])
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(phong1.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(phong1.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong1,file1_outColor, file2_outTransparency,[file1_outColor, file2_outTransparency],[])
                      >11 Visitor::addShaderMethodBody(phong1,file1_outColor, file2_outTransparency,[file1_outColor, file2_outTransparency],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,phong1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,phong1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,phong1SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,phong1SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape2,phong4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong4)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong4,pPlaneShape2)
                    >10 Visitor::initShaderData(phong4)
                    >10 Visitor::initShaderData(phong4)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong4)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file2)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file2)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(phong4)
                    >10 Visitor::preOutput(phong4)
                    >10 Visitor::outputBegin(phong4)
                    >10 Visitor::outputBegin(phong4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture1_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,place2dTexture1_repeatUV, place2dTexture1_outUV,[],[place2dTexture1_repeatUV, place2dTexture1_outUV])
                      >11 Visitor::addShaderMethodBody(place2dTexture1,place2dTexture1_repeatUV, place2dTexture1_outUV,[],[place2dTexture1_repeatUV, place2dTexture1_outUV])
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                          >13 Visitor::addShaderMethodVariavles(3,file1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV, file1_outColor,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV, file1_outColor,[place2dTexture1_outUV],[file1_outColor])
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorU,place2dTexture2.mirrorU, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,mirrorV,place2dTexture2.mirrorV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,repeatUV,place2dTexture2.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture2_repeatUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture2_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateFrame,place2dTexture2.rotateFrame, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,rotateUV,place2dTexture2.rotateUV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,stagger,place2dTexture2.stagger, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapU,place2dTexture2.wrapU, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,wrapV,place2dTexture2.wrapV, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture2_outUV)
                          >13 Visitor::addShaderMethodVariavles(2,place2dTexture2_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture2,place2dTexture2_repeatUV, place2dTexture2_outUV,[],[place2dTexture2_repeatUV, place2dTexture2_outUV])
                      >11 Visitor::addShaderMethodBody(place2dTexture2,place2dTexture2_repeatUV, place2dTexture2_outUV,[],[place2dTexture2_repeatUV, place2dTexture2_outUV])
                      >11 Visitor::outputUpstreamShader(file2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                          >13 Visitor::visitFile(file2)
                            >14 OutputHelper::beginRSL(file2)
                            >14 ShaderMgr::convertibleConnection(file2.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file2.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file2.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                            >14 ShaderMgr::convertibleConnection(file2.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file2.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file2.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file2.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                            >14 ShaderMgr::convertibleConnection(file2.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                            >14 ShaderMgr::convertibleConnection(file2.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file2.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                            >14 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(file2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file2,file)
                          >13 Visitor::visitFile(file2)
                            >14 OutputHelper::beginRSL(file2)
                            >14 ShaderMgr::convertibleConnection(file2.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file2.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file2.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file2.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                            >14 ShaderMgr::convertibleConnection(file2.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file2.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file2.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file2.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                            >14 ShaderMgr::convertibleConnection(file2.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                            >14 ShaderMgr::convertibleConnection(file2.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file2.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                            >14 ShaderMgr::convertibleConnection(file2.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 ShaderMgr::convertibleConnection(file2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1)
                                  >17 ShaderMgr::hasShaderType(phong)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file2.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file2,outColor,file2.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file2_outColor)
                          >13 Visitor::addShaderMethodVariavles(3,file2_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file2.outTransparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1)
                            >14 ShaderMgr::hasShaderType(phong)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file2,outTransparency,file2.outTransparency, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,file2_outTransparency)
                          >13 Visitor::addShaderMethodVariavles(3,file2_outTransparency)
                      >11 Visitor::addShaderMethodBody(file2,place2dTexture2_outUV, file2_outColor, file2_outTransparency,[place2dTexture2_outUV],[file2_outColor, file2_outTransparency])
                      >11 Visitor::addShaderMethodBody(file2,place2dTexture2_outUV, file2_outColor, file2_outTransparency,[place2dTexture2_outUV],[file2_outColor, file2_outTransparency])
                      >11 Visitor::outputUpstreamShader(phong4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong4,phong)
                          >13 Visitor::visitPhong(phong4)
                            >14 OutputHelper::beginRSL(phong4)
                            >14 ShaderMgr::convertibleConnection(phong4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(phong4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(phong4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong4.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong4.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong4.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong4,phong)
                          >13 Visitor::visitPhong(phong4)
                            >14 OutputHelper::beginRSL(phong4)
                            >14 ShaderMgr::convertibleConnection(phong4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(phong4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file2)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(phong4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong4.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong4.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong4.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(phong4.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(phong4.transparency, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file2)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong4,file1_outColor, file2_outColor,[file1_outColor, file2_outColor],[])
                      >11 Visitor::addShaderMethodBody(phong4,file1_outColor, file2_outColor,[file1_outColor, file2_outColor],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape2,phong4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape2,phong4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape2,phong4SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape2,phong4SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong4SG)
                  >9 Visitor::outputShadingGroup(phong4SG)
                  >9 Visitor::outputShadingGroup(phong4SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong4SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong5SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape3,phong5SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong5)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong5)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong5,pPlaneShape3)
                    >10 Visitor::initShaderData(phong5)
                    >10 Visitor::initShaderData(phong5)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong5, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong5)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                    >10 Visitor::preOutput(phong5)
                    >10 Visitor::preOutput(phong5)
                    >10 Visitor::outputBegin(phong5)
                    >10 Visitor::outputBegin(phong5)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong5,phong)
                          >13 Visitor::visitPhong(phong5)
                            >14 OutputHelper::beginRSL(phong5)
                            >14 ShaderMgr::convertibleConnection(phong5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                            >14 ShaderMgr::convertibleConnection(phong5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                            >14 ShaderMgr::convertibleConnection(phong5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong5.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong5.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                            >14 ShaderMgr::convertibleConnection(phong5.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong5.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong5.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong5.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong5.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong5.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong5.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong5,phong)
                          >13 Visitor::visitPhong(phong5)
                            >14 OutputHelper::beginRSL(phong5)
                            >14 ShaderMgr::convertibleConnection(phong5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                            >14 ShaderMgr::convertibleConnection(phong5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                            >14 ShaderMgr::convertibleConnection(phong5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong5.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong5.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                            >14 ShaderMgr::convertibleConnection(phong5.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong5.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong5.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong5.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong5.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong5.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong5.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong5, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong5, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong5,,[],[])
                      >11 Visitor::addShaderMethodBody(phong5,,[],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong5)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape3,phong5SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape3,phong5SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape3,phong5SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape3,phong5SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong5SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong5SG)
                  >9 Visitor::outputShadingGroup(phong5SG)
                  >9 Visitor::outputShadingGroup(phong5SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong5SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong6SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape4,phong6SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong6)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong6)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong6,pPlaneShape4)
                    >10 Visitor::initShaderData(phong6)
                    >10 Visitor::initShaderData(phong6)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong6, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong6)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong6SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong6.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparency)
                    >10 Visitor::preOutput(phong6)
                    >10 Visitor::preOutput(phong6)
                    >10 Visitor::outputBegin(phong6)
                    >10 Visitor::outputBegin(phong6)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong6)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong6,phong)
                          >13 Visitor::visitPhong(phong6)
                            >14 OutputHelper::beginRSL(phong6)
                            >14 ShaderMgr::convertibleConnection(phong6.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.color)
                            >14 ShaderMgr::convertibleConnection(phong6.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.transparency)
                            >14 ShaderMgr::convertibleConnection(phong6.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong6.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong6.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong6.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong6.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.translucence)
                            >14 ShaderMgr::convertibleConnection(phong6.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong6.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong6.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong6.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong6.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong6.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong6.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong6.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong6.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong6.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong6SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong6.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong6)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong6,phong)
                          >13 Visitor::visitPhong(phong6)
                            >14 OutputHelper::beginRSL(phong6)
                            >14 ShaderMgr::convertibleConnection(phong6.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.color)
                            >14 ShaderMgr::convertibleConnection(phong6.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.transparency)
                            >14 ShaderMgr::convertibleConnection(phong6.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong6.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong6.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong6.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong6.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.translucence)
                            >14 ShaderMgr::convertibleConnection(phong6.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong6.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong6.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong6.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong6.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong6.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong6.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong6.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong6.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong6.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong6SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong6.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong6.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong6, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong6, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong6SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong6.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong6.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong6,,[],[])
                      >11 Visitor::addShaderMethodBody(phong6,,[],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong6)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape4,phong6SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape4,phong6SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape4,phong6SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape4,phong6SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong6SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong6SG)
                  >9 Visitor::outputShadingGroup(phong6SG)
                  >9 Visitor::outputShadingGroup(phong6SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong6SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 addLightGroupForLight(|pointLight1|pointLightShape1)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                        >12 Renderer::write(|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                          >13 _write(|pPlane1|pPlaneShape1,perspShape)
                            >14 liqRibClipPlaneData::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                            >14 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:set(P,1,4,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,job=perspShape,0)
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,perspShape,ref=0)
                          >13 _write(|pPlane2|pPlaneShape2,perspShape)
                            >14 liqRibClipPlaneData::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                            >14 _exportVertexFromNodePlug(|pPlane2|pPlaneShape2,0)
                              >15 liqTokenPointer:set(P,1,4,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane3|pPlaneShape3,perspShape)
                  >9 Renderer::_writeObject(|pPlane3|pPlaneShape3,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,job=perspShape,0)
                        >12 Renderer::write(|pPlane3|pPlaneShape3,E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,perspShape,ref=0)
                          >13 _write(|pPlane3|pPlaneShape3,perspShape)
                            >14 liqRibClipPlaneData::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                            >14 _exportVertexFromNodePlug(|pPlane3|pPlaneShape3,0)
                              >15 liqTokenPointer:set(P,1,4,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane4|pPlaneShape4,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane4|pPlaneShape4,perspShape)
                  >9 Renderer::_writeObject(|pPlane4|pPlaneShape4,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.1.rib,job=perspShape,0)
                        >12 Renderer::write(|pPlane4|pPlaneShape4,E:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.1.rib,perspShape,ref=0)
                          >13 _write(|pPlane4|pPlaneShape4,perspShape)
                            >14 liqRibClipPlaneData::find(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
                            >14 _exportVertexFromNodePlug(|pPlane4|pPlaneShape4,0)
                              >15 liqTokenPointer:set(P,1,4,0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane2|pPlaneShape2)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane3|pPlaneShape3,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane3|pPlaneShape3)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane3|pPlaneShape3,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane3|pPlaneShape3,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane3|pPlaneShape3,v=0,s=0,c=0,,|pPlane3|pPlaneShape3,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane3|pPlaneShape3)
                >8 Renderer::exportOneObject_reference(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane3|pPlaneShape3,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane4|pPlaneShape4,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane4|pPlaneShape4,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane4|pPlaneShape4,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane4|pPlaneShape4)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane4|pPlaneShape4,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane4|pPlaneShape4,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane4|pPlaneShape4,v=0,s=0,c=0,,|pPlane4|pPlaneShape4,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane4|pPlaneShape4)
                >8 Renderer::exportOneObject_reference(|pPlane4|pPlaneShape4,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane4|pPlaneShape4,perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=er_rm_shader_graph_phong_transparentFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 RendererMgr::epilogue()
    >2 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::uninstall()
  >1 RendererMgr::deleteFactory()
