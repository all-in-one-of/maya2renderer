>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(elvishray)
  >1 RendererMgr::install()
    >2 Renderer::Renderer()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(E:/MyDocuments/maya/projects/default/rib/architectural.perspShape.1.elvishray.bmp)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(architecturalFrame1)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(liquidShader1)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(liquidShader1)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidShader1)
          >5 liqShader::liqShader(liquidSurface1)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(liquidSurface1)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidSurface1)
          >5 liqShader::liqShader(liquidShader2)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqGetSloInfo::setShaderNode(liquidShader2)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidShader2)
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,perspShape)
          >5 liqRibTranslator::generateFileName(5,perspShape)
            >6 liqRibTranslator::generateImageName(, job(perspShape)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight3|pointLightShape3,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight3|pointLightShape3,0)
              >7 liqRibHT::find(|pointLight3|pointLightShape3,|pointLight3|pointLightShape3,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight3|pointLightShape3,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight3,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight3,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight3,,4)
                >8 liqRibNode::findShadingGroup(|pointLight3|pointLightShape3,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight3|pointLightShape3,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight3|pointLightShape3)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pPlane1|pPlaneShape1,1)
              >7 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane3|pPlaneShape3,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane3|pPlaneShape3,2)
              >7 liqRibHT::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane3|pPlaneShape3,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,4)
                >8 liqRibNode::findShadingGroup(|pPlane3|pPlaneShape3,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane3|pPlaneShape3,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane3|pPlaneShape3)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pCube1|pCubeShape1,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pCube1|pCubeShape1,3)
              >7 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube1,,2)
                >8 liqRibNode::parseVectorAttributes(pCube1,,3)
                >8 liqRibNode::parseVectorAttributes(pCube1,,4)
                >8 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,4)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|persp|perspShape,)
              >7 liqRibTranslator::portFieldOfView(100,100,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1,,&left,&right,&bottom,&top,|persp|perspShape)
            >6 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
            >6 liqRibTranslator::getCameraTransform(|persp|perspShape,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),E:/MyDocuments/maya/projects/default/architectural,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(liquidShader2SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(liquidShader2)
                  >9 ConvertShadingNetwork::exportShaderBegin(liquidShader2)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(liquidShader2,surfaceShader)
                    >10 Visitor::initShaderData(liquidShader2,surfaceShader)
                    >10 Visitor::initShaderData(liquidShader2,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(liquidShader2, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(liquidShader2)
                        >12 ShaderMgr::hasShaderType(liquidShader)
                      >11 ShaderMgr::getValidConnection(liquidShader2)
                        >12 liqShaderFactory::getShader(liquidShader2)
                          >13 liqShaderFactory::getShader(liquidShader2)
                            >14 liqShader::liqShader(liquidShader2)
                              >15 liqShaderFactory::getUniqueShaderHandler()
                              >15 liqGetSloInfo::setShaderNode(liquidShader2)
                        >12 liqShader::getValidConnection(...)
                          >13 liqShader::getName()
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.surface_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.surface_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.roughness)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.roughness)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_mode)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_mode)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.glossiness)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.glossiness)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_glossiness)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_glossiness)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_thickness)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_thickness)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.translucency_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.translucency_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.translucency_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.translucency_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.anisotropy)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.anisotropy)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.rotation)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.rotation)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.ior)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.ior)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_by_ior)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_by_ior)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_0_degree_refl)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_0_degree_refl)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_90_degree_refl)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_90_degree_refl)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_curve)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_curve)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.is_metal)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.is_metal)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_samples)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_samples)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_samples)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_samples)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_samples)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_samples)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.cutoff_threshold)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.cutoff_threshold)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader2.bump_factor)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader2.bump_factor)
                    >10 Visitor::preOutput(liquidShader2)
                    >10 Visitor::preOutput(liquidShader2)
                    >10 Visitor::outputBegin(liquidShader2)
                    >10 Visitor::outputBegin(liquidShader2)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(liquidShader2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(liquidShader2,liquidShader)
                          >13 Visitor::visit_liquidShader(liquidShader2)
                            >14 liqShaderFactory::getShader(liquidShader2)
                              >15 liqShaderFactory::getShader(liquidShader2)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                            >14 OutputHelper::beginRSL(architectural,liquidShader2)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.surface_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.surface_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.surface_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.diffuse_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.diffuse_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.specular_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.specular_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.roughness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.roughness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.roughness)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.specular_mode)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_mode)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_mode)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.glossiness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.glossiness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.glossiness)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.reflection_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.reflection_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_glossiness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_glossiness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_glossiness)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_thickness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_thickness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_thickness)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.translucency_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.translucency_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.translucency_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.translucency_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.translucency_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.translucency_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.anisotropy)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.anisotropy)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.anisotropy)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.rotation)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.rotation)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.rotation)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.ior)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.ior)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.ior)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.fresnel_by_ior)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_by_ior)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_by_ior)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.fresnel_0_degree_refl)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_0_degree_refl)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_0_degree_refl)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.fresnel_90_degree_refl)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_90_degree_refl)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_90_degree_refl)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.fresnel_curve)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_curve)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_curve)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.is_metal)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.is_metal)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.is_metal)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.diffuse_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.reflection_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.cutoff_threshold)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.cutoff_threshold)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.cutoff_threshold)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.bump_factor)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.bump_factor)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.bump_factor)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(liquidShader2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(liquidShader2,liquidShader)
                          >13 Visitor::visit_liquidShader(liquidShader2)
                            >14 liqShaderFactory::getShader(liquidShader2)
                              >15 liqShaderFactory::getShader(liquidShader2)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                            >14 OutputHelper::beginRSL(architectural,liquidShader2)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.surface_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.surface_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.surface_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.diffuse_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.diffuse_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.specular_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.specular_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.roughness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.roughness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.roughness)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.specular_mode)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_mode)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_mode)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.glossiness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.glossiness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.glossiness)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.reflection_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.reflection_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_glossiness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_glossiness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_glossiness)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_thickness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_thickness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_thickness)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.translucency_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.translucency_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.translucency_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.translucency_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.translucency_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.translucency_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.anisotropy)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.anisotropy)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.anisotropy)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.rotation)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.rotation)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.rotation)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.ior)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.ior)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.ior)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.fresnel_by_ior)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_by_ior)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_by_ior)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.fresnel_0_degree_refl)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_0_degree_refl)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_0_degree_refl)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.fresnel_90_degree_refl)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_90_degree_refl)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_90_degree_refl)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.fresnel_curve)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_curve)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_curve)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.is_metal)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.is_metal)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.is_metal)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.diffuse_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.reflection_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.refraction_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.cutoff_threshold)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.cutoff_threshold)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.cutoff_threshold)
                            >14 ShaderMgr::convertibleConnection(liquidShader2.bump_factor)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader2.bump_factor)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader2.bump_factor)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(liquidShader2)
                        >12 liqShaderFactory::getShader(liquidShader2)
                          >13 liqShaderFactory::getShader(liquidShader2)
                        >12 liqShader::getValidConnection(...)
                          >13 liqShader::getName()
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(liquidShader2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(liquidShader2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.surface_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.surface_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.roughness)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.roughness)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.specular_mode)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.specular_mode)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.glossiness)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.glossiness)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_glossiness)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_glossiness)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_thickness)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_thickness)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.translucency_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.translucency_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.translucency_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.translucency_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.anisotropy)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.anisotropy)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.rotation)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.rotation)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.ior)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.ior)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_by_ior)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_by_ior)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_0_degree_refl)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_0_degree_refl)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_90_degree_refl)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_90_degree_refl)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.fresnel_curve)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.fresnel_curve)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.is_metal)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.is_metal)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.diffuse_samples)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.diffuse_samples)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.reflection_samples)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.reflection_samples)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.refraction_samples)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.refraction_samples)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.cutoff_threshold)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.cutoff_threshold)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader2.bump_factor)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader2.bump_factor)
                      >11 Visitor::addShaderMethodBody(liquidShader2,,)
                      >11 Visitor::addShaderMethodBody(liquidShader2,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(liquidShader2)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader2SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(liquidShader2SG)
                >8 ConvertShadingNetwork::outputShadingGroup(liquidShader2SG)
                  >9 Visitor::outputShadingGroup(liquidShader2SG)
                  >9 Visitor::outputShadingGroup(liquidShader2SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(liquidShader2SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(liquidShader1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(liquidShader1)
                  >9 ConvertShadingNetwork::exportShaderBegin(liquidShader1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(liquidShader1,surfaceShader)
                    >10 Visitor::initShaderData(liquidShader1,surfaceShader)
                    >10 Visitor::initShaderData(liquidShader1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(liquidShader1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(liquidShader1)
                        >12 ShaderMgr::hasShaderType(liquidShader)
                      >11 ShaderMgr::getValidConnection(liquidShader1)
                        >12 liqShaderFactory::getShader(liquidShader1)
                          >13 liqShaderFactory::getShader(liquidShader1)
                            >14 liqShader::liqShader(liquidShader1)
                              >15 liqShaderFactory::getUniqueShaderHandler()
                              >15 liqGetSloInfo::setShaderNode(liquidShader1)
                        >12 liqShader::getValidConnection(...)
                          >13 liqShader::getName()
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.surface_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.surface_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.roughness)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.roughness)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_mode)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_mode)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.glossiness)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.glossiness)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_glossiness)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_glossiness)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_thickness)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_thickness)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.translucency_color)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.translucency_color)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.translucency_weight)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.translucency_weight)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.anisotropy)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.anisotropy)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.rotation)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.rotation)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.ior)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.ior)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_by_ior)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_by_ior)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_0_degree_refl)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_0_degree_refl)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_90_degree_refl)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_90_degree_refl)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_curve)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_curve)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.is_metal)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.is_metal)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_samples)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_samples)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_samples)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_samples)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_samples)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_samples)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.cutoff_threshold)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.cutoff_threshold)
                      >11 ConvertShadingNetwork::convertibleConnection(liquidShader1.bump_factor)
                        >12 ConvertShadingNetwork::ensurePlugExists(liquidShader1.bump_factor)
                    >10 Visitor::preOutput(liquidShader1)
                    >10 Visitor::preOutput(liquidShader1)
                    >10 Visitor::outputBegin(liquidShader1)
                    >10 Visitor::outputBegin(liquidShader1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(liquidShader1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(liquidShader1,liquidShader)
                          >13 Visitor::visit_liquidShader(liquidShader1)
                            >14 liqShaderFactory::getShader(liquidShader1)
                              >15 liqShaderFactory::getShader(liquidShader1)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                            >14 OutputHelper::beginRSL(architectural,liquidShader1)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.surface_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.surface_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.surface_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.diffuse_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.diffuse_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.specular_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.specular_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.roughness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.roughness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.roughness)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.specular_mode)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_mode)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_mode)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.glossiness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.glossiness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.glossiness)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.reflection_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.reflection_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_glossiness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_glossiness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_glossiness)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_thickness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_thickness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_thickness)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.translucency_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.translucency_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.translucency_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.translucency_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.translucency_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.translucency_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.anisotropy)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.anisotropy)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.anisotropy)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.rotation)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.rotation)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.rotation)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.ior)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.ior)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.ior)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.fresnel_by_ior)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_by_ior)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_by_ior)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.fresnel_0_degree_refl)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_0_degree_refl)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_0_degree_refl)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.fresnel_90_degree_refl)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_90_degree_refl)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_90_degree_refl)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.fresnel_curve)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_curve)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_curve)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.is_metal)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.is_metal)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.is_metal)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.diffuse_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.reflection_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.cutoff_threshold)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.cutoff_threshold)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.cutoff_threshold)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.bump_factor)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.bump_factor)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.bump_factor)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(liquidShader1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(liquidShader1,liquidShader)
                          >13 Visitor::visit_liquidShader(liquidShader1)
                            >14 liqShaderFactory::getShader(liquidShader1)
                              >15 liqShaderFactory::getShader(liquidShader1)
                            >14 liqShader::getName()
                            >14 liqShader::getShaderFileName()
                            >14 OutputHelper::beginRSL(architectural,liquidShader1)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.surface_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.surface_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.surface_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.diffuse_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.diffuse_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.specular_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.specular_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.roughness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.roughness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.roughness)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.specular_mode)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_mode)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_mode)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.glossiness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.glossiness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.glossiness)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.reflection_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.reflection_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_glossiness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_glossiness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_glossiness)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_thickness)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_thickness)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_thickness)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.translucency_color)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.translucency_color)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.translucency_color)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.translucency_weight)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.translucency_weight)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.translucency_weight)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.anisotropy)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.anisotropy)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.anisotropy)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.rotation)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.rotation)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.rotation)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.ior)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.ior)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.ior)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.fresnel_by_ior)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_by_ior)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_by_ior)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.fresnel_0_degree_refl)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_0_degree_refl)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_0_degree_refl)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.fresnel_90_degree_refl)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_90_degree_refl)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_90_degree_refl)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.fresnel_curve)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_curve)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_curve)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.is_metal)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.is_metal)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.is_metal)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.diffuse_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.reflection_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.refraction_samples)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_samples)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.cutoff_threshold)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.cutoff_threshold)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.cutoff_threshold)
                            >14 ShaderMgr::convertibleConnection(liquidShader1.bump_factor)
                              >15 ConvertShadingNetwork::convertibleConnection(liquidShader1.bump_factor)
                                >16 ConvertShadingNetwork::ensurePlugExists(liquidShader1.bump_factor)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(liquidShader1)
                        >12 liqShaderFactory::getShader(liquidShader1)
                          >13 liqShaderFactory::getShader(liquidShader1)
                        >12 liqShader::getValidConnection(...)
                          >13 liqShader::getName()
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(liquidShader1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(liquidShader1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.surface_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.surface_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.roughness)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.roughness)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.specular_mode)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.specular_mode)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.glossiness)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.glossiness)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_glossiness)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_glossiness)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_thickness)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_thickness)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.translucency_color)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.translucency_color)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.translucency_weight)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.translucency_weight)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.anisotropy)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.anisotropy)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.rotation)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.rotation)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.ior)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.ior)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_by_ior)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_by_ior)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_0_degree_refl)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_0_degree_refl)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_90_degree_refl)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_90_degree_refl)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.fresnel_curve)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.fresnel_curve)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.is_metal)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.is_metal)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.diffuse_samples)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.diffuse_samples)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.reflection_samples)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.reflection_samples)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.refraction_samples)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.refraction_samples)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.cutoff_threshold)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.cutoff_threshold)
                        >12 ConvertShadingNetwork::convertibleConnection(liquidShader1.bump_factor)
                          >13 ConvertShadingNetwork::ensurePlugExists(liquidShader1.bump_factor)
                      >11 Visitor::addShaderMethodBody(liquidShader1,,)
                      >11 Visitor::addShaderMethodBody(liquidShader1,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(liquidShader1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader1SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidShader1SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(liquidShader1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(liquidShader1SG)
                  >9 Visitor::outputShadingGroup(liquidShader1SG)
                  >9 Visitor::outputShadingGroup(liquidShader1SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(liquidShader1SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(liquidSurface1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidSurface1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(liquidSurface1)
                  >9 ConvertShadingNetwork::exportShaderBegin(liquidSurface1)
                  >9 liqShaderFactory::getShader(liquidSurface1)
                    >10 liqShaderFactory::getShader(liquidSurface1)
                      >11 liqShader::liqShader(liquidSurface1)
                        >12 liqShaderFactory::getUniqueShaderHandler()
                        >12 liqGetSloInfo::setShaderNode(liquidSurface1)
                  >9 liqShader::write()
                    >10 liqShader::getName()
                    >10 shader_UserDefinedShader(liquidSurface1)
                      >11 liqShader::getShaderFileName()
                      >11 liqShader::getName()
                      >11 Renderer::shader_surface(liquidSurface1, tokenPointerArray)
                        >12 liqShader::getName()
                        >12 Renderer::_UserDefinedShader(liquidSurface1, tokenPointerArray)
                          >13 liqShader::getName()
                          >13 liqShader::getShaderFileName()
                  >9 ConvertShadingNetwork::exportShaderEnd(liquidSurface1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidSurface1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidSurface1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidSurface1SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(liquidSurface1SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(liquidSurface1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(liquidSurface1SG)
                  >9 Visitor::outputShadingGroup(liquidSurface1SG)
                  >9 Visitor::outputShadingGroup(liquidSurface1SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(liquidSurface1SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight3|pointLightShape3,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight3|pointLightShape3,,perspShape,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight3|pointLightShape3,perspShape,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape3,...)
                      >11 addLightGroupForLight(|pointLight3|pointLightShape3)
            >6 Renderer::writeLight_post(|pointLight3|pointLightShape3,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
            >6 Renderer::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane1|pPlaneShape1,perspShape)
                            >14 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane3|pPlaneShape3,perspShape)
                  >9 Renderer::_writeObject(|pPlane3|pPlaneShape3,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane3|pPlaneShape3,E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane3|pPlaneShape3,perspShape)
                            >14 liqRibHT::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane3|pPlaneShape3,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube1|pCubeShape1,E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pCube1|pCubeShape1,perspShape)
                            >14 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=1,c=0,,|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane3|pPlaneShape3,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane3|pPlaneShape3)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane3|pPlaneShape3,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane3|pPlaneShape3,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane3|pPlaneShape3,v=0,s=1,c=0,,|pPlane3|pPlaneShape3,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane3|pPlaneShape3)
                >8 Renderer::exportOneObject_reference(|pPlane3|pPlaneShape3,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane3|pPlaneShape3,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube1|pCubeShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=1,c=0,,|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                >8 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,perspShape)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
              >7 Renderer::render()
                >8 Renderer::renderPreview(100,100,0,0,perspShape,perspShape,perspShape_option)
                  >9 Renderer::_renderPreview(100,100,0,0,perspShape,perspShape,perspShape_option)
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=architecturalFrame1,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
    >2 Renderer::~Renderer()
  >1 RendererMgr::unsetFactory()
