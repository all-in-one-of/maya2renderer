>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::createFactory(elvishray)
  >1 RendererMgr::install()
  >1 RendererMgr::prologue()
    >2 Renderer::openLog()(but do nothing now)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(three_boxesFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,cameraShape1)
          >5 liqRibTranslator::generateFileName(3,cameraShape1)
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibClipPlaneData::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
              >7 liqRibHT::hash(|pointLight2|pointLightShape2,1)
              >7 liqRibClipPlaneData::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,4)
                >8 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                >8 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube1|pCubeShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pCube1|pCubeShape1,2)
              >7 liqRibClipPlaneData::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube1,,2)
                >8 liqRibNode::parseVectorAttributes(pCube1,,3)
                >8 liqRibNode::parseVectorAttributes(pCube1,,4)
                >8 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,36,0)
                    >10 liqTokenPointer:set(st,0,36,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube2|pCubeShape2,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pCube2|pCubeShape2,3)
              >7 liqRibClipPlaneData::find(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube2|pCubeShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube2,,2)
                >8 liqRibNode::parseVectorAttributes(pCube2,,3)
                >8 liqRibNode::parseVectorAttributes(pCube2,,4)
                >8 liqRibNode::findShadingGroup(|pCube2|pCubeShape2,0)
                >8 liqRibNode::findShader(lambert3SG)
                >8 liqRibNode::findDisp(lambert3SG)
                >8 liqRibNode::findVolume(lambert3SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube2|pCubeShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube2|pCubeShape2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube3|pCubeShape3,lframe,0,0,4,matrix,,-1)
              >7 liqRibHT::hash(|pCube3|pCubeShape3,4)
              >7 liqRibClipPlaneData::find(|pCube3|pCubeShape3,|pCube3|pCubeShape3,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube3|pCubeShape3,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube3,,2)
                >8 liqRibNode::parseVectorAttributes(pCube3,,3)
                >8 liqRibNode::parseVectorAttributes(pCube3,,4)
                >8 liqRibNode::findShadingGroup(|pCube3|pCubeShape3,0)
                >8 liqRibNode::findShader(lambert4SG)
                >8 liqRibNode::findDisp(lambert4SG)
                >8 liqRibNode::findVolume(lambert4SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube3|pCubeShape3,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube3|pCubeShape3)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,5)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(863,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.49826,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_begin(cameraShape1)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=16:32:50.68),E:/MyDocuments/maya/projects/default/three_boxes,yaoyansi,time)
            >6 Renderer::ribPrologue_options(cameraShape1)
          >5 liqRibTranslatorNew::framePrologue__(1,cameraShape1)
            >6 Renderer::framePrologue(1,cameraShape1)
              >7 Renderer::framePrologue_camera(1,cameraShape1)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|camera1|cameraShape1,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,initialShadingGroup,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert1)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1,pCubeShape1,surfaceShader)
                    >10 Visitor::initShaderData(lambert1,surfaceShader)
                    >10 Visitor::initShaderData(lambert1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                    >10 Visitor::preOutput(lambert1)
                    >10 Visitor::preOutput(lambert1)
                    >10 Visitor::outputBegin(lambert1)
                    >10 Visitor::outputBegin(lambert1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(lambert1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                          >13 Visitor::visitLambert(lambert1)
                            >14 OutputHelper::beginRSL(lambert1)
                            >14 ShaderMgr::convertibleConnection(lambert1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                            >14 ShaderMgr::convertibleConnection(lambert1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                          >13 Visitor::visitLambert(lambert1)
                            >14 OutputHelper::beginRSL(lambert1)
                            >14 ShaderMgr::convertibleConnection(lambert1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                            >14 ShaderMgr::convertibleConnection(lambert1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert1,,)
                      >11 Visitor::addShaderMethodBody(lambert1,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,initialShadingGroup,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,initialShadingGroup,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,initialShadingGroup,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,initialShadingGroup,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                >8 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                  >9 Visitor::outputShadingGroup(initialShadingGroup)
                  >9 Visitor::outputShadingGroup(initialShadingGroup)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert3SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert3SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert3)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert3)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert3,pCubeShape2,surfaceShader)
                    >10 Visitor::initShaderData(lambert3,surfaceShader)
                    >10 Visitor::initShaderData(lambert3,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert3, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert3)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert3SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                    >10 Visitor::preOutput(lambert3)
                    >10 Visitor::preOutput(lambert3)
                    >10 Visitor::outputBegin(lambert3)
                    >10 Visitor::outputBegin(lambert3)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(lambert3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert3,lambert)
                          >13 Visitor::visitLambert(lambert3)
                            >14 OutputHelper::beginRSL(lambert3)
                            >14 ShaderMgr::convertibleConnection(lambert3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                            >14 ShaderMgr::convertibleConnection(lambert3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert3.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert3,lambert)
                          >13 Visitor::visitLambert(lambert3)
                            >14 OutputHelper::beginRSL(lambert3)
                            >14 ShaderMgr::convertibleConnection(lambert3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                            >14 ShaderMgr::convertibleConnection(lambert3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert3.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert3, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert3, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert3SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert3.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert3.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert3,,)
                      >11 Visitor::addShaderMethodBody(lambert3,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert3)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert3SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert3SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert3SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert3SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert3SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert3SG)
                  >9 Visitor::outputShadingGroup(lambert3SG)
                  >9 Visitor::outputShadingGroup(lambert3SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert3SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape3,lambert4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert4)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert4,pCubeShape3,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 Visitor::initShaderData(lambert4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert4)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::preOutput(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 Visitor::outputBegin(lambert4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert4,lambert)
                          >13 Visitor::visitLambert(lambert4)
                            >14 OutputHelper::beginRSL(lambert4)
                            >14 ShaderMgr::convertibleConnection(lambert4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                            >14 ShaderMgr::convertibleConnection(lambert4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.color)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert4.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert4,,)
                      >11 Visitor::addShaderMethodBody(lambert4,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape3,lambert4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape3,lambert4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape3,lambert4SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape3,lambert4SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                  >9 Visitor::outputShadingGroup(lambert4SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert4SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=cameraShape1)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                    >10 addLightGroupForLight(|pointLight1|pointLightShape1)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight2|pointLightShape2,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=cameraShape1)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                    >10 addLightGroupForLight(|pointLight2|pointLightShape2)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight2|pointLightShape2,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,cameraShape1)
                >8 Renderer::exportOneObject_data(|pCube1|pCubeShape1,cameraShape1)
                  >9 Renderer::_writeObject(|pCube1|pCubeShape1,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube1|pCubeShape1,E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube1|pCubeShape1,cameraShape1)
                            >14 liqRibClipPlaneData::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
                              >15 liqTokenPointer:set(P,1,8,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube2|pCubeShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pCube2|pCubeShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pCube2|pCubeShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube2|pCubeShape2,E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube2|pCubeShape2,cameraShape1)
                            >14 liqRibClipPlaneData::find(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pCube2|pCubeShape2,0)
                              >15 liqTokenPointer:set(P,1,8,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube3|pCubeShape3,cameraShape1)
                >8 Renderer::exportOneObject_data(|pCube3|pCubeShape3,cameraShape1)
                  >9 Renderer::_writeObject(|pCube3|pCubeShape3,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,job=cameraShape1,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube3|pCubeShape3,E:/MyDocuments/maya/projects/default/rib/_pCube3_pCubeShape3.1.rib,cameraShape1,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube3|pCubeShape3,cameraShape1)
                            >14 liqRibClipPlaneData::find(|pCube3|pCubeShape3,|pCube3|pCubeShape3,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pCube3|pCubeShape3,0)
                              >15 liqTokenPointer:set(P,1,8,0)
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pCube1|pCubeShape1)
                  >9 Renderer::exportLightLinks(cameraShape1,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=0,c=0,,|pCube1|pCubeShape1,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                >8 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube2|pCubeShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube2|pCubeShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube2|pCubeShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pCube2|pCubeShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pCube2|pCubeShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube2|pCubeShape2,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube2|pCubeShape2,v=0,s=0,c=0,,|pCube2|pCubeShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube2|pCubeShape2)
                >8 Renderer::exportOneObject_reference(|pCube2|pCubeShape2,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube2|pCubeShape2,cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube3|pCubeShape3,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube3|pCubeShape3,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube3|pCubeShape3,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pCube3|pCubeShape3)
                  >9 Renderer::exportLightLinks(cameraShape1,|pCube3|pCubeShape3,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube3|pCubeShape3,|pCube3|pCubeShape3,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube3|pCubeShape3,|pCube3|pCubeShape3,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube3|pCubeShape3,|pCube3|pCubeShape3,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube3|pCubeShape3,cameraShape1)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube3|pCubeShape3,v=0,s=0,c=0,,|pCube3|pCubeShape3,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube3|pCubeShape3,|pCube3|pCubeShape3,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube3|pCubeShape3)
                >8 Renderer::exportOneObject_reference(|pCube3|pCubeShape3,cameraShape1)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube3|pCubeShape3,cameraShape1)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
              >7 Renderer::cookInstanceGroup()
        >4 Renderer::HeroPassEnd(cameraShape1)
      >3 liqRenderScript::addJob(job.title=three_boxesFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 RendererMgr::epilogue()
    >2 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::uninstall()
  >1 RendererMgr::deleteFactory()
