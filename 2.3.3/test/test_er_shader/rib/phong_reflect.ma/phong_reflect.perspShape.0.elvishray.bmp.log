>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::setFactory(elvishray)
  >1 RendererMgr::install()
    >2 Renderer::Renderer()
  >1 RendererMgr::prologue()
  >1 Renderer::openLog(E:/MyDocuments/maya/projects/default/rib/phong_reflect.perspShape.1.elvishray.bmp)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(phong_reflectFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,perspShape)
          >5 liqRibTranslator::generateFileName(5,perspShape)
            >6 liqRibTranslator::generateImageName(, job(perspShape)), 
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibHT::insert(|pointLight3|pointLightShape3,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight3|pointLightShape3,0)
              >7 liqRibHT::find(|pointLight3|pointLightShape3,|pointLight3|pointLightShape3,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight3|pointLightShape3,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight3,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight3,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight3,,4)
                >8 liqRibNode::findShadingGroup(|pointLight3|pointLightShape3,3)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pointLight3|pointLightShape3,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight3|pointLightShape3)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane1|pPlaneShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pPlane1|pPlaneShape1,1)
              >7 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane2|pPlaneShape2,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape2,2)
              >7 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,,4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape2,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane3|pPlaneShape3,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pPlane3|pPlaneShape3,3)
              >7 liqRibHT::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane3|pPlaneShape3,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane3,,4)
                >8 liqRibNode::findShadingGroup(|pPlane3|pPlaneShape3,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane3|pPlaneShape3,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane3|pPlaneShape3)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pPlane4|pPlaneShape4,lframe,0,0,4,matrix,,-1)
              >7 liqRibHT::hash(|pPlane4|pPlaneShape4,4)
              >7 liqRibHT::find(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane4|pPlaneShape4,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane4,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane4,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane4,,4)
                >8 liqRibNode::findShadingGroup(|pPlane4|pPlaneShape4,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane4|pPlaneShape4,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane4|pPlaneShape4)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape4)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibHT::insert(|pCube1|pCubeShape1,lframe,0,0,5,matrix,,-1)
              >7 liqRibHT::hash(|pCube1|pCubeShape1,5)
              >7 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube1,,2)
                >8 liqRibNode::parseVectorAttributes(pCube1,,3)
                >8 liqRibNode::parseVectorAttributes(pCube1,,4)
                >8 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                >8 liqRibNode::findShader()
                >8 liqRibNode::findDisp()
                >8 liqRibNode::findVolume()
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,6)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(|persp|perspShape,)
              >7 liqRibTranslator::portFieldOfView(400,300,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,|persp|perspShape)
            >6 liqRibTranslator::getCameraFilmOffset(|persp|perspShape,)
            >6 liqRibTranslator::getCameraTransform(|persp|perspShape,)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=20:51:12.30),E:/MyDocuments/maya/projects/default/phong_reflect,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
                >8 Renderer::cameraOutput(perspShape)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(phong5SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong5)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong5)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong5,surfaceShader)
                    >10 Visitor::initShaderData(phong5,surfaceShader)
                    >10 Visitor::initShaderData(phong5,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong5, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong5)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong5)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                    >10 Visitor::preOutput(phong5)
                    >10 Visitor::preOutput(phong5)
                    >10 Visitor::outputBegin(phong5)
                    >10 Visitor::outputBegin(phong5)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong5,phong)
                          >13 Visitor::visitPhong(phong5)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong5)
                            >14 ShaderMgr::convertibleConnection(phong5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                            >14 ShaderMgr::convertibleConnection(phong5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                            >14 ShaderMgr::convertibleConnection(phong5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong5.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong5.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                            >14 ShaderMgr::convertibleConnection(phong5.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong5.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong5.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong5.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong5.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong5.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong5.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong5)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong5,phong)
                          >13 Visitor::visitPhong(phong5)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong5)
                            >14 ShaderMgr::convertibleConnection(phong5.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                            >14 ShaderMgr::convertibleConnection(phong5.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                            >14 ShaderMgr::convertibleConnection(phong5.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong5.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong5.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong5.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong5.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                            >14 ShaderMgr::convertibleConnection(phong5.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong5.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong5.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong5.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong5.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong5.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong5.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong5.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong5.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong5)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong5, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong5, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong5SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong5.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong5.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong5,,)
                      >11 Visitor::addShaderMethodBody(phong5,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong5)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong5SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong5SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong5SG)
                  >9 Visitor::outputShadingGroup(phong5SG)
                  >9 Visitor::outputShadingGroup(phong5SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong5SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong1)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong1)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong1,,)
                      >11 Visitor::addShaderMethodBody(phong1,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong1SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong3SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong3)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong3)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong3,surfaceShader)
                    >10 Visitor::initShaderData(phong3,surfaceShader)
                    >10 Visitor::initShaderData(phong3,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong3, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong3)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong3)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                    >10 Visitor::preOutput(phong3)
                    >10 Visitor::preOutput(phong3)
                    >10 Visitor::outputBegin(phong3)
                    >10 Visitor::outputBegin(phong3)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong3,phong)
                          >13 Visitor::visitPhong(phong3)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong3)
                            >14 ShaderMgr::convertibleConnection(phong3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                            >14 ShaderMgr::convertibleConnection(phong3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                            >14 ShaderMgr::convertibleConnection(phong3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong3.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong3.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong3.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong3.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong3.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong3,phong)
                          >13 Visitor::visitPhong(phong3)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong3)
                            >14 ShaderMgr::convertibleConnection(phong3.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                            >14 ShaderMgr::convertibleConnection(phong3.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                            >14 ShaderMgr::convertibleConnection(phong3.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong3.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong3.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong3.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong3.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong3.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong3.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong3.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong3.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong3.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong3.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong3.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong3)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong3, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong3, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong3SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong3.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong3.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong3,,)
                      >11 Visitor::addShaderMethodBody(phong3,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong3)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong3SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong3SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong3SG)
                  >9 Visitor::outputShadingGroup(phong3SG)
                  >9 Visitor::outputShadingGroup(phong3SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong3SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong4SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong4)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong4)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong4,surfaceShader)
                    >10 Visitor::initShaderData(phong4,surfaceShader)
                    >10 Visitor::initShaderData(phong4,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong4, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong4)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnection(phong4)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                    >10 Visitor::preOutput(phong4)
                    >10 Visitor::preOutput(phong4)
                    >10 Visitor::outputBegin(phong4)
                    >10 Visitor::outputBegin(phong4)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(phong4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong4,phong)
                          >13 Visitor::visitPhong(phong4)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong4)
                            >14 ShaderMgr::convertibleConnection(phong4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                            >14 ShaderMgr::convertibleConnection(phong4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                            >14 ShaderMgr::convertibleConnection(phong4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong4.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong4.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong4.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong4)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong4,phong)
                          >13 Visitor::visitPhong(phong4)
                            >14 OutputHelper::beginRSL(maya_phong_architectural,phong4)
                            >14 ShaderMgr::convertibleConnection(phong4.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                            >14 ShaderMgr::convertibleConnection(phong4.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                            >14 ShaderMgr::convertibleConnection(phong4.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                            >14 ShaderMgr::convertibleConnection(phong4.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong4.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong4.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong4.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong4.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong4.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong4.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong4.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong4.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong4.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong4.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(phong4)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong4, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong4, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong4SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong4.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong4.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong4,,)
                      >11 Visitor::addShaderMethodBody(phong4,,)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong4)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(phong4SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong4SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong4SG)
                  >9 Visitor::outputShadingGroup(phong4SG)
                  >9 Visitor::outputShadingGroup(phong4SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong4SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong3SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight3|pointLightShape3,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 liqRibData::getFullPathName()
                >8 Renderer::write(|pointLight3|pointLightShape3,,perspShape,ref=0)
                  >9 liqRibData::getFullPathName()
                  >9 er_writeLightData.cpp::_write(|pointLight3|pointLightShape3,perspShape,...)
                    >10 Renderer::exportPointLight(pointlight,pointLightShape3,...)
                      >11 addLightGroupForLight(|pointLight3|pointLightShape3)
            >6 Renderer::writeLight_post(|pointLight3|pointLightShape3,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
            >6 Renderer::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane1|pPlaneShape1,perspShape)
                            >14 liqRibHT::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape2,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape2,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape2,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape2.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane2|pPlaneShape2,perspShape)
                            >14 liqRibHT::find(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane2|pPlaneShape2,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane3|pPlaneShape3,perspShape)
                  >9 Renderer::_writeObject(|pPlane3|pPlaneShape3,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane3|pPlaneShape3,E:/MyDocuments/maya/projects/default/rib/_pPlane3_pPlaneShape3.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane3|pPlaneShape3,perspShape)
                            >14 liqRibHT::find(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane3|pPlaneShape3,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane4|pPlaneShape4,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane4|pPlaneShape4,perspShape)
                  >9 Renderer::_writeObject(|pPlane4|pPlaneShape4,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane4|pPlaneShape4,E:/MyDocuments/maya/projects/default/rib/_pPlane4_pPlaneShape4.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pPlane4|pPlaneShape4,perspShape)
                            >14 liqRibHT::find(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane4|pPlaneShape4,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube1|pCubeShape1,E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 er_writeMeshData.cpp::_write(|pCube1|pCubeShape1,perspShape)
                            >14 liqRibHT::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 Renderer::objectBlock_reference_begin()
              >7 liqRibTranslatorNew::preGeometryMel()
                >8 Renderer::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape2,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane2|pPlaneShape2)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane2|pPlaneShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape2,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape2,v=0,s=0,c=0,,|pPlane2|pPlaneShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane2|pPlaneShape2,|pPlane2|pPlaneShape2,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape2)
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape2,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape2,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane3|pPlaneShape3,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane3|pPlaneShape3,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane3|pPlaneShape3)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane3|pPlaneShape3,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane3|pPlaneShape3,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane3|pPlaneShape3,v=0,s=0,c=0,,|pPlane3|pPlaneShape3,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane3|pPlaneShape3,|pPlane3|pPlaneShape3,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane3|pPlaneShape3)
                >8 Renderer::exportOneObject_reference(|pPlane3|pPlaneShape3,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane3|pPlaneShape3,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane4|pPlaneShape4,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane4|pPlaneShape4,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane4|pPlaneShape4,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane4|pPlaneShape4)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane4|pPlaneShape4,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane4|pPlaneShape4,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane4|pPlaneShape4,v=0,s=0,c=0,,|pPlane4|pPlaneShape4,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane4|pPlaneShape4,|pPlane4|pPlaneShape4,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane4|pPlaneShape4)
                >8 Renderer::exportOneObject_reference(|pPlane4|pPlaneShape4,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane4|pPlaneShape4,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube1|pCubeShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=0,c=0,,|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                >8 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,perspShape)
              >7 Renderer::objectBlock_reference_end()
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
              >7 Renderer::render()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=phong_reflectFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::epilogue()
  >1 RendererMgr::uninstall()
    >2 Renderer::~Renderer()
  >1 RendererMgr::unsetFactory()
