>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::createFactory(elvishray)
  >1 RendererMgr::install()
  >1 RendererMgr::prologue()
    >2 Renderer::openLog()(but do nothing now)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(mib_amb_occlusionFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(10)
        >4 liqRibTranslatorNew::scanScene__(10,0)
          >5 tJobScriptMgr::scanScene(10,0, htable__, count, returnStatus__)
          >5 tLocatorMgr::scanScene(10,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube1|pCubeShape1,lframe,0,0,0,matrix,,-1)
              >7 liqRibHT::hash(|pCube1|pCubeShape1,0)
              >7 liqRibClipPlaneData::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube1,[],2)
                >8 liqRibNode::parseVectorAttributes(pCube1,[],3)
                >8 liqRibNode::parseVectorAttributes(pCube1,[],4)
                >8 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                >8 liqRibNode::findShader(phong1SG)
                >8 liqRibNode::findDisp(phong1SG)
                >8 liqRibNode::findVolume(phong1SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,10,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane1|pPlaneShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pPlane1|pPlaneShape1,1)
              >7 liqRibClipPlaneData::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader(phong1SG)
                >8 liqRibNode::findDisp(phong1SG)
                >8 liqRibNode::findVolume(phong1SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,10,2)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 Renderer::frameEpilogue(txtList_.size=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 Renderer::doShadows(shadowList_.size=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,10,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=23:33:44.28),E:/MyDocuments/maya/projects/default/mib_amb_occlusion,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(10,perspShape)
            >6 Renderer::framePrologue(10,perspShape)
              >7 Renderer::framePrologue_camera(10,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,phong1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(phong1)
                  >9 ConvertShadingNetwork::exportShaderBegin(phong1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(phong1,pCubeShape1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 Visitor::initShaderData(phong1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(phong1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(phong1)
                        >12 ShaderMgr::hasShaderType(phong)
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(mib_amb_occlusion1)
                          >13 ShaderMgr::hasShaderType(mib_amb_occlusion)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(mib_amb_occlusion1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(mib_amb_occlusion1)
                          >13 ShaderMgr::hasShaderType(mib_amb_occlusion)
                        >12 ShaderMgr::getValidConnectionRef(mib_amb_occlusion)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.samples)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.samples)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.bright)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.bright)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.dark)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.dark)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.spread)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.spread)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.max_distance)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.max_distance)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.reflective)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.reflective)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.outValue)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.outValue)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::preOutput(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 Visitor::outputBegin(phong1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(mib_amb_occlusion1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(mib_amb_occlusion1,mib_amb_occlusion)
                          >13 Visitor::visit_mib_amb_occlusion(mib_amb_occlusion1)
                            >14 OutputHelper::beginRSL(mib_amb_occlusion1)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.samples)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.samples)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.bright)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.bright)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.bright)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.dark)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.dark)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.dark)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.spread)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.spread)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.spread)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.max_distance)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.max_distance)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.max_distance)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.reflective)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.reflective)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.reflective)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(mib_amb_occlusion1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(mib_amb_occlusion1,mib_amb_occlusion)
                          >13 Visitor::visit_mib_amb_occlusion(mib_amb_occlusion1)
                            >14 OutputHelper::beginRSL(mib_amb_occlusion1)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.samples)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.samples)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.samples)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.bright)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.bright)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.bright)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.dark)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.dark)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.dark)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.spread)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.spread)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.spread)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.max_distance)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.max_distance)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.max_distance)
                            >14 ShaderMgr::convertibleConnection(mib_amb_occlusion1.reflective)
                              >15 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.reflective)
                                >16 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.reflective)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(mib_amb_occlusion)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(mib_amb_occlusion1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(mib_amb_occlusion1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.samples)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.samples)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.bright)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.bright)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.dark)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.dark)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.spread)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.spread)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.max_distance)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.max_distance)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.reflective)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.reflective)
                        >12 ConvertShadingNetwork::convertibleConnection(mib_amb_occlusion1.outValue)
                          >13 ConvertShadingNetwork::ensurePlugExists(mib_amb_occlusion1.outValue)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(mib_amb_occlusion1,outValue,mib_amb_occlusion1.outValue, outputVars)
                          >13 Visitor::addShaderMethodVariavles(3,mib_amb_occlusion1_outValue)
                          >13 Visitor::addShaderMethodVariavles(3,mib_amb_occlusion1_outValue)
                      >11 Visitor::addShaderMethodBody(mib_amb_occlusion1,[],[mib_amb_occlusion1_outValue])
                      >11 Visitor::addShaderMethodBody(mib_amb_occlusion1,[],[mib_amb_occlusion1_outValue])
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(mib_amb_occlusion1)
                                  >17 ShaderMgr::hasShaderType(mib_amb_occlusion)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(phong1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(phong1,phong)
                          >13 Visitor::visitPhong(phong1)
                            >14 OutputHelper::beginRSL(phong1)
                            >14 ShaderMgr::convertibleConnection(phong1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                            >14 ShaderMgr::convertibleConnection(phong1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                            >14 ShaderMgr::convertibleConnection(phong1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(mib_amb_occlusion1)
                                  >17 ShaderMgr::hasShaderType(mib_amb_occlusion)
                            >14 ShaderMgr::convertibleConnection(phong1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                            >14 ShaderMgr::convertibleConnection(phong1.normalCamera)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                            >14 ShaderMgr::convertibleConnection(phong1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                            >14 ShaderMgr::convertibleConnection(phong1.translucence)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceDepth)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                            >14 ShaderMgr::convertibleConnection(phong1.translucenceFocus)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                            >14 ShaderMgr::convertibleConnection(phong1.cosinePower)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                            >14 ShaderMgr::convertibleConnection(phong1.specularColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectivity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectedColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacityMode)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                            >14 ShaderMgr::convertibleConnection(phong1.matteOpacity)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                            >14 ShaderMgr::convertibleConnection(phong1.reflectionLimit)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                            >14 ShaderMgr::convertibleConnection(phong1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(phong1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(phong)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(phong1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(phong1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.color)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.ambientColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(mib_amb_occlusion1)
                            >14 ShaderMgr::hasShaderType(mib_amb_occlusion)
                        >12 ConvertShadingNetwork::addNodeInputVariable(phong1.ambientColor, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(mib_amb_occlusion1)
                            >14 ShaderMgr::hasShaderType(mib_amb_occlusion)
                          >13 ShaderMgr::getValidConnectionRef(mib_amb_occlusion)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.cosinePower)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.cosinePower)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.specularColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.specularColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectivity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectivity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectedColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectedColor)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacityMode)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacityMode)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.matteOpacity)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.matteOpacity)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.reflectionLimit)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.reflectionLimit)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(phong1SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(phong1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(phong1.outTransparency)
                      >11 Visitor::addShaderMethodBody(phong1,[mib_amb_occlusion1_outValue],[])
                      >11 Visitor::addShaderMethodBody(phong1,[mib_amb_occlusion1_outValue],[])
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(phong1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,phong1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,phong1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,phong1SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,phong1SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(phong1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                  >9 Visitor::outputShadingGroup(phong1SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(phong1SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(phong1SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.10.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.10.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pCube1|pCubeShape1,E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.10.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pCube1|pCubeShape1,perspShape)
                            >14 liqRibClipPlaneData::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
                              >15 liqTokenPointer:set(P,1,8,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.10.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.10.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.10.rib,perspShape,ref=0)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pPlane1|pPlaneShape1,perspShape)
                            >14 liqRibClipPlaneData::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                            >14 liqRibData::getFullPathName()
                            >14 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:set(P,1,4,0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube1|pCubeShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=0)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=0,c=0,,|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                >8 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=0)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                  >9 liqRibData::getFullPathName()
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(10)
            >6 Renderer::frameEpilogue(10)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=mib_amb_occlusionFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 RendererMgr::epilogue()
    >2 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::uninstall()
  >1 RendererMgr::deleteFactory()
