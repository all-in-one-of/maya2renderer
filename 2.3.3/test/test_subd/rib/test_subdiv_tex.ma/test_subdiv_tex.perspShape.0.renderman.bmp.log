>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::createFactory(renderman)
  >1 RendererMgr::install()
  >1 RendererMgr::prologue()
    >2 Renderer::openLog()(but do nothing now)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
        >4 liqRibTranslator::verifyResourceDir(RIB, rib, 0)
        >4 liqRibTranslator::verifyResourceDir(Texture, rmantex, 0)
        >4 liqRibTranslator::verifyResourceDir(Picture, rmanpix/, 0)
        >4 liqRibTranslator::verifyResourceDir(Temp Files, rmantmp/, 0)
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(test_subdiv_texFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(4,perspShape)
          >5 liqRibTranslator::generateFileName(5,perspShape)
            >6 liqRibTranslator::generateImageName(, job(perspShape))
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,,4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibClipPlaneData::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
              >7 liqRibHT::hash(|pointLight2|pointLightShape2,1)
              >7 liqRibClipPlaneData::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,2)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,3)
                >8 liqRibNode::parseVectorAttributes(pointLight2,,4)
                >8 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                >8 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                  >9 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane1|pPlaneShape1,2)
              >7 liqRibClipPlaneData::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,,4)
                >8 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pSphere_hsubd|pSphere_hsubdShape,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pSphere_hsubd|pSphere_hsubdShape,3)
              >7 liqRibClipPlaneData::find(|pSphere_hsubd|pSphere_hsubdShape,|pSphere_hsubd|pSphere_hsubdShape,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pSphere_hsubd|pSphere_hsubdShape,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pSphere_hsubd,,2)
                >8 liqRibNode::parseVectorAttributes(pSphere_hsubd,,3)
                >8 liqRibNode::parseVectorAttributes(pSphere_hsubd,,4)
                >8 liqRibNode::findShadingGroup(|pSphere_hsubd|pSphere_hsubdShape,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pSphere_hsubd|pSphere_hsubdShape,0)
                  >9 liqRibHierarchicalSubdivisionData::liqRibHierarchicalSubdivisionData(|pSphere_hsubd|pSphere_hsubdShape)
                    >10 liqRibHierarchicalSubdivisionData::initializeSubdivParameters()
                    >10 liqRibHierarchicalSubdivisionData::checkExtraTags(|pSphere_hsubd|pSphere_hsubdShape)
                      >11 liqRibHierarchicalSubdivisionData::addExtraTags(|pSphere_hsubd|pSphere_hsubdShape,0,5)
                    >10 liqRibData::addAdditionalSurfaceParameters(pSphere_hsubdShape)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|subdivSphere1|subdivSphere1Shape,lframe,0,0,4,matrix,,-1)
              >7 liqRibHT::hash(|subdivSphere1|subdivSphere1Shape,4)
              >7 liqRibClipPlaneData::find(|subdivSphere1|subdivSphere1Shape,|subdivSphere1|subdivSphere1Shape,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|subdivSphere1|subdivSphere1Shape,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(subdivSphere1,,2)
                >8 liqRibNode::parseVectorAttributes(subdivSphere1,,3)
                >8 liqRibNode::parseVectorAttributes(subdivSphere1,,4)
                >8 liqRibNode::findShadingGroup(|subdivSphere1|subdivSphere1Shape,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|subdivSphere1|subdivSphere1Shape,0)
                  >9 liqRibMayaSubdivisionData::liqRibMayaSubdivisionData(|subdivSphere1|subdivSphere1Shape)
                    >10 liqRibMayaSubdivisionData::checkExtraTags(|subdivSphere1|subdivSphere1Shape)
                      >11 liqRibMayaSubdivisionData::addExtraTags(|subdivSphere1|subdivSphere1Shape,2,3)
                      >11 liqRibMayaSubdivisionData::addExtraTags(|subdivSphere1|subdivSphere1Shape,0,5)
                    >10 liqRibData::addAdditionalSurfaceParameters(subdivSphere1Shape)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pSphere_subd|pSphere_subdShape,lframe,0,0,5,matrix,,-1)
              >7 liqRibHT::hash(|pSphere_subd|pSphere_subdShape,5)
              >7 liqRibClipPlaneData::find(|pSphere_subd|pSphere_subdShape,|pSphere_subd|pSphere_subdShape,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pSphere_subd|pSphere_subdShape,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pSphere_subd,,2)
                >8 liqRibNode::parseVectorAttributes(pSphere_subd,,3)
                >8 liqRibNode::parseVectorAttributes(pSphere_subd,,4)
                >8 liqRibNode::findShadingGroup(|pSphere_subd|pSphere_subdShape,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pSphere_subd|pSphere_subdShape,0)
                  >9 liqRibSubdivisionData::liqRibSubdivisionData(|pSphere_subd|pSphere_subdShape)
                    >10 liqRibSubdivisionData::checkExtraTags(pSphere_subdShape)
                      >11 liqRibSubdivisionData::addExtraTags(pSphere_subdShape,0,5)
                    >10 liqRibData::addAdditionalSurfaceParameters(pSphere_subdShape)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pSphere2|pSphereShape2,lframe,0,0,6,matrix,,-1)
              >7 liqRibHT::hash(|pSphere2|pSphereShape2,6)
              >7 liqRibClipPlaneData::find(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pSphere2|pSphereShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pSphere2,,2)
                >8 liqRibNode::parseVectorAttributes(pSphere2,,3)
                >8 liqRibNode::parseVectorAttributes(pSphere2,,4)
                >8 liqRibNode::findShadingGroup(|pSphere2|pSphereShape2,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pSphere2|pSphereShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pSphere2|pSphereShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pSphereShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,7)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 rm::Renderer::doTextures(txtList.size()=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 rm::Renderer::doShadows(shadowList_.size()=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/test_subdiv_tex_perspShape.0001..rib(strlen=77)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime= 0:59:21.68),E:/MyDocuments/maya/projects/default/test_subdiv_tex,yaoyansi,time)
            >6 Renderer::ribPrologue_options(perspShape)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 tHeroRibWriterMgr::framePrologue_display(perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 tRibCameraMgr::framePrologue_camera(1,job.title=perspShape)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert1)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1,surfaceShader)
                    >10 Visitor::initShaderData(lambert1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnection(lambert1)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert1)
                    >10 Visitor::outputBegin(lambert1), open shader file
                      >11 getShaderFilePath_SRC(lambert1)
                        >12 getShaderFilePath_NoExt(lambert1)
                      >11 getShaderName(lambert1)
                      >11 Visitor::defineAOVVariables(lambert1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                              >15 getShaderName(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(place2dTexture1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,coverage,float,2,)
                            >14 getVariableName(place2dTexture1,coverage)
                              >15 getVariableName(place2dTexture1_coverage)
                          >13 getVariableName(place2dTexture1,coverage)
                            >14 getVariableName(place2dTexture1_coverage)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorU,float,0,)
                            >14 getVariableName(place2dTexture1,mirrorU)
                              >15 getVariableName(place2dTexture1_mirrorU)
                          >13 getVariableName(place2dTexture1,mirrorU)
                            >14 getVariableName(place2dTexture1_mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,mirrorV,float,0,)
                            >14 getVariableName(place2dTexture1,mirrorV)
                              >15 getVariableName(place2dTexture1_mirrorV)
                          >13 getVariableName(place2dTexture1,mirrorV)
                            >14 getVariableName(place2dTexture1_mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,noiseUV,float,2,)
                            >14 getVariableName(place2dTexture1,noiseUV)
                              >15 getVariableName(place2dTexture1_noiseUV)
                          >13 getVariableName(place2dTexture1,noiseUV)
                            >14 getVariableName(place2dTexture1_noiseUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,offset,float,2,)
                            >14 getVariableName(place2dTexture1,offset)
                              >15 getVariableName(place2dTexture1_offset)
                          >13 getVariableName(place2dTexture1,offset)
                            >14 getVariableName(place2dTexture1_offset)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,repeatUV,float,2,)
                            >14 getVariableName(place2dTexture1,repeatUV)
                              >15 getVariableName(place2dTexture1_repeatUV)
                          >13 getVariableName(place2dTexture1,repeatUV)
                            >14 getVariableName(place2dTexture1_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateFrame,float,0,)
                            >14 getVariableName(place2dTexture1,rotateFrame)
                              >15 getVariableName(place2dTexture1_rotateFrame)
                          >13 getVariableName(place2dTexture1,rotateFrame)
                            >14 getVariableName(place2dTexture1_rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,rotateUV,float,0,)
                            >14 getVariableName(place2dTexture1,rotateUV)
                              >15 getVariableName(place2dTexture1_rotateUV)
                          >13 getVariableName(place2dTexture1,rotateUV)
                            >14 getVariableName(place2dTexture1_rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,stagger,float,0,)
                            >14 getVariableName(place2dTexture1,stagger)
                              >15 getVariableName(place2dTexture1_stagger)
                          >13 getVariableName(place2dTexture1,stagger)
                            >14 getVariableName(place2dTexture1_stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,translateFrame,float,2,)
                            >14 getVariableName(place2dTexture1,translateFrame)
                              >15 getVariableName(place2dTexture1_translateFrame)
                          >13 getVariableName(place2dTexture1,translateFrame)
                            >14 getVariableName(place2dTexture1_translateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapU,float,0,)
                            >14 getVariableName(place2dTexture1,wrapU)
                              >15 getVariableName(place2dTexture1_wrapU)
                          >13 getVariableName(place2dTexture1,wrapU)
                            >14 getVariableName(place2dTexture1_wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,wrapV,float,0,)
                            >14 getVariableName(place2dTexture1,wrapV)
                              >15 getVariableName(place2dTexture1_wrapV)
                          >13 getVariableName(place2dTexture1,wrapV)
                            >14 getVariableName(place2dTexture1_wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(place2dTexture1,outUV,float,2,)
                            >14 getVariableName(place2dTexture1,outUV)
                              >15 getVariableName(place2dTexture1_outUV)
                          >13 getVariableName(place2dTexture1,outUV)
                            >14 getVariableName(place2dTexture1_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,,place2dTexture1_coverage124place2dTexture1_mirrorU124place2dTexture1_mirrorV124place2dTexture1_noiseUV124place2dTexture1_offset124place2dTexture1_repeatUV124place2dTexture1_rotateFrame124place2dTexture1_rotateUV124place2dTexture1_stagger124place2dTexture1_translateFrame124place2dTexture1_wrapU124place2dTexture1_wrapV124place2dTexture1_outUV124)
                        >12 getVariableName(place2dTexture1_coverage)
                        >12 getVariableName(place2dTexture1_mirrorU)
                        >12 getVariableName(place2dTexture1_mirrorV)
                        >12 getVariableName(place2dTexture1_noiseUV)
                        >12 getVariableName(place2dTexture1_offset)
                        >12 getVariableName(place2dTexture1_repeatUV)
                        >12 getVariableName(place2dTexture1_rotateFrame)
                        >12 getVariableName(place2dTexture1_rotateUV)
                        >12 getVariableName(place2dTexture1_stagger)
                        >12 getVariableName(place2dTexture1_translateFrame)
                        >12 getVariableName(place2dTexture1_wrapU)
                        >12 getVariableName(place2dTexture1_wrapV)
                        >12 getVariableName(place2dTexture1_outUV)
                        >12 getShaderName(place2dTexture1)
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file1)
                              >15 getShaderName(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(file1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnection(place2dTexture1)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(file1,outColor,vector,-1,)
                            >14 getVariableName(file1,outColor)
                              >15 getVariableName(file1_outColor)
                          >13 getVariableName(file1,outColor)
                            >14 getVariableName(file1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,place2dTexture1_outUV124,file1_outColor124)
                        >12 getVariableName(place2dTexture1_outUV)
                        >12 getVariableName(file1_outColor)
                        >12 getShaderName(file1)
                      >11 Visitor::outputUpstreamShader(lambert1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                          >13 Visitor::visitLambert(lambert1)
                            >14 OutputHelper::beginRSL(lambert1)
                              >15 getShaderName(lambert1)
                            >14 ShaderMgr::convertibleConnection(lambert1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnection(lambert1)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert1.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnection(file1)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.normalCamera)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.normalCamera)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceDepth)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceDepth)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.translucenceFocus)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.translucenceFocus)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert1,file1_outColor124,)
                        >12 getVariableName(file1_outColor)
                        >12 getShaderName(lambert1)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert1)
                        >12 getShaderFilePath_NoExt(lambert1)
                      >11 getShaderFilePath_SRC(lambert1)
                        >12 getShaderFilePath_NoExt(lambert1)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(initialShadingGroup,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                >8 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                  >9 Visitor::outputShadingGroup(initialShadingGroup)
                    >10 Visitor::outputShadingGroup(initialShadingGroup,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
            >6 Renderer::writeLight_pre(|pointLight2|pointLightShape2,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight2|pointLightShape2,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pSphere_hsubd|pSphere_hsubdShape,perspShape)
                >8 Renderer::exportOneObject_data(|pSphere_hsubd|pSphere_hsubdShape,perspShape)
                  >9 Renderer::_writeObject(|pSphere_hsubd|pSphere_hsubdShape,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pSphere_hsubd_pSphere_hsubdShape.1.rib,perspShape,0)
                      >11 liqRibHierarchicalSubdivisionData::write(E:/MyDocuments/maya/projects/default/rib/_pSphere_hsubd_pSphere_hsubdShape.1.rib,job=perspShape,0)
                        >12 Helper::RiBeginRef(E:/MyDocuments/maya/projects/default/rib/_pSphere_hsubd_pSphere_hsubdShape.1.rib)
                          >13 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/_pSphere_hsubd_pSphere_hsubdShape.1.rib(strlen=80)
                        >12 liqRibHierarchicalSubdivisionData::_write(job=perspShape)
                        >12 Helper::RiEndRef()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|subdivSphere1|subdivSphere1Shape,perspShape)
                >8 Renderer::exportOneObject_data(|subdivSphere1|subdivSphere1Shape,perspShape)
                  >9 Renderer::_writeObject(|subdivSphere1|subdivSphere1Shape,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_subdivSphere1_subdivSphere1Shape.1.rib,perspShape,0)
                      >11 liqRibMayaSubdivisionData::write(E:/MyDocuments/maya/projects/default/rib/_subdivSphere1_subdivSphere1Shape.1.rib,job=perspShape,0)
                        >12 Helper::RiBeginRef(E:/MyDocuments/maya/projects/default/rib/_subdivSphere1_subdivSphere1Shape.1.rib)
                          >13 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/_subdivSphere1_subdivSphere1Shape.1.rib(strlen=80)
                        >12 liqRibMayaSubdivisionData::_write(job=perspShape)
                        >12 Helper::RiEndRef()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pSphere_subd|pSphere_subdShape,perspShape)
                >8 Renderer::exportOneObject_data(|pSphere_subd|pSphere_subdShape,perspShape)
                  >9 Renderer::_writeObject(|pSphere_subd|pSphere_subdShape,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pSphere_subd_pSphere_subdShape.1.rib,perspShape,0)
                      >11 liqRibSubdivisionData::write(E:/MyDocuments/maya/projects/default/rib/_pSphere_subd_pSphere_subdShape.1.rib,job=perspShape,0)
                        >12 Helper::RiBeginRef(E:/MyDocuments/maya/projects/default/rib/_pSphere_subd_pSphere_subdShape.1.rib)
                          >13 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/_pSphere_subd_pSphere_subdShape.1.rib(strlen=78)
                        >12 liqRibSubdivisionData::_write(job=perspShape)
                        >12 Helper::RiEndRef()
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pSphere2|pSphereShape2,perspShape)
                >8 Renderer::exportOneObject_data(|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::_writeObject(|pSphere2|pSphereShape2,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pSphere2|pSphereShape2,E:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,ref=0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pPlane1|pPlaneShape1)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=0,c=0,,|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                    >10 liqRibTranslatorNew::F2(0,|pPlane1|pPlaneShape1)
                    >10 liqRibNode::findShader(initialShadingGroup)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                  >9 Visitor::outputShadingGroup(initialShadingGroup,1)
                    >10 _outputShadingGroup(initialShadingGroup)
                      >11 getShaderFilePath_NoExt(lambert1)
                >8 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane1|pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|pPlane1|pPlaneShape1,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere_hsubd|pSphere_hsubdShape,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere_hsubd|pSphere_hsubdShape,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere_hsubd|pSphere_hsubdShape,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere_hsubd|pSphere_hsubdShape)
                  >9 Renderer::exportLightLinks(perspShape,|pSphere_hsubd|pSphere_hsubdShape,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pSphere_hsubd|pSphere_hsubdShape,|pSphere_hsubd|pSphere_hsubdShape,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pSphere_hsubd|pSphere_hsubdShape,|pSphere_hsubd|pSphere_hsubdShape,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pSphere_hsubd|pSphere_hsubdShape,|pSphere_hsubd|pSphere_hsubdShape,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere_hsubd|pSphere_hsubdShape,perspShape)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pSphere_hsubd|pSphere_hsubdShape)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pSphere_hsubd|pSphere_hsubdShape,v=0,s=0,c=0,,|pSphere_hsubd|pSphere_hsubdShape,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere_hsubd|pSphere_hsubdShape,|pSphere_hsubd|pSphere_hsubdShape,0)
                    >10 liqRibTranslatorNew::F2(0,|pSphere_hsubd|pSphere_hsubdShape)
                    >10 liqRibNode::findShader(initialShadingGroup)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere_hsubd|pSphere_hsubdShape)
                  >9 Visitor::outputShadingGroup(initialShadingGroup,1)
                    >10 _outputShadingGroup(initialShadingGroup)
                      >11 getShaderFilePath_NoExt(lambert1)
                >8 Renderer::exportOneObject_reference(|pSphere_hsubd|pSphere_hsubdShape,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pSphere_hsubd|pSphere_hsubdShape,|pSphere_hsubd|pSphere_hsubdShape,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pSphere_hsubd|pSphere_hsubdShape,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pSphere_hsubd_pSphere_hsubdShape.1.rib,perspShape,1)
                      >11 liqRibHierarchicalSubdivisionData::write(E:/MyDocuments/maya/projects/default/rib/_pSphere_hsubd_pSphere_hsubdShape.1.rib,job=perspShape,1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pSphere_hsubd|pSphere_hsubdShape,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|subdivSphere1|subdivSphere1Shape,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|subdivSphere1|subdivSphere1Shape,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|subdivSphere1|subdivSphere1Shape,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|subdivSphere1|subdivSphere1Shape)
                  >9 Renderer::exportLightLinks(perspShape,|subdivSphere1|subdivSphere1Shape,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|subdivSphere1|subdivSphere1Shape,|subdivSphere1|subdivSphere1Shape,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|subdivSphere1|subdivSphere1Shape,|subdivSphere1|subdivSphere1Shape,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|subdivSphere1|subdivSphere1Shape,|subdivSphere1|subdivSphere1Shape,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|subdivSphere1|subdivSphere1Shape,perspShape)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|subdivSphere1|subdivSphere1Shape)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|subdivSphere1|subdivSphere1Shape,v=0,s=0,c=0,,|subdivSphere1|subdivSphere1Shape,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|subdivSphere1|subdivSphere1Shape,|subdivSphere1|subdivSphere1Shape,0)
                    >10 liqRibTranslatorNew::F2(0,|subdivSphere1|subdivSphere1Shape)
                    >10 liqRibNode::findShader(initialShadingGroup)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|subdivSphere1|subdivSphere1Shape)
                  >9 Visitor::outputShadingGroup(initialShadingGroup,1)
                    >10 _outputShadingGroup(initialShadingGroup)
                      >11 getShaderFilePath_NoExt(lambert1)
                >8 Renderer::exportOneObject_reference(|subdivSphere1|subdivSphere1Shape,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|subdivSphere1|subdivSphere1Shape,|subdivSphere1|subdivSphere1Shape,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|subdivSphere1|subdivSphere1Shape,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_subdivSphere1_subdivSphere1Shape.1.rib,perspShape,1)
                      >11 liqRibMayaSubdivisionData::write(E:/MyDocuments/maya/projects/default/rib/_subdivSphere1_subdivSphere1Shape.1.rib,job=perspShape,1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|subdivSphere1|subdivSphere1Shape,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere_subd|pSphere_subdShape,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere_subd|pSphere_subdShape,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere_subd|pSphere_subdShape,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere_subd|pSphere_subdShape)
                  >9 Renderer::exportLightLinks(perspShape,|pSphere_subd|pSphere_subdShape,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pSphere_subd|pSphere_subdShape,|pSphere_subd|pSphere_subdShape,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pSphere_subd|pSphere_subdShape,|pSphere_subd|pSphere_subdShape,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pSphere_subd|pSphere_subdShape,|pSphere_subd|pSphere_subdShape,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere_subd|pSphere_subdShape,perspShape)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pSphere_subd|pSphere_subdShape)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pSphere_subd|pSphere_subdShape,v=0,s=0,c=0,,|pSphere_subd|pSphere_subdShape,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere_subd|pSphere_subdShape,|pSphere_subd|pSphere_subdShape,0)
                    >10 liqRibTranslatorNew::F2(0,|pSphere_subd|pSphere_subdShape)
                    >10 liqRibNode::findShader(initialShadingGroup)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere_subd|pSphere_subdShape)
                  >9 Visitor::outputShadingGroup(initialShadingGroup,1)
                    >10 _outputShadingGroup(initialShadingGroup)
                      >11 getShaderFilePath_NoExt(lambert1)
                >8 Renderer::exportOneObject_reference(|pSphere_subd|pSphere_subdShape,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pSphere_subd|pSphere_subdShape,|pSphere_subd|pSphere_subdShape,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pSphere_subd|pSphere_subdShape,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pSphere_subd_pSphere_subdShape.1.rib,perspShape,1)
                      >11 liqRibSubdivisionData::write(E:/MyDocuments/maya/projects/default/rib/_pSphere_subd_pSphere_subdShape.1.rib,job=perspShape,1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pSphere_subd|pSphere_subdShape,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere2|pSphereShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere2|pSphereShape2,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere2|pSphereShape2,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere2|pSphereShape2)
                  >9 Renderer::exportLightLinks(perspShape,|pSphere2|pSphereShape2,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere2|pSphereShape2,perspShape)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pSphere2|pSphereShape2)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pSphere2|pSphereShape2,v=0,s=0,c=0,,|pSphere2|pSphereShape2,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                    >10 liqRibTranslatorNew::F2(0,|pSphere2|pSphereShape2)
                    >10 liqRibNode::findShader(initialShadingGroup)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere2|pSphereShape2)
                  >9 Visitor::outputShadingGroup(initialShadingGroup,1)
                    >10 _outputShadingGroup(initialShadingGroup)
                      >11 getShaderFilePath_NoExt(lambert1)
                >8 Renderer::exportOneObject_reference(|pSphere2|pSphereShape2,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pSphere2|pSphereShape2,|pSphere2|pSphereShape2,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pSphere2|pSphereShape2,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pSphere2|pSphereShape2,E:/MyDocuments/maya/projects/default/rib/_pSphere2_pSphereShape2.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 rm_writeMeshData.cpp::_write(|pSphere2|pSphereShape2,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pSphere2|pSphereShape2,perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
        >4 Renderer::HeroPassEnd(perspShape)
          >5 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/test_subdiv_tex_perspShape.0001..rib)
            >6 liqProcessLauncher::_execute(prman,   "E:/MyDocuments/maya/projects/default/rib/test_subdiv_tex_perspShape.0001..rib","E:/MyDocuments/maya/projects/default/", wait=0)
              >7 liqProcessLauncher::_execute(prman,   "E:/MyDocuments/maya/projects/default/rib/test_subdiv_tex_perspShape.0001..rib","E:/MyDocuments/maya/projects/default/", wait=0)
            >6 Renderer::doRenderView()
              >7 getNode(perspShape)
              >7 liqMayaRenderCmd::createSocket(localhost,6667)
              >7 waitSocket(3764,20,1)
              >7 readSockData(3744,data,28)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,1040400)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,1040400)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,1044480)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,1044480)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,8160)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,1044480)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,1048576)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,8192)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,265200)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,266240)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,266240)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
                >8 readSockData(3744,data,1040)
              >7 liqMayaRenderCmd::renderBucket(b,imgInfo)
              >7 liqMayaRenderCmd::getBucket(3744,4b, theEnd)
                >8 waitSocket(3744,20,1)
                >8 readSockData(3744,data,20)
              >7 liqMayaRenderCmd::writeBuckets(C:\DOCUME~1\yaoyansi\LOCALS~1\Temp/liqRVa65300buckets, info)
      >3 liqRenderScript::addJob(job.title=test_subdiv_texFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 RendererMgr::epilogue()
    >2 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::uninstall()
  >1 RendererMgr::deleteFactory()
