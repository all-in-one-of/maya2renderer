>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 Renderer::openLog()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(er_vertex_normalFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(liquidSurface1)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqGetSloInfo::setShaderNode(liquidSurface1)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface1,Cs,2)
              >7 liqTokenPointer:set(Cs,2,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Cs,2,0,0)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface1,Kd,2)
              >7 liqTokenPointer:set(Kd,2,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Cs,2,0,0)
            >6 liqTokenPointer:set(Kd,2,0,0)
            >6 liqTokenPointer:set(Ks,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Cs,2,0,0)
            >6 liqTokenPointer:set(Kd,2,0,0)
            >6 liqTokenPointer:set(Ks,0,0,0)
            >6 liqTokenPointer:set(roughness,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Cs,2,0,0)
            >6 liqTokenPointer:set(Kd,2,0,0)
            >6 liqTokenPointer:set(Ks,0,0,0)
            >6 liqTokenPointer:set(roughness,0,0,0)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface1,specularcolor,4)
              >7 liqTokenPointer:set(specularcolor,4,0,0)
            >6 liqTokenPointer:set(,0,0,0)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidSurface1)
          >5 liqShader::liqShader(liquidSurface2)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqGetSloInfo::setShaderNode(liquidSurface2)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidSurface2)
          >5 liqShader::liqShader(liquidSurface3)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqGetSloInfo::setShaderNode(liquidSurface3)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface3,Cs,2)
              >7 liqTokenPointer:set(Cs,2,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Cs,2,0,0)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface3,Kd,2)
              >7 liqTokenPointer:set(Kd,2,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Cs,2,0,0)
            >6 liqTokenPointer:set(Kd,2,0,0)
            >6 liqTokenPointer:set(Ks,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Cs,2,0,0)
            >6 liqTokenPointer:set(Kd,2,0,0)
            >6 liqTokenPointer:set(Ks,0,0,0)
            >6 liqTokenPointer:set(roughness,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Cs,2,0,0)
            >6 liqTokenPointer:set(Kd,2,0,0)
            >6 liqTokenPointer:set(Ks,0,0,0)
            >6 liqTokenPointer:set(roughness,0,0,0)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface3,specularcolor,4)
              >7 liqTokenPointer:set(specularcolor,4,0,0)
            >6 liqTokenPointer:set(,0,0,0)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidSurface3)
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube1|pCubeShape1,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pCube1|pCubeShape1,1)
              >7 liqRibClipPlaneData::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube1|pCubeShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube1,[],2)
                >8 liqRibNode::parseVectorAttributes(pCube1,[],3)
                >8 liqRibNode::parseVectorAttributes(pCube1,[],4)
                >8 liqRibNode::findShadingGroup(|pCube1|pCubeShape1,0)
                >8 liqRibNode::findShader(liquidSurface1SG)
                >8 liqRibNode::findDisp(liquidSurface1SG)
                >8 liqRibNode::findVolume(liquidSurface1SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube1|pCubeShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube1|pCubeShape1)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane1|pPlaneShape1,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane1|pPlaneShape1,2)
              >7 liqRibClipPlaneData::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane1|pPlaneShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane1,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane1|pPlaneShape1,0)
                >8 liqRibNode::findShader(liquidSurface3SG)
                >8 liqRibNode::findDisp(liquidSurface3SG)
                >8 liqRibNode::findVolume(liquidSurface3SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane1|pPlaneShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane1|pPlaneShape1)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pSphere1|pSphereShape1,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pSphere1|pSphereShape1,3)
              >7 liqRibClipPlaneData::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pSphere1|pSphereShape1,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pSphere1,[],2)
                >8 liqRibNode::parseVectorAttributes(pSphere1,[],3)
                >8 liqRibNode::parseVectorAttributes(pSphere1,[],4)
                >8 liqRibNode::findShadingGroup(|pSphere1|pSphereShape1,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pSphere1|pSphereShape1,0)
                  >9 liqRibMeshData::liqRibMeshData(|pSphere1|pSphereShape1)
                    >10 liqTokenPointer:set(P,1,82,0)
                    >10 liqTokenPointer:set(N,3,82,0)
                    >10 liqTokenPointer:set(st,0,274,2)
                    >10 liqTokenPointer:set(st,0,274,2)
                    >10 liqTokenPointer:set(P,1,82,0)
                    >10 liqTokenPointer:set(N,3,82,0)
                    >10 liqTokenPointer:set(P,1,82,0)
                    >10 liqTokenPointer:set(P,1,82,0)
                    >10 liqTokenPointer:set(N,3,82,0)
                    >10 liqTokenPointer:set(st,0,274,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pSphereShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,4)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=17:47:45.96),E:/MyDocuments/maya/projects/default/er_vertex_normal,admin,time)
              >7 Renderer::pretest()
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 Renderer::dummyPhongShader()
            >6 Renderer::ribPrologue_options(perspShape)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 Renderer::gatherCameraShaders(cameraShaders.size=0,|persp|perspShape,liqEnvironmentShader)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(liquidSurface1SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,liquidSurface1SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(liquidSurface1)
                  >9 ConvertShadingNetwork::exportShaderBegin(liquidSurface1)
                  >9 liqShaderFactory::getShader(liquidSurface1)
                    >10 liqShader::liqShader(liquidSurface1)
                      >11 liqShaderFactory::getUniqueShaderHandler()
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqGetSloInfo::setShaderNode(liquidSurface1)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface1,Cs,2)
                        >12 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface1,Kd,2)
                        >12 liqTokenPointer:set(Kd,2,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqTokenPointer:set(Kd,2,0,0)
                      >11 liqTokenPointer:set(Ks,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqTokenPointer:set(Kd,2,0,0)
                      >11 liqTokenPointer:set(Ks,0,0,0)
                      >11 liqTokenPointer:set(roughness,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqTokenPointer:set(Kd,2,0,0)
                      >11 liqTokenPointer:set(Ks,0,0,0)
                      >11 liqTokenPointer:set(roughness,0,0,0)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface1,specularcolor,4)
                        >12 liqTokenPointer:set(specularcolor,4,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                  >9 liqShader::write()
                    >10 liqShader::getName()
                    >10 shader_UserDefinedShader(liquidSurface1)
                      >11 liqShader::getShaderFileName()
                      >11 liqShader::getName()
                      >11 Renderer::shader_surface(liquidSurface1, tokenPointerArray)
                        >12 liqShader::getName()
                        >12 Renderer::_UserDefinedShader(liquidSurface1, tokenPointerArray)
                          >13 liqShader::getName()
                          >13 liqShader::getShaderFileName()
                  >9 ConvertShadingNetwork::exportShaderEnd(liquidSurface1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,liquidSurface1SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,liquidSurface1SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,liquidSurface1SG,liqShadowShader)
                  >9 ConvertShadingNetwork::canShaderExported(liquidSurface2)
                  >9 ConvertShadingNetwork::exportShaderBegin(liquidSurface2)
                  >9 liqShaderFactory::getShader(liquidSurface2)
                    >10 liqShader::liqShader(liquidSurface2)
                      >11 liqShaderFactory::getUniqueShaderHandler()
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqGetSloInfo::setShaderNode(liquidSurface2)
                  >9 liqShader::write()
                    >10 liqShader::getName()
                    >10 shader_UserDefinedShader(liquidSurface2)
                      >11 liqShader::getShaderFileName()
                      >11 liqShader::getName()
                      >11 Renderer::shader_shadow(liquidSurface2,tokenPointerArray)
                        >12 liqShader::getName()
                        >12 Renderer::_UserDefinedShader(liquidSurface2, tokenPointerArray)
                          >13 liqShader::getName()
                          >13 liqShader::getShaderFileName()
                  >9 ConvertShadingNetwork::exportShaderEnd(liquidSurface2)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,liquidSurface1SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape1,liquidSurface1SG,liqPhotonShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(liquidSurface1SG)
                >8 ConvertShadingNetwork::outputShadingGroup(liquidSurface1SG)
                  >9 Visitor::outputShadingGroup(liquidSurface1SG)
                  >9 Visitor::outputShadingGroup(liquidSurface1SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(liquidSurface1SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(liquidSurface3SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,liquidSurface3SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(liquidSurface3)
                  >9 ConvertShadingNetwork::exportShaderBegin(liquidSurface3)
                  >9 liqShaderFactory::getShader(liquidSurface3)
                    >10 liqShader::liqShader(liquidSurface3)
                      >11 liqShaderFactory::getUniqueShaderHandler()
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqGetSloInfo::setShaderNode(liquidSurface3)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface3,Cs,2)
                        >12 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface3,Kd,2)
                        >12 liqTokenPointer:set(Kd,2,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqTokenPointer:set(Kd,2,0,0)
                      >11 liqTokenPointer:set(Ks,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqTokenPointer:set(Kd,2,0,0)
                      >11 liqTokenPointer:set(Ks,0,0,0)
                      >11 liqTokenPointer:set(roughness,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Cs,2,0,0)
                      >11 liqTokenPointer:set(Kd,2,0,0)
                      >11 liqTokenPointer:set(Ks,0,0,0)
                      >11 liqTokenPointer:set(roughness,0,0,0)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface3,specularcolor,4)
                        >12 liqTokenPointer:set(specularcolor,4,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                  >9 liqShader::write()
                    >10 liqShader::getName()
                    >10 shader_UserDefinedShader(liquidSurface3)
                      >11 liqShader::getShaderFileName()
                      >11 liqShader::getName()
                      >11 Renderer::shader_surface(liquidSurface3, tokenPointerArray)
                        >12 liqShader::getName()
                        >12 Renderer::_UserDefinedShader(liquidSurface3, tokenPointerArray)
                          >13 liqShader::getName()
                          >13 liqShader::getShaderFileName()
                  >9 ConvertShadingNetwork::exportShaderEnd(liquidSurface3)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,liquidSurface3SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,liquidSurface3SG,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,liquidSurface3SG,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,liquidSurface3SG,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape1,liquidSurface3SG,liqPhotonShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(liquidSurface3SG)
                >8 ConvertShadingNetwork::outputShadingGroup(liquidSurface3SG)
                  >9 Visitor::outputShadingGroup(liquidSurface3SG)
                  >9 Visitor::outputShadingGroup(liquidSurface3SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(liquidSurface3SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pSphereShape1,initialShadingGroup,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert1)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1,pSphereShape1)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert1)
                    >10 Visitor::preOutput(lambert1)
                    >10 Visitor::outputBegin(lambert1)
                    >10 Visitor::outputBegin(lambert1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections, shaderData)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverageV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offsetV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrameV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, shaderData, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars, shaderData)
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::beginRSL(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.fileTextureName)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, shaderData, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::outputUpstreamShader(lambert1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                          >13 Visitor::visitLambert(lambert1)
                            >14 OutputHelper::beginRSL(lambert1)
                            >14 ShaderMgr::convertibleConnection(lambert1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 Visitor::outputUpstreamShader(lambert1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                          >13 Visitor::visitLambert(lambert1)
                            >14 OutputHelper::beginRSL(lambert1)
                            >14 ShaderMgr::convertibleConnection(lambert1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections, shaderData, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert1.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                    >10 ConvertShadingNetwork::outputShaderMethod(shaderData)
                      >11 Visitor::outputShaderMethod(lambert1, float place2dTexture1_repeatUV[2];
 float place2dTexture1_outUV[2];
 vector file1_outColor;
, place2dTexture1(place2dTexture1_repeatUV, place2dTexture1_outUV);
//input: 
//output:place2dTexture1_repeatUV,place2dTexture1_outUV,

 file1(place2dTexture1_outUV, file1_outColor);
//input: place2dTexture1_outUV,
//output:file1_outColor,

 lambert1(file1_outColor);
//input: file1_outColor,
//output:

)
                      >11 Visitor::outputShaderMethod(lambert1, float place2dTexture1_repeatUV[2];
 float place2dTexture1_outUV[2];
 vector file1_outColor;
, place2dTexture1(place2dTexture1_repeatUV, place2dTexture1_outUV);
//input: 
//output:place2dTexture1_repeatUV,place2dTexture1_outUV,

 file1(place2dTexture1_outUV, file1_outColor);
//input: place2dTexture1_outUV,
//output:file1_outColor,

 lambert1(file1_outColor);
//input: file1_outColor,
//output:

)
                    >10 Visitor::outputEnd()
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pSphereShape1,initialShadingGroup,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pSphereShape1,initialShadingGroup,volumeShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pSphereShape1,initialShadingGroup,liqShadowShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pSphereShape1,initialShadingGroup,liqEnvironmentShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pSphereShape1,initialShadingGroup,liqPhotonShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                >8 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                  >9 Visitor::outputShadingGroup(initialShadingGroup)
                  >9 Visitor::outputShadingGroup(initialShadingGroup)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
              >7 ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::_writeObject(|pCube1|pCubeShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,job=perspShape,0)
                        >12 Renderer::write(pCubeShape1,E:/MyDocuments/maya/projects/default/rib/_pCube1_pCubeShape1.1.rib,perspShape,ref=0)
                          >13 _write(pCubeShape1,perspShape)
                            >14 liqRibClipPlaneData::find(|pCube1|pCubeShape1,|pCube1|pCubeShape1,0)
                            >14 _exportVertexFromNodePlug(|pCube1|pCubeShape1,0)
                              >15 liqTokenPointer:set(P,1,8,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::_writeObject(|pPlane1|pPlaneShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,job=perspShape,0)
                        >12 Renderer::write(pPlaneShape1,E:/MyDocuments/maya/projects/default/rib/_pPlane1_pPlaneShape1.1.rib,perspShape,ref=0)
                          >13 _write(pPlaneShape1,perspShape)
                            >14 liqRibClipPlaneData::find(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,0)
                            >14 _exportVertexFromNodePlug(|pPlane1|pPlaneShape1,0)
                              >15 liqTokenPointer:set(P,1,4,0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pSphere1|pSphereShape1,perspShape)
                >8 Renderer::exportOneObject_data(|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::_writeObject(|pSphere1|pSphereShape1,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,job=perspShape,0)
                        >12 Renderer::write(pSphereShape1,E:/MyDocuments/maya/projects/default/rib/_pSphere1_pSphereShape1.1.rib,perspShape,ref=0)
                          >13 _write(pSphereShape1,perspShape)
                            >14 liqRibClipPlaneData::find(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                            >14 _exportVertexFromNodePlug(|pSphere1|pSphereShape1,0)
                              >15 liqTokenPointer:set(P,1,82,0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pCube1|pCubeShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pCube1|pCubeShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube1|pCubeShape1,|pCube1|pCubeShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube1|pCubeShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pCube1|pCubeShape1,v=0,s=1,c=0,,|pCube1|pCubeShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pCube1|pCubeShape1)
                >8 Renderer::exportOneObject_reference(|pCube1|pCubeShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube1|pCubeShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane1|pPlaneShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane1|pPlaneShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane1|pPlaneShape1,|pPlane1|pPlaneShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane1|pPlaneShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane1|pPlaneShape1,v=0,s=1,c=0,,|pPlane1|pPlaneShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane1|pPlaneShape1)
                >8 Renderer::exportOneObject_reference(|pPlane1|pPlaneShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane1|pPlaneShape1,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pSphere1|pSphereShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pSphere1|pSphereShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pSphere1|pSphereShape1,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pSphere1|pSphereShape1)
                  >9 Renderer::exportLightLinks(perspShape,|pSphere1|pSphereShape1,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pSphere1|pSphereShape1,perspShape)
                >8 liqRibTranslatorNew::writeShader_(1,|pSphere1|pSphereShape1,v=0,s=0,c=0,,|pSphere1|pSphereShape1,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pSphere1|pSphereShape1,|pSphere1|pSphereShape1,0)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pSphere1|pSphereShape1)
                >8 Renderer::exportOneObject_reference(|pSphere1|pSphereShape1,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pSphere1|pSphereShape1,perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
              >7 Renderer::cookInstanceGroup()
        >4 Renderer::HeroPassEnd(perspShape)
      >3 liqRenderScript::addJob(job.title=er_vertex_normalFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::doTextures(size=0)
        >4 Renderer::frameEpilogue(txtList_.size=0)
      >3 liqRibTranslatorNew::doShadows(size=0)
        >4 Renderer::doShadows(shadowList_.size=0)
      >3 Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/er_vertex_normal_perspShape.0001.rib)
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()
