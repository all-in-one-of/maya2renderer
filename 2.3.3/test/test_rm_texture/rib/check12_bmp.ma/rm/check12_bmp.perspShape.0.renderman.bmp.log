>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 RendererMgr::createFactory(renderman)
  >1 RendererMgr::install()
  >1 RendererMgr::prologue()
    >2 Renderer::openLog()(but do nothing now)
  >1 Renderer::canExport()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(check12_bmpFrame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(liquidSurface16)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqGetSloInfo::setShaderNode(liquidSurface16)
            >6 liqTokenPointer:set(texname,5,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(texname,5,0,0)
            >6 liqTokenPointer:set(maptype,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(texname,5,0,0)
            >6 liqTokenPointer:set(maptype,0,0,0)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface16,maporigin,1)
              >7 liqTokenPointer:set(maporigin,1,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(texname,5,0,0)
            >6 liqTokenPointer:set(maptype,0,0,0)
            >6 liqTokenPointer:set(maporigin,1,0,0)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface16,xaxis,1)
              >7 liqTokenPointer:set(xaxis,1,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(texname,5,0,0)
            >6 liqTokenPointer:set(maptype,0,0,0)
            >6 liqTokenPointer:set(maporigin,1,0,0)
            >6 liqTokenPointer:set(xaxis,1,0,0)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface16,yaxis,1)
              >7 liqTokenPointer:set(yaxis,1,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface16,zaxis,1)
              >7 liqTokenPointer:set(zaxis,1,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(texname,5,0,0)
            >6 liqTokenPointer:set(maptype,0,0,0)
            >6 liqTokenPointer:set(maporigin,1,0,0)
            >6 liqTokenPointer:set(xaxis,1,0,0)
            >6 liqTokenPointer:set(yaxis,1,0,0)
            >6 liqTokenPointer:set(zaxis,1,0,0)
            >6 liqTokenPointer:set(s1,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(t1,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(s2,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(texname,5,0,0)
            >6 liqTokenPointer:set(maptype,0,0,0)
            >6 liqTokenPointer:set(maporigin,1,0,0)
            >6 liqTokenPointer:set(xaxis,1,0,0)
            >6 liqTokenPointer:set(yaxis,1,0,0)
            >6 liqTokenPointer:set(zaxis,1,0,0)
            >6 liqTokenPointer:set(s1,0,0,0)
            >6 liqTokenPointer:set(t1,0,0,0)
            >6 liqTokenPointer:set(s2,0,0,0)
            >6 liqTokenPointer:set(t2,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(s3,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(t3,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(s4,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(texname,5,0,0)
            >6 liqTokenPointer:set(maptype,0,0,0)
            >6 liqTokenPointer:set(maporigin,1,0,0)
            >6 liqTokenPointer:set(xaxis,1,0,0)
            >6 liqTokenPointer:set(yaxis,1,0,0)
            >6 liqTokenPointer:set(zaxis,1,0,0)
            >6 liqTokenPointer:set(s1,0,0,0)
            >6 liqTokenPointer:set(t1,0,0,0)
            >6 liqTokenPointer:set(s2,0,0,0)
            >6 liqTokenPointer:set(t2,0,0,0)
            >6 liqTokenPointer:set(s3,0,0,0)
            >6 liqTokenPointer:set(t3,0,0,0)
            >6 liqTokenPointer:set(s4,0,0,0)
            >6 liqTokenPointer:set(t4,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Ka,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Kd,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(Ks,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(roughness,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqShader::liqShaderParseVectorAttr(liquidSurface16,specularcolor,4)
              >7 liqTokenPointer:set(specularcolor,4,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(texname,5,0,0)
            >6 liqTokenPointer:set(maptype,0,0,0)
            >6 liqTokenPointer:set(maporigin,1,0,0)
            >6 liqTokenPointer:set(xaxis,1,0,0)
            >6 liqTokenPointer:set(yaxis,1,0,0)
            >6 liqTokenPointer:set(zaxis,1,0,0)
            >6 liqTokenPointer:set(s1,0,0,0)
            >6 liqTokenPointer:set(t1,0,0,0)
            >6 liqTokenPointer:set(s2,0,0,0)
            >6 liqTokenPointer:set(t2,0,0,0)
            >6 liqTokenPointer:set(s3,0,0,0)
            >6 liqTokenPointer:set(t3,0,0,0)
            >6 liqTokenPointer:set(s4,0,0,0)
            >6 liqTokenPointer:set(t4,0,0,0)
            >6 liqTokenPointer:set(Ka,0,0,0)
            >6 liqTokenPointer:set(Kd,0,0,0)
            >6 liqTokenPointer:set(Ks,0,0,0)
            >6 liqTokenPointer:set(roughness,0,0,0)
            >6 liqTokenPointer:set(specularcolor,4,0,0)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidSurface16)
              >7 liqShader::processExpression(texname,*light)
                >8 removeRedundentExtsion(E:/dev/Autodesk/maya/myplugin/project/liquid_/2.3.3/test/test_rm_texture/textures/check11.bmp.tex)
                >8 liqExpression::liqExpression([MakeTexture E:/dev/Autodesk/maya/myplugin/project/liquid_/2.3.3/test/test_rm_texture/textures/check11.bmp],)
                >8 liqExpression::CalcValue()
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,perspShape)
          >5 liqRibTranslator::generateFileName(3,perspShape)
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
            >6 liqRibClipPlaneData::insert(|pointLight2|pointLightShape2,lframe,0,3,1,matrix,,-1)
              >7 liqRibHT::hash(|pointLight2|pointLightShape2,1)
              >7 liqRibClipPlaneData::find(|pointLight2|pointLightShape2,|pointLight2|pointLightShape2,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight2|pointLightShape2,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight2,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight2,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight2,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight2|pointLightShape2,3)
                >8 liqRibObj::liqRibObj(|pointLight2|pointLightShape2,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight2|pointLightShape2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane2|pPlaneShape11,lframe,0,0,2,matrix,,-1)
              >7 liqRibHT::hash(|pPlane2|pPlaneShape11,2)
              >7 liqRibClipPlaneData::find(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane2|pPlaneShape11,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane2,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane2,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane2,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane2|pPlaneShape11,0)
                >8 liqRibNode::findShader(liquidSurface16SG)
                >8 liqRibNode::findDisp(liquidSurface16SG)
                >8 liqRibNode::findVolume(liquidSurface16SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane2|pPlaneShape11,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane2|pPlaneShape11)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,6,2)
                    >10 liqTokenPointer:set(st,0,6,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,6,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape11)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane7|pPlaneShape16,lframe,0,0,3,matrix,,-1)
              >7 liqRibHT::hash(|pPlane7|pPlaneShape16,3)
              >7 liqRibClipPlaneData::find(|pPlane7|pPlaneShape16,|pPlane7|pPlaneShape16,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane7|pPlaneShape16,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane7,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane7,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane7,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane7|pPlaneShape16,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane7|pPlaneShape16,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane7|pPlaneShape16)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape16)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane8|pPlaneShape17,lframe,0,0,4,matrix,,-1)
              >7 liqRibHT::hash(|pPlane8|pPlaneShape17,4)
              >7 liqRibClipPlaneData::find(|pPlane8|pPlaneShape17,|pPlane8|pPlaneShape17,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane8|pPlaneShape17,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane8,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane8,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane8,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane8|pPlaneShape17,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane8|pPlaneShape17,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane8|pPlaneShape17)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,4,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape17)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane9|pPlaneShape18,lframe,0,0,5,matrix,,-1)
              >7 liqRibHT::hash(|pPlane9|pPlaneShape18,5)
              >7 liqRibClipPlaneData::find(|pPlane9|pPlaneShape18,|pPlane9|pPlaneShape18,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane9|pPlaneShape18,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane9,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane9,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane9,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane9|pPlaneShape18,0)
                >8 liqRibNode::findShader(initialShadingGroup)
                >8 liqRibNode::findDisp(initialShadingGroup)
                >8 liqRibNode::findVolume(initialShadingGroup)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane9|pPlaneShape18,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane9|pPlaneShape18)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,6,2)
                    >10 liqTokenPointer:set(st,0,6,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,6,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape18)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pPlane10|pPlaneShape19,lframe,0,0,6,matrix,,-1)
              >7 liqRibHT::hash(|pPlane10|pPlaneShape19,6)
              >7 liqRibClipPlaneData::find(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pPlane10|pPlaneShape19,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pPlane10,[],2)
                >8 liqRibNode::parseVectorAttributes(pPlane10,[],3)
                >8 liqRibNode::parseVectorAttributes(pPlane10,[],4)
                >8 liqRibNode::findShadingGroup(|pPlane10|pPlaneShape19,0)
                >8 liqRibNode::findShader(lambert2SG)
                >8 liqRibNode::findDisp(lambert2SG)
                >8 liqRibNode::findVolume(lambert2SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pPlane10|pPlaneShape19,0)
                  >9 liqRibMeshData::liqRibMeshData(|pPlane10|pPlaneShape19)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,6,2)
                    >10 liqTokenPointer:set(st,0,6,2)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(P,1,4,0)
                    >10 liqTokenPointer:set(N,3,4,0)
                    >10 liqTokenPointer:set(st,0,6,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pPlaneShape19)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,7)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(768,576,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.33333,,&left,&right,&bottom,&top,&cam)
        >4 liqRibTranslatorNew::doTextures(size=0)
          >5 rm::Renderer::doTextures(txtList.size()=0)
        >4 liqRibTranslatorNew::doShadows(size=0)
          >5 rm::Renderer::doShadows(shadowList_.size()=0)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(perspShape)
        >4 Renderer::HeroPassBegin(perspShape)
        >4 tHeroRibWriterMgr::write(liqglo___,perspShape,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(perspShape)
            >6 Renderer::ribPrologue_begin(perspShape)
              >7 RiBegin_liq(E:/MyDocuments/maya/projects/default/rib/check12_bmp_perspShape.0001.rib(strlen=72)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime= 9:47:01.52),E:/MyDocuments/maya/projects/default/check12_bmp,admin,time)
            >6 Renderer::ribPrologue_options(perspShape)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(1,perspShape)
            >6 Renderer::framePrologue(1,perspShape)
              >7 tHeroRibWriterMgr::framePrologue_display(perspShape)
              >7 Renderer::framePrologue_camera(1,perspShape)
                >8 tRibCameraMgr::framePrologue_camera(1,job.title=perspShape)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(liquidSurface16SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape11,liquidSurface16SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(liquidSurface16)
                  >9 ConvertShadingNetwork::exportShaderBegin(liquidSurface16)
                  >9 liqShaderFactory::getShader(liquidSurface16)
                    >10 liqShader::liqShader(liquidSurface16)
                      >11 liqShaderFactory::getUniqueShaderHandler()
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqGetSloInfo::setShaderNode(liquidSurface16)
                      >11 liqTokenPointer:set(texname,5,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(texname,5,0,0)
                      >11 liqTokenPointer:set(maptype,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(texname,5,0,0)
                      >11 liqTokenPointer:set(maptype,0,0,0)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface16,maporigin,1)
                        >12 liqTokenPointer:set(maporigin,1,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(texname,5,0,0)
                      >11 liqTokenPointer:set(maptype,0,0,0)
                      >11 liqTokenPointer:set(maporigin,1,0,0)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface16,xaxis,1)
                        >12 liqTokenPointer:set(xaxis,1,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(texname,5,0,0)
                      >11 liqTokenPointer:set(maptype,0,0,0)
                      >11 liqTokenPointer:set(maporigin,1,0,0)
                      >11 liqTokenPointer:set(xaxis,1,0,0)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface16,yaxis,1)
                        >12 liqTokenPointer:set(yaxis,1,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface16,zaxis,1)
                        >12 liqTokenPointer:set(zaxis,1,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(texname,5,0,0)
                      >11 liqTokenPointer:set(maptype,0,0,0)
                      >11 liqTokenPointer:set(maporigin,1,0,0)
                      >11 liqTokenPointer:set(xaxis,1,0,0)
                      >11 liqTokenPointer:set(yaxis,1,0,0)
                      >11 liqTokenPointer:set(zaxis,1,0,0)
                      >11 liqTokenPointer:set(s1,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(t1,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(s2,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(texname,5,0,0)
                      >11 liqTokenPointer:set(maptype,0,0,0)
                      >11 liqTokenPointer:set(maporigin,1,0,0)
                      >11 liqTokenPointer:set(xaxis,1,0,0)
                      >11 liqTokenPointer:set(yaxis,1,0,0)
                      >11 liqTokenPointer:set(zaxis,1,0,0)
                      >11 liqTokenPointer:set(s1,0,0,0)
                      >11 liqTokenPointer:set(t1,0,0,0)
                      >11 liqTokenPointer:set(s2,0,0,0)
                      >11 liqTokenPointer:set(t2,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(s3,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(t3,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(s4,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(texname,5,0,0)
                      >11 liqTokenPointer:set(maptype,0,0,0)
                      >11 liqTokenPointer:set(maporigin,1,0,0)
                      >11 liqTokenPointer:set(xaxis,1,0,0)
                      >11 liqTokenPointer:set(yaxis,1,0,0)
                      >11 liqTokenPointer:set(zaxis,1,0,0)
                      >11 liqTokenPointer:set(s1,0,0,0)
                      >11 liqTokenPointer:set(t1,0,0,0)
                      >11 liqTokenPointer:set(s2,0,0,0)
                      >11 liqTokenPointer:set(t2,0,0,0)
                      >11 liqTokenPointer:set(s3,0,0,0)
                      >11 liqTokenPointer:set(t3,0,0,0)
                      >11 liqTokenPointer:set(s4,0,0,0)
                      >11 liqTokenPointer:set(t4,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Ka,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Kd,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(Ks,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(roughness,0,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqShader::liqShaderParseVectorAttr(liquidSurface16,specularcolor,4)
                        >12 liqTokenPointer:set(specularcolor,4,0,0)
                      >11 liqTokenPointer:set(,0,0,0)
                      >11 liqTokenPointer:set(texname,5,0,0)
                      >11 liqTokenPointer:set(maptype,0,0,0)
                      >11 liqTokenPointer:set(maporigin,1,0,0)
                      >11 liqTokenPointer:set(xaxis,1,0,0)
                      >11 liqTokenPointer:set(yaxis,1,0,0)
                      >11 liqTokenPointer:set(zaxis,1,0,0)
                      >11 liqTokenPointer:set(s1,0,0,0)
                      >11 liqTokenPointer:set(t1,0,0,0)
                      >11 liqTokenPointer:set(s2,0,0,0)
                      >11 liqTokenPointer:set(t2,0,0,0)
                      >11 liqTokenPointer:set(s3,0,0,0)
                      >11 liqTokenPointer:set(t3,0,0,0)
                      >11 liqTokenPointer:set(s4,0,0,0)
                      >11 liqTokenPointer:set(t4,0,0,0)
                      >11 liqTokenPointer:set(Ka,0,0,0)
                      >11 liqTokenPointer:set(Kd,0,0,0)
                      >11 liqTokenPointer:set(Ks,0,0,0)
                      >11 liqTokenPointer:set(roughness,0,0,0)
                      >11 liqTokenPointer:set(specularcolor,4,0,0)
                  >9 liqShader::write()
                    >10 liqShader::getName()
                    >10 Renderer::shader_UserDefinedShader(liquidSurface16)
                      >11 liqShader::getShaderFileName()
                      >11 liqShader::getName()
                      >11 Renderer::shader_surface(liquidSurface16, tokenPointerArray)
                        >12 liqShader::getShaderFileName()
                  >9 ConvertShadingNetwork::exportShaderEnd(liquidSurface16)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape11,liquidSurface16SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape11,liquidSurface16SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(liquidSurface16SG)
                >8 ConvertShadingNetwork::outputShadingGroup(liquidSurface16SG)
                  >9 Visitor::outputShadingGroup(liquidSurface16SG)
                    >10 Visitor::outputShadingGroup(liquidSurface16SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(liquidSurface16SG)
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape16,initialShadingGroup,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert1)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert1)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert1,pPlaneShape16,surfaceShader)
                    >10 Visitor::initShaderData(lambert1,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert1, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(file1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(file1)
                          >13 ShaderMgr::hasShaderType(file)
                        >12 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture1, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(file1)
                              >15 ShaderMgr::hasShaderType(file)
                    >10 Visitor::preOutput(lambert1)
                    >10 Visitor::outputBegin(lambert1), open shader file
                      >11 getShaderFilePath_SRC(lambert1)
                        >12 getShaderFilePath_NoExt(lambert1)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture1,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture1)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture1)
                              >15 getShaderName(place2dTexture1)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(place2dTexture1.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.coverage)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,coverage,place2dTexture1.coverage, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,2,place2dTexture1_coverage)
                            >14 getVariableName(place2dTexture1_coverage)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorU,place2dTexture1.mirrorU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,,place2dTexture1_mirrorU)
                            >14 getVariableName(place2dTexture1_mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.mirrorV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,mirrorV,place2dTexture1.mirrorV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,,place2dTexture1_mirrorV)
                            >14 getVariableName(place2dTexture1_mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.noiseUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,noiseUV,place2dTexture1.noiseUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,2,place2dTexture1_noiseUV)
                            >14 getVariableName(place2dTexture1_noiseUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.offset)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,offset,place2dTexture1.offset, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,2,place2dTexture1_offset)
                            >14 getVariableName(place2dTexture1_offset)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.repeatUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,repeatUV,place2dTexture1.repeatUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,2,place2dTexture1_repeatUV)
                            >14 getVariableName(place2dTexture1_repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateFrame,place2dTexture1.rotateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,,place2dTexture1_rotateFrame)
                            >14 getVariableName(place2dTexture1_rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.rotateUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,rotateUV,place2dTexture1.rotateUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,,place2dTexture1_rotateUV)
                            >14 getVariableName(place2dTexture1_rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.stagger)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,stagger,place2dTexture1.stagger, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,,place2dTexture1_stagger)
                            >14 getVariableName(place2dTexture1_stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.translateFrame)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,translateFrame,place2dTexture1.translateFrame, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,2,place2dTexture1_translateFrame)
                            >14 getVariableName(place2dTexture1_translateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapU)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapU,place2dTexture1.wrapU, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,,place2dTexture1_wrapU)
                            >14 getVariableName(place2dTexture1_wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.wrapV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,wrapV,place2dTexture1.wrapV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,,place2dTexture1_wrapV)
                            >14 getVariableName(place2dTexture1_wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture1.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture1,outUV,place2dTexture1.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,2,place2dTexture1_outUV)
                            >14 getVariableName(place2dTexture1_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture1,[],[place2dTexture1_coverage, place2dTexture1_mirrorU, place2dTexture1_mirrorV, place2dTexture1_noiseUV, place2dTexture1_offset, place2dTexture1_repeatUV, place2dTexture1_rotateFrame, place2dTexture1_rotateUV, place2dTexture1_stagger, place2dTexture1_translateFrame, place2dTexture1_wrapU, place2dTexture1_wrapV, place2dTexture1_outUV])
                        >12 getVariableName(place2dTexture1_coverage)
                        >12 getVariableName(place2dTexture1_mirrorU)
                        >12 getVariableName(place2dTexture1_mirrorV)
                        >12 getVariableName(place2dTexture1_noiseUV)
                        >12 getVariableName(place2dTexture1_offset)
                        >12 getVariableName(place2dTexture1_repeatUV)
                        >12 getVariableName(place2dTexture1_rotateFrame)
                        >12 getVariableName(place2dTexture1_rotateUV)
                        >12 getVariableName(place2dTexture1_stagger)
                        >12 getVariableName(place2dTexture1_translateFrame)
                        >12 getVariableName(place2dTexture1_wrapU)
                        >12 getVariableName(place2dTexture1_wrapV)
                        >12 getVariableName(place2dTexture1_outUV)
                        >12 getShaderName(place2dTexture1)
                      >11 Visitor::outputUpstreamShader(file1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(file1,file)
                          >13 Visitor::visitFile(file1)
                            >14 OutputHelper::addInclude(file.h)
                            >14 OutputHelper::beginRSL(file1)
                              >15 getShaderName(file1)
                            >14 ShaderMgr::convertibleConnection(file1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(file1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(file1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(file1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                            >14 ShaderMgr::convertibleConnection(file1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(file1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(file1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(file1.filterType)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                            >14 ShaderMgr::convertibleConnection(file1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                            >14 ShaderMgr::convertibleConnection(file1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(file1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                            >14 ShaderMgr::convertibleConnection(file1.fileHasAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(file1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(file1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(file)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(file1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(file1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileTextureName)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileTextureName)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterType)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterType)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(file1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture1)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.fileHasAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.fileHasAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert1)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(file1,outColor,file1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,file1_outColor)
                            >14 getVariableName(file1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(file1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(file1.outTransparency)
                      >11 Visitor::addShaderMethodBody(file1,[place2dTexture1_outUV],[file1_outColor])
                        >12 getVariableName(place2dTexture1_outUV)
                        >12 getVariableName(file1_outColor)
                        >12 getShaderName(file1)
                      >11 Visitor::outputUpstreamShader(lambert1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert1,lambert)
                          >13 Visitor::visitLambert(lambert1)
                            >14 OutputHelper::beginRSL(lambert1)
                              >15 getShaderName(lambert1)
                            >14 ShaderMgr::convertibleConnection(lambert1.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(file1)
                                  >17 ShaderMgr::hasShaderType(file)
                            >14 ShaderMgr::convertibleConnection(lambert1.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert1.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert1.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert1.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                                >16 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert1.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert1.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(file1)
                            >14 ShaderMgr::hasShaderType(file)
                          >13 ShaderMgr::getValidConnectionRef(file)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialParticleSE)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                          >13 ConvertShadingNetwork::nodeIsConvertible(initialShadingGroup)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert1.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert1.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert1,[file1_outColor],[])
                        >12 getVariableName(file1_outColor)
                        >12 getShaderName(lambert1)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                        >12 getShaderName(lambert1)
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert1)
                        >12 getShaderFilePath_NoExt(lambert1)
                      >11 getShaderFilePath_SRC(lambert1)
                        >12 getShaderFilePath_NoExt(lambert1)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert1)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape16,initialShadingGroup,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape16,initialShadingGroup,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(initialShadingGroup)
                >8 ConvertShadingNetwork::outputShadingGroup(initialShadingGroup)
                  >9 Visitor::outputShadingGroup(initialShadingGroup)
                    >10 Visitor::outputShadingGroup(initialShadingGroup,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(initialShadingGroup)
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 ConvertShadingNetwork::canShadingGroupExported(initialShadingGroup)
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert2SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape19,lambert2SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert2)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert2)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert2,pPlaneShape19,surfaceShader)
                    >10 Visitor::initShaderData(lambert2,surfaceShader)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert2, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(checker1)
                          >13 ShaderMgr::hasShaderType(checker)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(checker1, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(checker1)
                          >13 ShaderMgr::hasShaderType(checker)
                        >12 ShaderMgr::getValidConnectionRef(checker)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.contrast)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.contrast)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorB)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture2, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(checker1)
                              >15 ShaderMgr::hasShaderType(checker)
                    >10 Visitor::preOutput(lambert2)
                    >10 Visitor::outputBegin(lambert2), open shader file
                      >11 getShaderFilePath_SRC(lambert2)
                        >12 getShaderFilePath_NoExt(lambert2)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections)
                      >11 Visitor::outputUpstreamShader(place2dTexture2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture2,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture2)
                            >14 OutputHelper::addInclude(place2dTexture.h)
                            >14 OutputHelper::beginRSL(place2dTexture2)
                              >15 getShaderName(place2dTexture2)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.coverage)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.mirrorV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.noiseUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.offset)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.rotateUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.stagger)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.translateFrame)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapU)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.wrapV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture2.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                  >17 ShaderMgr::hasShaderType(checker)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.coverage)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.coverage)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.noiseUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.noiseUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.offset)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.offset)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.translateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.translateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture2.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(checker1)
                            >14 ShaderMgr::hasShaderType(checker)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture2,outUV,place2dTexture2.outUV, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,2,place2dTexture2_outUV)
                            >14 getVariableName(place2dTexture2_outUV)
                      >11 Visitor::addShaderMethodBody(place2dTexture2,[],[place2dTexture2_outUV])
                        >12 getVariableName(place2dTexture2_outUV)
                        >12 getShaderName(place2dTexture2)
                      >11 Visitor::outputUpstreamShader(checker1)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(checker1,checker)
                          >13 Visitor::visitChecker(checker1)
                            >14 OutputHelper::addInclude(checker.h)
                            >14 OutputHelper::beginRSL(checker1)
                              >15 getShaderName(checker1)
                            >14 ShaderMgr::convertibleConnection(checker1.alphaGain)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.alphaGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.alphaGain)
                            >14 ShaderMgr::convertibleConnection(checker1.alphaIsLuminance)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.alphaIsLuminance)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.alphaIsLuminance)
                            >14 ShaderMgr::convertibleConnection(checker1.alphaOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.alphaOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.alphaOffset)
                            >14 ShaderMgr::convertibleConnection(checker1.color1)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.color1)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.color1)
                            >14 ShaderMgr::convertibleConnection(checker1.color2)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.color2)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.color2)
                            >14 ShaderMgr::convertibleConnection(checker1.colorGain)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.colorGain)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.colorGain)
                            >14 ShaderMgr::convertibleConnection(checker1.colorOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.colorOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffset)
                            >14 ShaderMgr::convertibleConnection(checker1.contrast)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.contrast)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.contrast)
                            >14 ShaderMgr::convertibleConnection(checker1.defaultColor)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.defaultColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColor)
                            >14 ShaderMgr::convertibleConnection(checker1.filter)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.filter)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.filter)
                            >14 ShaderMgr::convertibleConnection(checker1.filterOffset)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.filterOffset)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.filterOffset)
                            >14 ShaderMgr::convertibleConnection(checker1.invert)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.invert)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.invert)
                            >14 ShaderMgr::convertibleConnection(checker1.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(checker1.outAlpha)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.outAlpha)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.outAlpha)
                            >14 ShaderMgr::convertibleConnection(checker1.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(checker1.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker1.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(checker)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(checker1, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(checker1, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color1B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color1B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.color2B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.color2B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.contrast)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.contrast)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(checker1.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture2)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(checker1,outColor,checker1.outColor, outputVars)
                          >13 Visitor::addShaderMethodVariavles(&shaderMethodVariavles,3,checker1_outColor)
                            >14 getVariableName(checker1_outColor)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker1.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker1.outColorB)
                      >11 Visitor::addShaderMethodBody(checker1,[place2dTexture2_outUV],[checker1_outColor])
                        >12 getVariableName(place2dTexture2_outUV)
                        >12 getVariableName(checker1_outColor)
                        >12 getShaderName(checker1)
                      >11 Visitor::outputUpstreamShader(lambert2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert2,lambert)
                          >13 Visitor::visitLambert(lambert2)
                            >14 OutputHelper::beginRSL(lambert2)
                              >15 getShaderName(lambert2)
                            >14 ShaderMgr::convertibleConnection(lambert2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(checker1)
                                  >17 ShaderMgr::hasShaderType(checker)
                            >14 ShaderMgr::convertibleConnection(lambert2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert2, validConnections, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(checker1)
                            >14 ShaderMgr::hasShaderType(checker)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert2.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(checker1)
                            >14 ShaderMgr::hasShaderType(checker)
                          >13 ShaderMgr::getValidConnectionRef(checker)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                      >11 Visitor::addShaderMethodBody(lambert2,[checker1_outColor],[])
                        >12 getVariableName(checker1_outColor)
                        >12 getShaderName(lambert2)
                    >10 ConvertShadingNetwork::outputShaderMethod()
                      >11 Visitor::outputShaderMethod()
                        >12 getShaderName(lambert2)
                    >10 Visitor::outputEnd(), close shader file
                    >10 Visitor::postOutput()
                      >11 getShaderFilePath_SLO(lambert2)
                        >12 getShaderFilePath_NoExt(lambert2)
                      >11 getShaderFilePath_SRC(lambert2)
                        >12 getShaderFilePath_NoExt(lambert2)
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert2)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape19,lambert2SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pPlaneShape19,lambert2SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert2SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert2SG)
                  >9 Visitor::outputShadingGroup(lambert2SG)
                    >10 Visitor::outputShadingGroup(lambert2SG,0)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert2SG)
              >7  ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(perspShape)
            >6 Renderer::worldPrologue(perspShape)
          >5 liqRibTranslatorNew::lightBlock__(perspShape)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,perspShape)
            >6 Renderer::writeLight_pre(|pointLight2|pointLightShape2,perspShape)
            >6 liqRibObj::writeObject(,perspShape,0)
              >7 liqRibLightData::write(,job=perspShape,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=perspShape)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape2,...)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight2|pointLightShape2,perspShape)
          >5 liqRibTranslatorNew::coordSysBlock__(perspShape)
          >5 liqRibTranslatorNew::objectBlock__(perspShape)
            >6 liqRibTranslatorNew::objectBlock_data(perspShape)
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane2|pPlaneShape11,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane2|pPlaneShape11,perspShape)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape11,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape11,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane7|pPlaneShape16,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane7|pPlaneShape16,perspShape)
                  >9 Renderer::_writeObject(|pPlane7|pPlaneShape16,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane7_pPlaneShape16.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane7_pPlaneShape16.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane7|pPlaneShape16,E:/MyDocuments/maya/projects/default/rib/_pPlane7_pPlaneShape16.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane8|pPlaneShape17,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane8|pPlaneShape17,perspShape)
                  >9 Renderer::_writeObject(|pPlane8|pPlaneShape17,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane8_pPlaneShape17.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane8_pPlaneShape17.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane8|pPlaneShape17,E:/MyDocuments/maya/projects/default/rib/_pPlane8_pPlaneShape17.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane9|pPlaneShape18,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane9|pPlaneShape18,perspShape)
                  >9 Renderer::_writeObject(|pPlane9|pPlaneShape18,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane9_pPlaneShape18.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane9_pPlaneShape18.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane9|pPlaneShape18,E:/MyDocuments/maya/projects/default/rib/_pPlane9_pPlaneShape18.1.rib,perspShape,ref=0)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pPlane10|pPlaneShape19,perspShape)
                >8 Renderer::exportOneObject_data(|pPlane10|pPlaneShape19,perspShape)
                  >9 Renderer::_writeObject(|pPlane10|pPlaneShape19,perspShape,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane10_pPlaneShape19.1.rib,perspShape,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane10_pPlaneShape19.1.rib,job=perspShape,0)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane10|pPlaneShape19,E:/MyDocuments/maya/projects/default/rib/_pPlane10_pPlaneShape19.1.rib,perspShape,ref=0)
            >6 liqRibTranslatorNew::objectBlock_reference(perspShape)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane2|pPlaneShape11,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane2|pPlaneShape11,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane2|pPlaneShape11,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane2|pPlaneShape11)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane2|pPlaneShape11,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane2|pPlaneShape11,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pPlane2|pPlaneShape11)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pPlane2|pPlaneShape11)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane2|pPlaneShape11,v=0,s=1,c=0,,|pPlane2|pPlaneShape11,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_RegularShader(|pPlane2|pPlaneShape11,perspShape)
                    >10 liqShaderFactory::getShader(liquidSurface16)
                    >10 liqShader::getName()
                    >10 liqRibTranslatorNew::F1(|pPlane2|pPlaneShape11,liquidSurface16)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane2|pPlaneShape11)
                  >9 Visitor::outputShadingGroup(liquidSurface16SG,1)
                    >10 _outputShadingGroup(liquidSurface16SG)
                      >11 liqShaderFactory::getShader(liquidSurface16)
                      >11 liqShader::write()
                        >12 liqShader::getName()
                        >12 Renderer::shader_UserDefinedShader(liquidSurface16)
                          >13 liqShader::getShaderFileName()
                          >13 liqShader::getName()
                          >13 Renderer::shader_surface(liquidSurface16, tokenPointerArray)
                            >14 liqShader::getShaderFileName()
                >8 Renderer::exportOneObject_reference(|pPlane2|pPlaneShape11,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pPlane2|pPlaneShape11,|pPlane2|pPlaneShape11,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane2|pPlaneShape11,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane2|pPlaneShape11,E:/MyDocuments/maya/projects/default/rib/_pPlane2_pPlaneShape11.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pPlane2|pPlaneShape11,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane2|pPlaneShape11,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane7|pPlaneShape16,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane7|pPlaneShape16,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane7|pPlaneShape16,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane7|pPlaneShape16)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane7|pPlaneShape16,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane7|pPlaneShape16,|pPlane7|pPlaneShape16,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane7|pPlaneShape16,|pPlane7|pPlaneShape16,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane7|pPlaneShape16,|pPlane7|pPlaneShape16,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane7|pPlaneShape16,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pPlane7|pPlaneShape16)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pPlane7|pPlaneShape16)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane7|pPlaneShape16,v=0,s=0,c=0,,|pPlane7|pPlaneShape16,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane7|pPlaneShape16,|pPlane7|pPlaneShape16,0)
                    >10 liqRibTranslatorNew::F2(0,|pPlane7|pPlaneShape16)
                    >10 liqRibNode::findShader(initialShadingGroup)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane7|pPlaneShape16)
                  >9 Visitor::outputShadingGroup(initialShadingGroup,1)
                    >10 _outputShadingGroup(initialShadingGroup)
                      >11 getShaderFilePath_NoExt(lambert1)
                >8 Renderer::exportOneObject_reference(|pPlane7|pPlaneShape16,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pPlane7|pPlaneShape16,|pPlane7|pPlaneShape16,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane7|pPlaneShape16,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane7_pPlaneShape16.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane7_pPlaneShape16.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane7|pPlaneShape16,E:/MyDocuments/maya/projects/default/rib/_pPlane7_pPlaneShape16.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pPlane7|pPlaneShape16,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane7|pPlaneShape16,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane8|pPlaneShape17,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane8|pPlaneShape17,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane8|pPlaneShape17,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane8|pPlaneShape17)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane8|pPlaneShape17,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane8|pPlaneShape17,|pPlane8|pPlaneShape17,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane8|pPlaneShape17,|pPlane8|pPlaneShape17,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane8|pPlaneShape17,|pPlane8|pPlaneShape17,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane8|pPlaneShape17,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pPlane8|pPlaneShape17)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pPlane8|pPlaneShape17)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane8|pPlaneShape17,v=0,s=0,c=0,,|pPlane8|pPlaneShape17,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane8|pPlaneShape17,|pPlane8|pPlaneShape17,0)
                    >10 liqRibTranslatorNew::F2(0,|pPlane8|pPlaneShape17)
                    >10 liqRibNode::findShader(initialShadingGroup)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane8|pPlaneShape17)
                  >9 Visitor::outputShadingGroup(initialShadingGroup,1)
                    >10 _outputShadingGroup(initialShadingGroup)
                      >11 getShaderFilePath_NoExt(lambert1)
                >8 Renderer::exportOneObject_reference(|pPlane8|pPlaneShape17,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pPlane8|pPlaneShape17,|pPlane8|pPlaneShape17,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane8|pPlaneShape17,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane8_pPlaneShape17.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane8_pPlaneShape17.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane8|pPlaneShape17,E:/MyDocuments/maya/projects/default/rib/_pPlane8_pPlaneShape17.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pPlane8|pPlaneShape17,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane8|pPlaneShape17,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane9|pPlaneShape18,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane9|pPlaneShape18,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane9|pPlaneShape18,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane9|pPlaneShape18)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane9|pPlaneShape18,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane9|pPlaneShape18,|pPlane9|pPlaneShape18,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane9|pPlaneShape18,|pPlane9|pPlaneShape18,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane9|pPlaneShape18,|pPlane9|pPlaneShape18,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane9|pPlaneShape18,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pPlane9|pPlaneShape18)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pPlane9|pPlaneShape18)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane9|pPlaneShape18,v=0,s=0,c=0,,|pPlane9|pPlaneShape18,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane9|pPlaneShape18,|pPlane9|pPlaneShape18,0)
                    >10 liqRibTranslatorNew::F2(0,|pPlane9|pPlaneShape18)
                    >10 liqRibNode::findShader(initialShadingGroup)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane9|pPlaneShape18)
                  >9 Visitor::outputShadingGroup(initialShadingGroup,1)
                    >10 _outputShadingGroup(initialShadingGroup)
                      >11 getShaderFilePath_NoExt(lambert1)
                >8 Renderer::exportOneObject_reference(|pPlane9|pPlaneShape18,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pPlane9|pPlaneShape18,|pPlane9|pPlaneShape18,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane9|pPlaneShape18,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane9_pPlaneShape18.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane9_pPlaneShape18.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane9|pPlaneShape18,E:/MyDocuments/maya/projects/default/rib/_pPlane9_pPlaneShape18.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pPlane9|pPlaneShape18,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane9|pPlaneShape18,perspShape)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pPlane10|pPlaneShape19,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pPlane10|pPlaneShape19,perspShape)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pPlane10|pPlaneShape19,perspShape)
                >8 liqRibTranslatorNew::tRiIlluminate(perspShape,|pPlane10|pPlaneShape19)
                  >9 Renderer::exportLightLinks(perspShape,|pPlane10|pPlaneShape19,lightedByWhichLightShapes.size=2)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pPlane10|pPlaneShape19,perspShape)
                  >9 liqRibTranslatorNew::displacementBounds(|pPlane10|pPlaneShape19)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pPlane10|pPlaneShape19)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pPlane10|pPlaneShape19,v=0,s=0,c=0,,|pPlane10|pPlaneShape19,perspShape)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,0)
                    >10 liqRibTranslatorNew::F2(0,|pPlane10|pPlaneShape19)
                    >10 liqRibNode::findShader(lambert2SG)
                >8 Renderer::oneObjectBlock_reference_attribute_block3_ShadingGroup(|pPlane10|pPlaneShape19)
                  >9 Visitor::outputShadingGroup(lambert2SG,1)
                    >10 _outputShadingGroup(lambert2SG)
                      >11 getShaderFilePath_NoExt(lambert2)
                >8 Renderer::exportOneObject_reference(|pPlane10|pPlaneShape19,perspShape)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pPlane10|pPlaneShape19,|pPlane10|pPlaneShape19,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pPlane10|pPlaneShape19,perspShape,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pPlane10_pPlaneShape19.1.rib,perspShape,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pPlane10_pPlaneShape19.1.rib,job=perspShape,1)
                        >12 liqRibData::getFullPathName()
                        >12 Renderer::write(|pPlane10|pPlaneShape19,E:/MyDocuments/maya/projects/default/rib/_pPlane10_pPlaneShape19.1.rib,perspShape,ref=1)
                          >13 liqRibData::getFullPathName()
                          >13 _write(|pPlane10|pPlaneShape19,perspShape)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pPlane10|pPlaneShape19,perspShape)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(perspShape)
            >6 Renderer::ribPrologue_end(perspShape)
        >4 Renderer::HeroPassEnd(perspShape)
          >5 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/check12_bmp_perspShape.0001.rib)
            >6 liqProcessLauncher::_execute(prman,   "E:/MyDocuments/maya/projects/default/rib/check12_bmp_perspShape.0001.rib","E:/MyDocuments/maya/projects/default/", wait=0)
      >3 liqRenderScript::addJob(job.title=check12_bmpFrame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 RendererMgr::epilogue()
    >2 Renderer::closeLog()(but do nothing now)
  >1 RendererMgr::uninstall()
  >1 RendererMgr::deleteFactory()
