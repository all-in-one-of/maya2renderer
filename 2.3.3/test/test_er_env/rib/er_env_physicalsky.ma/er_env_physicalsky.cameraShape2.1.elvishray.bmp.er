//------------------------------------------------
char *null_token = NULL;
eiInt defaultInt = 0;
//------------------------------------------------

ei_context();
ei_verbose(6);
ei_link("eiIMG");
ei_link("eiSHADER");
ei_link("eiSHADER_maya");
//----------------shader_for_test begin---
ei_shader("maya_surfaceShader", "liquid_shader_for_test");
ei_shader_param_vector("o_outColor",1,0,0);
ei_end_shader();
ei_material("liquid_material_for_test");
ei_surface_shader("liquid_shader_for_test");
ei_end_material();
//----------------shader_for_test end ---
//    Generated by Liquid v2.3.5
//    Scene : R:/MyDocuments/maya/projects/default/er_env_physicalsky
//    User  : yaoyansi

//############################### option #
ei_options("cameraShape2_option");
ei_contrast(0.05);
ei_samples(0,2);
ei_filter(4,3);
//transform motion=0, deform motion=0
ei_motion(0);
ei_trace_depth(-233169517,-233169517,-233169517,-233169517,-233169517,-233169517);
ei_displace(0);
ei_face(3);
ei_end_options();
// shader(plastic,...)
ei_shader("plastic", "liquidSurface1");
ei_shader_param_vector("Cs",1,0,0);
ei_shader_param_vector("Kd",1,1,1);
ei_shader_param_scalar("Ks",0.5);
ei_shader_param_scalar("roughness",0.1);
ei_shader_param_vector("specularcolor",1,1,1);
ei_end_shader();
ei_material("liquidSurface1SG");
ei_surface_shader("liquidSurface1");
ei_end_material();

//worldPrologue

// Renderer::exportLight("_pointLight1_pointLightShape1");

// Renderer::exportPointLight()
ei_shader("pointlight", "|pointLight1|pointLightShape1_shader");
ei_shader_param_vector("lightcolor",0.973,0.993407,1);
ei_shader_param_scalar("intensity",0.5);
ei_end_shader();
ei_light("|pointLight1|pointLightShape1_object");
ei_light_shader("|pointLight1|pointLightShape1_shader");
ei_origin(0,0,0);
ei_end_light();
ei_instance("|pointLight1|pointLightShape1");
ei_element("|pointLight1|pointLightShape1_object");
ei_transform(1,0,0,0,   0,1,0,0,   0,0,1,0,   -1.20094,6.45314,-1.42311,1);
ei_declare("|pCube2_lightgroup", EI_CONSTANT, EI_TYPE_INT, &defaultInt);
ei_end_instance();

// maya settings: focal=35.000000, aperture = 32.000000, aspect=1.333333
//Depth of Field on camera "|camera2|cameraShape2" is turned off in Maya
// shader(maya_physicalsky,...)
ei_shader("maya_physicalsky", "liquidSurface5");
ei_shader_param_vector("sun_dir",0.577,0.577,0.577);
ei_shader_param_scalar("sun_disk_size",2);
ei_shader_param_scalar("sun_disk_intensity",7);
ei_shader_param_scalar("sun_glow_size",1);
ei_shader_param_scalar("sun_glow_intensity",1);
ei_shader_param_scalar("sun_glow_falloff",5);
ei_shader_param_vector("ground_color",0.2,0.2,0.2);
ei_shader_param_scalar("ground_blur",0.01);
ei_shader_param_int("type",0);
ei_shader_param_scalar("haze",5);
ei_shader_param_vector("zenith_color",0.109,0.109,0.109);
ei_shader_param_scalar("a",-1);
ei_shader_param_scalar("b",-0.32);
ei_shader_param_scalar("c",10);
ei_shader_param_scalar("d",-3);
ei_shader_param_scalar("e",0.45);
ei_shader_param_scalar("intensity",0.5);
ei_end_shader();

//############################### camera #
ei_camera("|camera1|cameraShape1");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/er_env_physicalsky.cameraShape2.1.elvishray.bmp","it",1);
//mode=rgba
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(400,300);
ei_clip(0.01,10000);
ei_environment_shader("liquidSurface5");
ei_end_camera();

// Renderer::exportOneGeometry_Mesh(|pCube2|pCubeShape2, 0, 0

//############################### mesh #
//shape full path name=|pCube2|pCubeShape2
//### UV(map1), size=14
//# numUVSets=1
//# uvsetNames[0]=map1
//# uvsetFamilyNames[0]=map1
ei_object( "poly", "|pCube2|pCubeShape2" );
{
eiTag tag;
//vertex positions(required), size=36
tag = ei_tab(EI_TYPE_VECTOR, 1, 1024);
ei_pos_list( tag );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, 0.500000 );
ei_tab_add_vector( 0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( 0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, -0.500000 );
ei_tab_add_vector( -0.500000, -0.500000, 0.500000 );
ei_tab_add_vector( -0.500000, 0.500000, 0.500000 );
ei_end_tab();
//### N ###(optional)
//### N ### end
//### UV (optional)
tag = eiNULL_TAG;
ei_declare("uv", EI_VARYING, EI_TYPE_TAG, &tag);
tag = ei_tab(EI_TYPE_VECTOR2, 1, 1024);
ei_variable("uv", &tag);
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.500000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 0.750000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.375000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.750000 );
ei_tab_add_vector2( 0.625000, 1.000000 );
ei_tab_add_vector2( 0.625000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.625000, 0.250000 );
ei_tab_add_vector2( 0.875000, 0.000000 );
ei_tab_add_vector2( 0.875000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.125000, 0.250000 );
ei_tab_add_vector2( 0.375000, 0.000000 );
ei_tab_add_vector2( 0.375000, 0.250000 );
ei_end_tab();
//### triangles(required) size=36
tag = ei_tab(EI_TYPE_INDEX, 1, 1024);
ei_triangle_list( tag );
ei_tab_add_index(0);
ei_tab_add_index(1);
ei_tab_add_index(2);
ei_tab_add_index(3);
ei_tab_add_index(4);
ei_tab_add_index(5);
ei_tab_add_index(6);
ei_tab_add_index(7);
ei_tab_add_index(8);
ei_tab_add_index(9);
ei_tab_add_index(10);
ei_tab_add_index(11);
ei_tab_add_index(12);
ei_tab_add_index(13);
ei_tab_add_index(14);
ei_tab_add_index(15);
ei_tab_add_index(16);
ei_tab_add_index(17);
ei_tab_add_index(18);
ei_tab_add_index(19);
ei_tab_add_index(20);
ei_tab_add_index(21);
ei_tab_add_index(22);
ei_tab_add_index(23);
ei_tab_add_index(24);
ei_tab_add_index(25);
ei_tab_add_index(26);
ei_tab_add_index(27);
ei_tab_add_index(28);
ei_tab_add_index(29);
ei_tab_add_index(30);
ei_tab_add_index(31);
ei_tab_add_index(32);
ei_tab_add_index(33);
ei_tab_add_index(34);
ei_tab_add_index(35);
ei_end_tab();
}//|pCube2|pCubeShape2
ei_end_object();

// maya settings: focal=35.000000, aperture = 32.000000, aspect=1.333333
//Depth of Field on camera "|camera2|cameraShape2" is turned off in Maya
// shader(maya_physicalsky,...)
ei_shader("maya_physicalsky", "liquidSurface5");
ei_shader_param_vector("sun_dir",0.577,0.577,0.577);
ei_shader_param_scalar("sun_disk_size",2);
ei_shader_param_scalar("sun_disk_intensity",7);
ei_shader_param_scalar("sun_glow_size",1);
ei_shader_param_scalar("sun_glow_intensity",1);
ei_shader_param_scalar("sun_glow_falloff",5);
ei_shader_param_vector("ground_color",0.2,0.2,0.2);
ei_shader_param_scalar("ground_blur",0.01);
ei_shader_param_int("type",0);
ei_shader_param_scalar("haze",5);
ei_shader_param_vector("zenith_color",0.109,0.109,0.109);
ei_shader_param_scalar("a",-1);
ei_shader_param_scalar("b",-0.32);
ei_shader_param_scalar("c",10);
ei_shader_param_scalar("d",-3);
ei_shader_param_scalar("e",0.45);
ei_shader_param_scalar("intensity",0.5);
ei_end_shader();

//############################### camera #
ei_camera("|camera2|cameraShape2");
//beauty channel
ei_output("R:/MyDocuments/maya/projects/default/rmanpix/er_env_physicalsky.cameraShape2.1.elvishray.bmp","it",1);
//mode=rgba
ei_output_variable("color",11);
ei_end_output();
// AOV
// AOV end
ei_focal(35);
ei_aperture(32);
ei_aspect(1.33333);
ei_resolution(400,300);
ei_clip(0.01,10000);
ei_environment_shader("liquidSurface5");
ei_end_camera();
//|camera1|cameraShape1 is not lighted.
//--------------------------
//ribNode->name=|camera1|cameraShape1
//ribNode's transform node=|camera1
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera1|cameraShape1
ei_instance("|camera1");
//|camera1|cameraShape1's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera1|cameraShape1
//shape full path name=|camera1|cameraShape1
ei_element("|camera1|cameraShape1");
ei_transform(0.999976,0,0.00698126,0,   0.000256937,0.999323,-0.0368028,0,   -0.00697653,0.0368037,0.999298,0,   -0.890424,2.91951,-2.27103,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera1_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//--------------------------
//ribNode->name=|pCube2|pCubeShape2
//ribNode's transform node=|pCube2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|pCube2|pCubeShape2
ei_instance("|pCube2");
//|pCube2|pCubeShape2 has many shading groups. liquid only support one martial per mesh, so I use the 1st material
//materials are: liquidSurface1SG,
ei_mtl("liquidSurface1SG");
//shape name=|pCube2|pCubeShape2
//shape full path name=|pCube2|pCubeShape2
ei_element("|pCube2|pCubeShape2");
ei_transform(8.39692,1.03596,-9.72813,0,   0.00768363,0.502626,0.0601574,0,   9.78117,-1.1454,8.32073,0,   -1.13433,3.64817,-13.7913,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|pCube2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//|camera2|cameraShape2 is not lighted.
//--------------------------
//ribNode->name=|camera2|cameraShape2
//ribNode's transform node=|camera2
//ribNode->object(0)->getDataPtr()->getFullPathName()=|camera2|cameraShape2
ei_instance("|camera2");
//|camera2|cameraShape2's shading group is empty, use "liquid_material_for_test" to avoid crash
ei_mtl("liquid_material_for_test");
//shape name=|camera2|cameraShape2
//shape full path name=|camera2|cameraShape2
ei_element("|camera2|cameraShape2");
ei_transform(0.968631,0,-0.248505,0,   0,1,0,0,   0.248505,0,0.968631,0,   2.15425,4.40217,0,1);
//bMotionBlur=0, bGeometryMotion=0
ei_motion(0);
{//light group(light-link group)
const char *null_token = NULL;
ei_declare("lightgroup", EI_CONSTANT, EI_TYPE_TOKEN, &null_token);
const char *lightgroup_token = ei_token("|camera2_lightgroup");
ei_variable("lightgroup", &lightgroup_token );
}
ei_end_instance();

//Renderer::worldEpilogue()
ei_instgroup("cameraShape2");
//camera
ei_add_instance("|camera1");
ei_add_instance("|camera2");
//light(s)
ei_add_instance("|pointLight1|pointLightShape1");
//mesh(s)
ei_add_instance("|pCube2");
ei_end_instgroup();
//ei_connection(con);
//ei_render( "cameraShape2", "|camera2", "cameraShape2_option" );
ei_render( "cameraShape2", "|camera2", "cameraShape2_option" );
ei_end_context();
//------------------------------------------------

