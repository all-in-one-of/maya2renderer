>0 liqRibTranslator::doIt()-->if(checkSettings()==true)
  >1 Renderer::openLog()
  >1 liqRibTranslatorNew::_doItNew(args,defaultRenderLayer)
    >2 liqRibTranslatorNew::_doItNewWithoutRenderScript(arg,defaultRenderLayer)
      >3 liqRibTranslator::verifyOutputDirectories()
      >3 liqRibTranslator::generateRenderScriptName()
      >3 liqRibTranslator::generateTempMayaSceneName()
      >3 tFrameScriptJobMgr::setCommonParameters(rm_dof2Frame0)
      >3 liqRibTranslatorNew::processOneFrame(0, liqglo__)
        >4 liqShaderFactory::clearShaders()
        >4 liqRibTranslatorNew::buildJobs__()
          >5 liqShader::liqShader(liquidSurface3)
            >6 liqShaderFactory::getUniqueShaderHandler()
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqGetSloInfo::setShaderNode(liquidSurface3)
            >6 liqTokenPointer:set(fstop,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(fstop,0,0,0)
            >6 liqTokenPointer:set(fplane,0,0,0)
            >6 liqTokenPointer:set(,0,0,0)
            >6 liqTokenPointer:set(fstop,0,0,0)
            >6 liqTokenPointer:set(fplane,0,0,0)
          >5 liqShader::buildJobs()
            >6 liqShader::scanExpressions(liquidSurface3)
          >5 liqRibTranslatorNew::buildShadowJobs__()
            >6 tJobScriptMgr::buildShadowJob(thisJob___, 0)
            >6 tJobScriptMgr::buildShadowCameraJob(thisJob___, 0)
          >5 tRibCameraMgr::gatherDataForJob(liqglo___, ,jobList__,0,1)
          >5 liqRibTranslator::generateFileName(2,cameraShape1)
          >5 liqRibTranslator::generateFileName(3,cameraShape1)
        >4 liqRibTranslatorNew::calaculateSamplingTime(1)
        >4 liqRibTranslatorNew::scanScene__(1,0)
          >5 tJobScriptMgr::scanScene(1,0, htable__, count, returnStatus__)
            >6 liqRibClipPlaneData::insert(|pointLight1|pointLightShape1,lframe,0,3,0,matrix,,-1)
              >7 liqRibHT::hash(|pointLight1|pointLightShape1,0)
              >7 liqRibClipPlaneData::find(|pointLight1|pointLightShape1,|pointLight1|pointLightShape1,3)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pointLight1|pointLightShape1,0,3,-1)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],2)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],3)
                >8 liqRibNode::parseVectorAttributes(pointLight1,[],4)
                >8 liqRibNode::findShadingGroup(|pointLight1|pointLightShape1,3)
                >8 liqRibObj::liqRibObj(|pointLight1|pointLightShape1,3)
                  >9 liqShader::liqShader()
                    >10 liqTokenPointer:set(,0,0,0)
                    >10 liqShaderFactory::getUniqueShaderHandler()
                  >9 liqRibLightData::liqRibLightData(|pointLight1|pointLightShape1)
                    >10 liqRibData::addAdditionalSurfaceParameters(pointLightShape1)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 tLocatorMgr::scanScene(1,0,htable__,count__,returnStatus__)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
          >5 liqRibTranslator::scanSceneNodes(&currentNode, &path,1,0,&count)
            >6 liqRibClipPlaneData::insert(|pCube2|pCubeShape2,lframe,0,0,1,matrix,,-1)
              >7 liqRibHT::hash(|pCube2|pCubeShape2,1)
              >7 liqRibClipPlaneData::find(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
              >7 liqRibNode::liqRibNode(instanceOfNode,)
              >7 liqRibNode::set(|pCube2|pCubeShape2,0,0,-1)
                >8 liqRibNode::parseVectorAttributes(pCube2,[],2)
                >8 liqRibNode::parseVectorAttributes(pCube2,[],3)
                >8 liqRibNode::parseVectorAttributes(pCube2,[],4)
                >8 liqRibNode::findShadingGroup(|pCube2|pCubeShape2,0)
                >8 liqRibNode::findShader(lambert2SG)
                >8 liqRibNode::findDisp(lambert2SG)
                >8 liqRibNode::findVolume(lambert2SG)
                >8 liqRibNode::getColor(&shader,&color)
                >8 liqRibNode::getOpacity(&shader,&color)
                >8 liqRibNode::getMatteMode(&shader)
                >8 liqRibObj::liqRibObj(|pCube2|pCubeShape2,0)
                  >9 liqRibMeshData::liqRibMeshData(|pCube2|pCubeShape2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(P,1,8,0)
                    >10 liqTokenPointer:set(N,3,24,0)
                    >10 liqTokenPointer:set(st,0,24,2)
                    >10 liqRibData::addAdditionalSurfaceParameters(pCubeShape2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=2)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=3)
                      >11 liqRibData::parseVectorAttributes(&nodeFn, &strArray, pType=4)
          >5 liqRibTranslatorNew::dealwithParticleInstancedObjects(0,1,2)
          >5 liqRibTranslatorNew::getCameraData(iter__,0)
            >6 liqRibTranslator::getCameraInfo(,&cam)
              >7 liqRibTranslator::portFieldOfView(449,300,&horizontal,&vertical,&fnCamera)
                >8 liqRibTranslator::computeViewingFrustum(1.49667,,&left,&right,&bottom,&top,&cam)
        >4 Renderer::setRenderScriptFormatAndCompress(0,0)
          >5 Renderer::_RiOption_format_compress(0,0)
        >4 Renderer::isHeroPassReady(cameraShape1)
        >4 Renderer::HeroPassBegin(cameraShape1)
        >4 tHeroRibWriterMgr::write(liqglo___,cameraShape1,1,0)
          >5 liqRibTranslatorNew::ribPrologue__(cameraShape1)
            >6 Renderer::ribPrologue_comment(2.3.5 (buildtime=17:47:45.96),E:/MyDocuments/maya/projects/default/rm_dof2,admin,time)
            >6 Renderer::ribPrologue_begin(cameraShape1)
            >6 Renderer::ribPrologue_options(cameraShape1)
              >7 Renderer::ribPrologue_writeSearthPath()
              >7 tHeroRibWriterMgr::ribPrologue_hider(0)
              >7 tHeroRibWriterMgr::ribPrologue_samples(4,4)
              >7 tHeroRibWriterMgr::ribPrologue_shadingrate(1)
              >7 tHeroRibWriterMgr::ribPrologue_filter(0,2,2)
              >7 tHeroRibWriterMgr::ribPrologue_pass(beauty)
          >5 liqRibTranslatorNew::framePrologue__(1,cameraShape1)
            >6 Renderer::framePrologue(1,cameraShape1)
              >7 tHeroRibWriterMgr::framePrologue_display(cameraShape1)
              >7 Renderer::framePrologue_camera(1,cameraShape1)
                >8 tRibCameraMgr::framePrologue_camera(1,job.title=cameraShape1)
          >5 ShaderMgr::exportShaderGraph()
            >6 ConvertShadingNetwork::exportShaderGraph()
              >7 ConvertShadingNetwork::beforeExport()
              >7 ConvertShadingNetwork::__export()
                >8 ConvertShadingNetwork::canShadingGroupExported(lambert2SG)
                >8 Renderer::getValidShaderPlugsInShadingGroup()
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert2SG,surfaceShader)
                  >9 ConvertShadingNetwork::canShaderExported(lambert2)
                  >9 ConvertShadingNetwork::exportShaderBegin(lambert2)
                  >9 ConvertShadingNetwork::convertShadingNetworkToRSL(lambert2,pCubeShape2)
                    >10 ConvertShadingNetwork::getUpstreamConvertibleNodes(lambert2, nodes, numConnections)
                      >11 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                        >12 ShaderMgr::hasShaderType(lambert)
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                        >12 ConvertShadingNetwork::nodeIsConvertible(checker2)
                          >13 ShaderMgr::hasShaderType(checker)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                        >12 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                          >13 ShaderMgr::hasShaderType(shadingEngine)
                      >11 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                        >12 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                      >11 ConvertShadingNetwork::getUpstreamConvertibleNodes(checker2, nodes, numConnections)
                        >12 ConvertShadingNetwork::nodeIsConvertible(checker2)
                          >13 ShaderMgr::hasShaderType(checker)
                        >12 ShaderMgr::getValidConnectionRef(checker)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color1)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color1)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color1R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color1R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color1G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color1G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color1B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color1B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color2)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color2)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color2R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color2R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color2G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color2G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color2B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color2B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.contrast)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.contrast)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture3)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outColorB)
                        >12 ConvertShadingNetwork::getUpstreamConvertibleNodes(place2dTexture3, nodes, numConnections)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture3)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.uvCoord)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.uvCoord)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.coverageU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.coverageU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.coverageV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.coverageV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.mirrorU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.mirrorU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.mirrorV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.mirrorV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.noiseU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.noiseU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.noiseV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.noiseV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.offsetU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.offsetU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.offsetV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.offsetV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.repeatU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.repeatU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.repeatV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.repeatV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.repeatUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.repeatUV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.rotateFrame)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.rotateFrame)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.rotateUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.rotateUV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.stagger)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.stagger)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.translateFrameU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.translateFrameU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.translateFrameV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.translateFrameV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.wrapU)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.wrapU)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.wrapV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.wrapV)
                          >13 ConvertShadingNetwork::convertibleConnection(place2dTexture3.outUV)
                            >14 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.outUV)
                            >14 ConvertShadingNetwork::nodeIsConvertible(checker2)
                              >15 ShaderMgr::hasShaderType(checker)
                    >10 Visitor::preOutput(lambert2)
                    >10 Visitor::outputBegin(lambert2)
                    >10 ConvertShadingNetwork::traverseGraphAndOutputNodeFunctions( nodes, numConnections, shaderData)
                      >11 Visitor::outputUpstreamShader(place2dTexture3)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(place2dTexture3,place2dTexture)
                          >13 Visitor::visitPlace2dTexture(place2dTexture3)
                            >14 OutputHelper::beginRSL(place2dTexture3)
                            >14 ShaderMgr::convertibleConnection(place2dTexture3.repeatUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture3.repeatUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.repeatUV)
                            >14 ShaderMgr::convertibleConnection(place2dTexture3.outUV)
                              >15 ConvertShadingNetwork::convertibleConnection(place2dTexture3.outUV)
                                >16 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.outUV)
                                >16 ConvertShadingNetwork::nodeIsConvertible(checker2)
                                  >17 ShaderMgr::hasShaderType(checker)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(place2dTexture)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(place2dTexture3, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(place2dTexture3, validConnections, shaderData, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.uvCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.coverageU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.coverageU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.coverageV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.coverageV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.mirrorU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.mirrorU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.mirrorV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.mirrorV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.noiseU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.noiseU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.noiseV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.noiseV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.offsetU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.offsetU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.offsetV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.offsetV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.repeatU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.repeatU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.repeatV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.repeatV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.repeatUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.repeatUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.rotateFrame)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.rotateFrame)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.rotateUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.rotateUV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.stagger)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.stagger)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.translateFrameU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.translateFrameU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.translateFrameV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.translateFrameV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.wrapU)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.wrapU)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.wrapV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.wrapV)
                        >12 ConvertShadingNetwork::convertibleConnection(place2dTexture3.outUV)
                          >13 ConvertShadingNetwork::ensurePlugExists(place2dTexture3.outUV)
                          >13 ConvertShadingNetwork::nodeIsConvertible(checker2)
                            >14 ShaderMgr::hasShaderType(checker)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(place2dTexture3,outUV,place2dTexture3.outUV, outputVars, shaderData)
                      >11 Visitor::outputUpstreamShader(checker2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(checker2,checker)
                          >13 Visitor::visitChecker(checker2)
                            >14 OutputHelper::beginRSL(checker2)
                            >14 ShaderMgr::convertibleConnection(checker2.color1)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.color1)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.color1)
                            >14 ShaderMgr::convertibleConnection(checker2.color1R)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.color1R)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.color1R)
                            >14 ShaderMgr::convertibleConnection(checker2.color1G)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.color1G)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.color1G)
                            >14 ShaderMgr::convertibleConnection(checker2.color1B)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.color1B)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.color1B)
                            >14 ShaderMgr::convertibleConnection(checker2.color2)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.color2)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.color2)
                            >14 ShaderMgr::convertibleConnection(checker2.color2R)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.color2R)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.color2R)
                            >14 ShaderMgr::convertibleConnection(checker2.color2G)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.color2G)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.color2G)
                            >14 ShaderMgr::convertibleConnection(checker2.color2B)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.color2B)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.color2B)
                            >14 ShaderMgr::convertibleConnection(checker2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture3)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(checker2.uvCoord)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.uvCoord)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.uvCoord)
                                >16 ConvertShadingNetwork::nodeIsConvertible(place2dTexture3)
                                  >17 ShaderMgr::hasShaderType(place2dTexture)
                            >14 ShaderMgr::convertibleConnection(checker2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 ShaderMgr::convertibleConnection(checker2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(checker2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(checker2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                                  >17 ShaderMgr::hasShaderType(lambert)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(checker)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(checker2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(checker2, validConnections, shaderData, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.alphaGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.alphaGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.alphaIsLuminance)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.alphaIsLuminance)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.alphaOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.alphaOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color1)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color1)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color1R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color1R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color1G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color1G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color1B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color1B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color2)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color2)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color2R)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color2R)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color2G)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color2G)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.color2B)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.color2B)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.colorGain)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.colorGain)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.colorOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.colorOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.contrast)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.contrast)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.defaultColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.defaultColor)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.filter)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.filter)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.filterOffset)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.filterOffset)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.invert)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.invert)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.uvCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.uvCoord)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture3)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                        >12 ConvertShadingNetwork::addNodeInputVariable(checker2.uvCoord, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(place2dTexture3)
                            >14 ShaderMgr::hasShaderType(place2dTexture)
                          >13 ShaderMgr::getValidConnectionRef(place2dTexture)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.uCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.uCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.vCoord)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.vCoord)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outAlpha)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outAlpha)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2)
                            >14 ShaderMgr::hasShaderType(lambert)
                        >12 ConvertShadingNetwork::addNodeOutputVariable(checker2,outColor,checker2.outColor, outputVars, shaderData)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outColorR)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outColorR)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outColorG)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outColorG)
                        >12 ConvertShadingNetwork::convertibleConnection(checker2.outColorB)
                          >13 ConvertShadingNetwork::ensurePlugExists(checker2.outColorB)
                      >11 Visitor::outputUpstreamShader(lambert2)
                        >12 ShaderOutputVisitor::_outputUpstreamShader(lambert2,lambert)
                          >13 Visitor::visitLambert(lambert2)
                            >14 OutputHelper::beginRSL(lambert2)
                            >14 ShaderMgr::convertibleConnection(lambert2.color)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                                >16 ConvertShadingNetwork::nodeIsConvertible(checker2)
                                  >17 ShaderMgr::hasShaderType(checker)
                            >14 ShaderMgr::convertibleConnection(lambert2.transparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                            >14 ShaderMgr::convertibleConnection(lambert2.ambientColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                            >14 ShaderMgr::convertibleConnection(lambert2.incandescence)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                            >14 ShaderMgr::convertibleConnection(lambert2.diffuse)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                            >14 ShaderMgr::convertibleConnection(lambert2.outColor)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                                >16 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                                  >17 ShaderMgr::hasShaderType(shadingEngine)
                            >14 ShaderMgr::convertibleConnection(lambert2.outTransparency)
                              >15 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                                >16 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                            >14 OutputHelper::endRSL()
                      >11 ShaderMgr::getValidConnectionRef(lambert)
                      >11 ConvertShadingNetwork::decrementDownstreamConnections(lambert2, nodes, numConnections, validConnections)
                      >11 ConvertShadingNetwork::getNodeVariables(lambert2, validConnections, shaderData, inputVars, outputVars)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.color)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.color)
                          >13 ConvertShadingNetwork::nodeIsConvertible(checker2)
                            >14 ShaderMgr::hasShaderType(checker)
                        >12 ConvertShadingNetwork::addNodeInputVariable(lambert2.color, inputVars)
                          >13 ConvertShadingNetwork::nodeIsConvertible(checker2)
                            >14 ShaderMgr::hasShaderType(checker)
                          >13 ShaderMgr::getValidConnectionRef(checker)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.transparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.transparency)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.ambientColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.ambientColor)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.incandescence)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.incandescence)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.diffuse)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.diffuse)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outColor)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outColor)
                          >13 ConvertShadingNetwork::nodeIsConvertible(lambert2SG)
                            >14 ShaderMgr::hasShaderType(shadingEngine)
                        >12 ConvertShadingNetwork::convertibleConnection(lambert2.outTransparency)
                          >13 ConvertShadingNetwork::ensurePlugExists(lambert2.outTransparency)
                    >10 ConvertShadingNetwork::outputShaderMethod(shaderData)
                      >11 Visitor::outputShaderMethod(lambert2, float place2dTexture3_outUV[2];
 vector checker2_outColor;
, place2dTexture3(place2dTexture3_outUV);
//input: 
//output:place2dTexture3_outUV,

 checker2(place2dTexture3_outUV, checker2_outColor);
//input: place2dTexture3_outUV,
//output:checker2_outColor,

 lambert2(checker2_outColor);
//input: checker2_outColor,
//output:

)
                    >10 Visitor::outputEnd()
                    >10 Visitor::postOutput()
                  >9 ConvertShadingNetwork::exportShaderEnd(lambert2)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert2SG,displacementShader)
                >8 ConvertShadingNetwork::exportShaderInShadingGroup(pCubeShape2,lambert2SG,volumeShader)
                >8 ConvertShadingNetwork::exportShadingGroupBegin(lambert2SG)
                >8 ConvertShadingNetwork::outputShadingGroup(lambert2SG)
                  >9 Visitor::outputShadingGroup(lambert2SG)
                >8 ConvertShadingNetwork::exportShadingGroupEnd(lambert2SG)
              >7 ConvertShadingNetwork::afterExport()
          >5 liqRibTranslatorNew::worldPrologue__(cameraShape1)
            >6 Renderer::worldPrologue(cameraShape1)
          >5 liqRibTranslatorNew::lightBlock__(cameraShape1)
            >6 Renderer::writeLight_pre(|pointLight1|pointLightShape1,cameraShape1)
            >6 liqRibObj::writeObject(,cameraShape1,0)
              >7 liqRibLightData::write(,job=cameraShape1,0)
                >8 Helper::RiBeginRef()
                >8 liqRibLightData::_write(job=cameraShape1)
                  >9 Renderer::exportPointLight(pointlight,pointLightShape1,...)
                >8 Helper::RiEndRef()
            >6 Renderer::writeLight_post(|pointLight1|pointLightShape1,cameraShape1)
          >5 liqRibTranslatorNew::coordSysBlock__(cameraShape1)
          >5 liqRibTranslatorNew::objectBlock__(cameraShape1)
            >6 liqRibTranslatorNew::objectBlock_data(cameraShape1)
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_data(|pCube2|pCubeShape2,cameraShape1)
                >8 Renderer::exportOneObject_data(|pCube2|pCubeShape2,cameraShape1)
                  >9 Renderer::_writeObject(|pCube2|pCubeShape2,cameraShape1,0,0,0)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,cameraShape1,0)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,job=cameraShape1,0)
                        >12 Renderer::write(pCubeShape2,E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,cameraShape1,ref=0)
                          >13 Helper::RiBeginRef(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib)
                          >13 _write(pCubeShape2,cameraShape1)
                          >13 Helper::RiEndRef()
            >6 liqRibTranslatorNew::objectBlock_reference(cameraShape1)
              >7 liqRibTranslatorNew::preGeometryMel()
              >7 liqRibTranslatorNew::getShadowSetObject(cameraShape1)
              >7 liqRibTranslatorNew::oneObjectBlock_reference(|pCube2|pCubeShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_begin(|pCube2|pCubeShape2,cameraShape1)
                >8 Renderer::oneObjectBlock_reference_attribute_block0(|pCube2|pCubeShape2,cameraShape1)
                >8 liqRibTranslatorNew::tRiIlluminate(cameraShape1,|pCube2|pCubeShape2)
                  >9 Renderer::exportLightLinks(cameraShape1,|pCube2|pCubeShape2,lightedByWhichLightShapes.size=1)
                >8 liqRibTranslatorNew::checkSurfaceShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 liqRibTranslatorNew::checkDisplacementShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 liqRibTranslatorNew::checkVolumeShader(|pCube2|pCubeShape2,|pCube2|pCubeShape2,,,)
                >8 Renderer::oneObjectBlock_reference_attribute_block1(|pCube2|pCubeShape2,cameraShape1)
                  >9 liqRibTranslatorNew::displacementBounds(|pCube2|pCubeShape2)
                  >9 liqRibTranslatorNew::objectNonShadowAttribute(|pCube2|pCubeShape2)
                    >10 liqRibNode::writeUserAttributes()
                >8 liqRibTranslatorNew::writeShader_(1,|pCube2|pCubeShape2,v=0,s=0,c=0,,|pCube2|pCubeShape2,cameraShape1)
                  >9 Renderer::oneObjectBlock_reference_attribute_block2_writeShader_HasNoSurfaceShaderORIngoreSurface(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                    >10 liqRibTranslatorNew::F2(0,|pCube2|pCubeShape2)
                    >10 liqRibNode::findShader(lambert2SG)
                >8 liqRibTranslator::writeShadingGroup(|pCube2|pCubeShape2)
                >8 Renderer::exportOneObject_reference(|pCube2|pCubeShape2,cameraShape1)
                  >9 liqRibTranslatorNew::preTransformMel
                  >9 liqRibTranslatorNew::MaxtrixMotionBlur(|pCube2|pCubeShape2,|pCube2|pCubeShape2,0)
                  >9 liqRibTranslatorNew::postTransformMel(kTransform)
                  >9 liqRibTranslatorNew::preShapeMel(kTransform)
                  >9 Renderer::_writeObject(|pCube2|pCubeShape2,cameraShape1,0,0,1)
                    >10 liqRibObj::writeObject(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,cameraShape1,1)
                      >11 liqRibMeshData::write(E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,job=cameraShape1,1)
                        >12 Renderer::write(pCubeShape2,E:/MyDocuments/maya/projects/default/rib/_pCube2_pCubeShape2.1.rib,cameraShape1,ref=1)
                  >9 liqRibTranslatorNew::postShapeMel(kTransform)
                >8 Renderer::oneObjectBlock_reference_attribute_end(|pCube2|pCubeShape2,cameraShape1)
          >5 liqRibTranslatorNew::worldEpilogue__()
            >6 liqRibTranslator::worldEpilogue()
              >7 Renderer::worldEpilogue()
          >5 liqRibTranslatorNew::frameEpilogue__(1)
            >6 Renderer::frameEpilogue(1)
          >5 liqRibTranslatorNew::ribEpilogue__(cameraShape1)
            >6 Renderer::ribPrologue_end(cameraShape1)
        >4 Renderer::HeroPassEnd(cameraShape1)
      >3 liqRenderScript::addJob(job.title=rm_dof2Frame0,0)
        >4 liqRenderScript::popNextJobID()
      >3 liqRibTranslatorNew::doTextures(size=0)
        >4 rm::Renderer::doTextures(txtList.size()=0)
      >3 liqRibTranslatorNew::doShadows(size=0)
        >4 rm::Renderer::doShadows(shadowList_.size()=0)
      >3 rm::Renderer::renderAll_local(E:/MyDocuments/maya/projects/default/rib/rm_dof2_cameraShape1.0001.rib)
        >4 liqProcessLauncher::_execute(prman,  "E:/MyDocuments/maya/projects/default/rib/rm_dof2_cameraShape1.0001.rib","E:/MyDocuments/maya/projects/default/", wait=0)
      >3 liqRibTranslatorNew::postActions(defaultRenderLayer)
  >1 RendererMgr::test()
  >1 Renderer::closeLog()
