//surface shader name: lambert2
surface lambert2()
{



// define some extern variables which are used in 3delight shaders -----------------------------
 color __transparency = color (1,1,1);


// define the shaders --------------------------------------------------------------------------
#include "place2dTexture.h"
//shader name: place2dTexture3
void place2dTexture3 (
 output float outUV[];
)
{
 extern float s, t;
 float uvCoord[2];
 uvCoord[0] = s;
 uvCoord[1] = 1 - t;
 uniform float coverage[2] = { 1, 1 };
 uniform float mirrorU = float 0;
 uniform float mirrorV = float 0;
 uniform float noiseUV[2] = { 0, 0 };
  float offset[2] = { 0, 0 };
 uniform float repeatUV[2] = { 16, 16 };
 uniform float rotateFrame = float 0;
 uniform float rotateUV = float 0;
 uniform float stagger = float 0;
 uniform float translateFrame[2] = { 0, 0 };
 uniform float wrapU = float 1;
 uniform float wrapV = float 1;
 {
 uniform float i_coverageU=1;
 uniform float i_coverageV=1;
 uniform float i_mirrorU=0;
 uniform float i_mirrorV=0;
 uniform float i_noiseU=0;
 uniform float i_noiseV=0;
 uniform float i_repeatU=16;
 uniform float i_repeatV=16;
 uniform float i_rotateFrame=0;
 uniform float i_rotateUV=0;
 uniform float i_stagger=0;
 uniform float i_translateFrameU=0;
 uniform float i_translateFrameV=0;
 uniform float i_wrapU=1;
 uniform float i_wrapV=1;
   maya_place2dTexture(uvCoord,			
	i_coverageU,       
	i_coverageV,		
	i_mirrorU,			
	i_mirrorV,			
	i_noiseU,			
	i_noiseV,			
	0,			
	0,			
	i_repeatU,			
	i_repeatV,			
	i_rotateFrame,		
	i_rotateUV,		
	i_stagger,			
	i_translateFrameU,	
	i_translateFrameV,	
	i_wrapU,			
	i_wrapV,			
	outUV   
   );
 }
 coverage[0]=1;
 coverage[1]=1;
 mirrorU=0;
 mirrorV=0;
 noiseUV[0]=0;
 noiseUV[1]=0;
 offset[0]=0;
 offset[1]=0;
 repeatUV[0]=16;
 repeatUV[1]=16;
 rotateFrame=0;
 rotateUV=0;
 stagger=0;
 translateFrame[0]=0;
 translateFrame[1]=0;
 wrapU=1;
 wrapV=1;
}

#include "checker.h"
//shader name: checker2
void checker2 (
 float uvCoord[];
 output color outColor;
)
{
  float alphaGain = float 1;
 uniform float alphaIsLuminance = float 0;
  float alphaOffset = float 0;
  color color1 = color (1,1,1);
  color color2 = color (0,0,0);
  color colorGain = color (1,1,1);
  color colorOffset = color (0,0,0);
 uniform float contrast = float 1;
  color defaultColor = color (0.5,0.5,0.5);
  float filter = float 1;
  float filterOffset = float 0;
 uniform float invert = float 0;
//checker2.uvCoord <-- place2dTexture3.outUV
  float outAlpha = float 0.5;
   maya_checker(alphaGain,         
	alphaIsLuminance,  
	alphaOffset,       
	color1,            
	color2,            
	colorGain,         
	colorOffset,       
	contrast,          
	defaultColor,      
	filter,            
	filterOffset,      
	invert,            
	uvCoord,           
	outAlpha,          
	outColor           
   );
}

//shader name: lambert2
void lambert2 (
 color inColor;
)
{
//lambert2.color <-- checker2.outColor
  color transparency = color (0,0,0);
  color ambientColor = color (0,0,0);
  color incandescence = color (0,0,0);
  float diffusion = float 0.8;
  color outColor = color (0,0,0);
  color outTransparency = color (0,0,0);
 extern normal N;
 normal Nn = normalize( N );
 outTransparency = transparency;
 Oi = Os * color ( 1 - outTransparency );
 outColor = incandescence +
            ( inColor * ( diffusion * 
                          diffuse( Nn ) +
                          ambientColor ) );
 Ci = Cs * Oi * color outColor;
}




// call the shaders ----------------------------------------------------------------------------
 float place2dTexture3_outUV[2];
 color checker2_outColor;

 //place2dTexture3
 place2dTexture3(place2dTexture3_outUV);
//input: 
//output:place2dTexture3_outUV,

 //checker2
 checker2(place2dTexture3_outUV, checker2_outColor);
//input: place2dTexture3_outUV,
//output:checker2_outColor,

 //lambert2
 lambert2(checker2_outColor);
//input: checker2_outColor,
//output:

}
