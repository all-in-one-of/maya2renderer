/*
    Copyright (c) TAARNA Studios International.

	This shader emulates the mia_physicalsun shader.
*/

// Authors: the /*jupiter jazz*/ group

#define bool float
#define true 1
#define false 0

// Compute the square of a given value.
float sq(float x)
{
  return x * x;
}

// Compute the CIE luminance (Rec. 709) of a given color.
float luminance(color c)
{
    return c[0] * 0.212671 + c[1] * 0.715160 + c[2] * 0.072169;
}

// Clamp a given scalar to the [0, 1] range.
float saturate(float x)
{
    return clamp(x, 0.0, 1.0);
}

float compute_saturation(float saturation, turbidity)
{
    if (saturation > 1.0)
        return saturation;
    else
    {
        float saturation3 = pow(saturation, 3.0);
        float k = pow(saturate((turbidity - 2.0) / 15.0), 3.0);
        return mix(saturation, saturation3, k);
    }
}

color compute_sun_color(
    float   turbidity;
    float   theta_sun;    
    float   cos_theta_sun)
{
    if (cos_theta_sun <= 0.0)
        return 0.0;

    color lambda_o = color(12.0, 8.5, 0.9);
    color lambda = color(0.610, 0.550, 0.470);
    color sun_intensity =
        color(
            1.0 * 127500 / 0.9878,
            0.992 * 127500 / 0.9878,
            0.911 * 127500 / 0.9878);

    // Relative Optical Mass equivalent.
    float m = 1.0 / (cos_theta_sun + 0.15 * pow(93.885 - theta_sun * 180 / PI, -1.253));

    // Amount of aerosols present.
    float beta = 0.04608366 * turbidity - 0.04586026;

    float Alpha = 1.3;      // ratio of small to large particle sizes (0 to 4, usually 1.3)
    float Ozone = 0.0035;   // amount of ozone in meters (NTP)
    float W = 2.0;          // precipitable water vapor in centimeters (standard = 2)

    // Aerosal (water + dust) attenuation.
    color tau_a;
    tau_a[0] = exp(-m * beta * pow(lambda[0], -Alpha));
    tau_a[1] = exp(-m * beta * pow(lambda[1], -Alpha));
    tau_a[2] = exp(-m * beta * pow(lambda[2], -Alpha));

    // Attenuation due to ozone absorption.
    color tau_o;
    tau_o[0] = exp(-m * lambda_o[0] * Ozone);
    tau_o[1] = exp(-m * lambda_o[1] * Ozone);
    tau_o[2] = exp(-m * lambda_o[2] * Ozone);

    // Rayleigh Scattering.
    color tau_r;
    tau_r[0] = exp(-m * 0.008735 * pow(lambda[0], -4.08));
    tau_r[1] = exp(-m * 0.008735 * pow(lambda[1], -4.08));
    tau_r[2] = exp(-m * 0.008735 * pow(lambda[2], -4.08));

    return tau_r * tau_a * tau_o * sun_intensity;
}

/*
	physical sun
*/
void rmPhysicalsun_impl(
	float i_multiplier/* = 1.0*/;
	color i_rgb_unit_conversion/* = color(0, 0, 0)*/;
	float i_haze/* = 0.0*/;
	float i_redblueshift/* = 0.0*/;
	float i_saturation/* = 0.7*/;
	float i_horizon_height/* = 0.0*/;
	float i_shadow_softness/* = 0.0*/;

	string i_shadowmap/* = "raytrace"*/;
	float i_shadow_samples/* = 3*/;
	bool i_y_is_up/* = false*/; )
{
	if (i_multiplier > 0.0)
	{
		// Compute turbidity value from haze parameter.
		uniform float turbidity = 2.0 + i_haze;
		if (turbidity < 2.0)
			turbidity = 2.0;

		// Compute saturation value.
		uniform float saturation = compute_saturation(i_saturation, turbidity);

		// Compute the world space sun direction.
		uniform vector up = (i_y_is_up == true)
			? vector "shader" (0.0, 1.0, 0.0) : vector "shader" (0.0, 0.0, 1.0);

		solar( up, 0.0 )
		{
			color shad = 0;
			if( i_shadowmap!="" && i_shadow_samples>0 )
				shad = shadow(
					i_shadowmap, Ps,
					"samples", i_shadow_samples,
					"blur", i_shadow_softness );

			// Compute the zenith angle of the sun, in radians.
			float cos_theta_sun = -L[1];
			float theta_sun = acos(cos_theta_sun);

			// Compute the sun color.
			color sun_color =
				compute_sun_color( turbidity, theta_sun, cos_theta_sun );

			// Start with the sun light.
			Cl = sun_color;

			// Rescale the final color.
			color rgb_unit_conversion =
				color(i_rgb_unit_conversion[0],
					i_rgb_unit_conversion[1], i_rgb_unit_conversion[2]);

			if (rgb_unit_conversion == 0.0)
				Cl *= 1.0 / 80000.0;
			else
				Cl *= rgb_unit_conversion;

			// Apply global multiplier.
			Cl *= i_multiplier;

			// Apply saturation correction.
			if (saturation <= 0.0)
				Cl = luminance( Cl );
			else
			{
				Cl = mix(luminance(Cl), max(Cl, 0.0), saturation);
				Cl = max(Cl, 0.0);
			}

			// Apply red/blue shift.
			Cl[0] *= 1.0 + i_redblueshift;
			Cl[2] *= 1.0 - i_redblueshift;

			// Account for occluders.
			Cl *= 1-shad;
		}
	}
}
