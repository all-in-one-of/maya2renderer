source xxliquidutility.mel;
///////////////////////////////////////////////////////////////////////////////////
//return the current path of this file
global proc string er_whereIAm_erSHADER_user()
{
	liqPushIdent();	
	liqAElog("er_whereIAm_erSHADER_user()");
	
	string $result = `whatIs "er_whereIAm_erSHADER_user"`;
	//print("["+$result+"]\n");
	string $ret;

	if( startsWith($result, "Mel procedure found in: ") )
	{
	    string $path = substring( $result, size("Mel procedure found in:  "), size($result) );
	    $ret = $path;
	}else{
	    print("Mel procedure 'er_whereIAm_erSHADER_user' NOT found.\n"); 
	    $ret = "";
	}
	liqPopIdent();
	return $ret;
}
//
proc string getThisDirectory()
{
	liqPushIdent();	
	liqAElog("getThisDirectory()");

	string $thisPath = er_whereIAm_erSHADER_user();
	string $thisDir = dirname($thisPath);

	liqPopIdent();
	return $thisDir;
}
//
global proc int liquidAssignUserShaderToSelected_elvishray(string $node)
{
	liqPushIdent();	
	liqAElog("liquidAssignUserShaderToSelected_elvishray("+$node+")");

	int $visited = 0;

	string $nodeType = `nodeType $node`;

	if( $nodeType == "er_checker2" )
	{
		liquidAssignUserShaderToSelected_elvishray_er_checker2($node);
		$visited = 1;
	}
	else if( $nodeType == "er_architectural" ){
		liquidAssignUserShaderToSelected_elvishray_er_architectural($node);
		$visited = 1;
	}
	else if( $nodeType == "erTestLight" ){
		liquidAssignUserShaderToSelected_elvishray_erTestLight($node);
		$visited = 1;
	}
	else if( $nodeType == "erChecker" ){
		liquidAssignUserShaderToSelected_elvishray_erChecker($node);
		$visited = 1;
	}
	else if( $nodeType == "erFlatColor" ){
		liquidAssignUserShaderToSelected_elvishray_erFlatColor($node);
		$visited = 1;
	}
	else if( $nodeType == "erSkylight" ){
		liquidAssignUserShaderToSelected_elvishray_erSkylight($node);
		$visited = 1;
	}
	else if( $nodeType == "erPhysicalsky" ){
		liquidAssignUserShaderToSelected_elvishray_erPhysicalsky($node);
		$visited = 1;
	}
	else{
		liqWarn("The shade type ["+$nodeType+"] of ["+$node+"] is not erSHADER_user.");
		$visited = 0;
	}

	liqPopIdent();
	return $visited;
}
///////////////////////////////////////////////////////////////////////////////////
//
//
//

print "This is erSHADER_user/src/userSetup_eiSHADER_user.mel\n";

// source subdirectoies scripts
eval( "source \"" + getThisDirectory() + "/erChecker/userSetup.mel\"" );
eval( "source \"" + getThisDirectory() + "/er_checker2/userSetup.mel\"" );
eval( "source \"" + getThisDirectory() + "/er_architectural/userSetup.mel\"" );
eval( "source \"" + getThisDirectory() + "/erTestLight/userSetup.mel\"" );
eval( "source \"" + getThisDirectory() + "/erFlatColor/userSetup.mel\"" );
eval( "source \"" + getThisDirectory() + "/erSkylight/userSetup.mel\"" );
eval( "source \"" + getThisDirectory() + "/erPhysicalsky/userSetup.mel\"" );