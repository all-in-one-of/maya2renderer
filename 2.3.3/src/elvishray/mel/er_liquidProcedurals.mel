source xxliquidutility.mel;

//
global proc liquidAssignShaderToSelected_elvishray(string $node)
{
	liqPushIdent();
	liqlog("liquidAssignShaderToSelected_elvishray("+$node+")");
	
	string $nodeType = `nodeType $node`;

	//env
	if( $nodeType == "er_physicalsky" )
	{

	}
	//light
	else if( $nodeType == "er_skylight" )
	{
		string $selected[] = `ls -l -lights -dag -sl`;

		if ( !objExists( ($node + ".liqAssignedObjects") ) )
			addAttr -ln liqAssignedObjects -at message $node;

		for ( $sel in $selected ) 
		{
			if ( !objExists( ($sel + ".liquidLightShaderNode") ) ) 
				addAttr -ln liquidLightShaderNode -at message $sel;
			if ( !isConnected( ($node + ".liqAssignedObjects"), ($sel + ".liquidLightShaderNode" ) ) )
				connectAttr -f ($node + ".liqAssignedObjects") ($sel + ".liquidLightShaderNode");
		}
	}
	//surface
	else if( $nodeType == "er_flatcolor" )
	{

	}
	// it maybe a user-defined shader
	else if( 1 == liquidAssignUserShaderToSelected_elvishray($node) ) {
		//This is a user-defined shader
	}
	else{
		liqError("The shade type ["+$nodeType+"] of ["+$node+"] is unhandled.");
	}




	liqPopIdent();
}
//
global proc liqHyperShadeCreateMenu_BuildMenu_elvishray()
{
	liqPushIdent();
	liqlog("liquidAssignShaderToSelected_elvishray()");
	
	erHyperShadeCreateMenu_BuildMenu( er_getRendererName() );

	liqPopIdent();
}
//
global proc string[] liqExcludeClassficationNodes_elvishray(string $classification, string $exclude[])
{
	liqPushIdent();
	liqlog("liqExcludeClassficationNodes_elvishray(string $exclude[])");
	
	string $erClassfication = "rendernode/"+er_getRendererName()+"/shader";
	if( !startsWith($classification, $erClassfication) )
	{
		string $exclNodes[];
		string $tmp[] = `listNodeTypes $erClassfication`;
		$exclude = stringArrayCatenate($exclude, $tmp);
		$exclude = stringArrayRemoveDuplicates($exclude);
	}

	liqPopIdent();
	return $exclude;
}
//
global proc liqRenderNode_CreateTreeLister_Content_elvishray(string $renderNodeTreeLister, string $postCommand, string $filterClassArray[])
{
	liqPushIdent();
	liqlog("liqRenderNode_CreateTreeLister_Content_elvishray("+$renderNodeTreeLister+","+$postCommand+", ["+stringArrayToString($filterClassArray,",")+"])");
	
	erRenderNode_CreateTreeLister_Content($renderNodeTreeLister, $postCommand, $filterClassArray, er_getRendererName());

	liqPopIdent();
	return;
}
//
global proc int LIQUID_isLiquidClassification_elvishray(string $classification)
{
	liqPushIdent();
	liqlog("LIQUID_isLiquidClassification_elvishray("+$classification+")");

	string $erClassfication = "rendernode/"+er_getRendererName()+"/shader";
	if( startsWith($classification, $erClassfication) )
	{
		liqPopIdent();
		return 1;
	}

	liqPopIdent();
	return 0;
}
//
global proc string LIQUID_getCreateBarItemCallbackCmd_elvishray(
	string $classification,
	string $as,
	string $postCommand,
	string $type)
{
	liqPushIdent();
	liqlog("LIQUID_getCreateBarItemCallbackCmd_elvishray("+$classification+","+$as+","+$postCommand+","+$type+")");
	
	string $command = 
				("erCreateCustomNode"
					+ " "
					+ $as 
					+ " \""
					+ encodeString($postCommand)
					+ "\" "
					+ $type
					+ " \""+er_getRendererName()+"\" "
					);
	
	liqPopIdent();
	return $command;
}
//
global proc liquidAddAttributeExtension_elvishray()
{
	liqPushIdent();
	liqlog("liquidAddAttributeExtension_elvishray()");

	erAddAttributeExtension_pointlight();


	liqPopIdent();
}
//
global proc liquidDeleteAttributeExtension_elvishray()
{
	liqPushIdent();
	liqlog("liquidDeleteAttributeExtension_elvishray()");
	
	erDeleteAttributeExtension_pointlight();

	liqPopIdent();
}
//
global proc liquidStartup_elvishray()
{
	liqPushIdent();
	liqlog("liquidStartup_elvishray()");
	
	liquidAddAttributeExtension_elvishray();

	liqPopIdent();
}