
source xxliquidutility.mel;

global proc er_AddMenus()
{
	liqPushIdent();
	liqlog("er_AddMenus()");

	print("add er menus here.");

	liqPopIdent();
}


global proc liquidCreateMenus_elvishray()
{
	liqPushIdent();
	liqlog("liquidCreateMenus_elvishray()");

	menuItem -d true;//------------------------------------
	menuItem -label "Add Render Pass"
               -subMenu true
               -tearOff false
               -postMenuCommand 
                ("elvishrayBuildAddRenderPassMenu elvishrayAddRenderPassMenu")
               elvishrayAddRenderPassMenu;
    setParent -menu ..; // from submenu 

	$cmd = "elvishrayBuildRenderPassMenu(\"Select\", \"select\", 1)";
    menuItem -label "Select Render Pass"
               -subMenu true
               -tearOff false
               -postMenuCommand $cmd
               elvishraySelectRenderPassMenu;
    setParent -menu ..; // from submenu

	menuItem -d true;//------------------------------------
	liquidCreateObjectsAttributesMenu_elvishray( "main" );
	liquidCreateLightsAttributesMenu_elvishray( "main" );

	menuItem -d true;//------------------------------------

	//
	liqPopIdent();
}

global proc liquidCreateObjectsAttributesMenu_elvishray( string $prefix )
{
	liqPushIdent();
	liqlog("liquidCreateObjectsAttributesMenu_elvishray("+$prefix+")");
	
	//[refactor liq|ui|2-beg] 
	//menuItem -label "Object Attributes" -subMenu true -tearOff true;
	//	menuItem -d true;
	//setParent -menu ..;
	//[refactor liq|ui|2-end] 

	liqPopIdent();

}

global proc liquidCreateLightsAttributesMenu_elvishray( string $prefix )
{
	liqPushIdent();
	liqlog("liquidCreateLightsAttributesMenu_elvishray("+$prefix+")");

	//menuItem -label "Light Attributes" -subMenu true -tearOff true;
    //menuItem -d true;
	//setParent -menu ..;

	liqPopIdent();
}

//
global int $gMaxNumOptionMenuItems = 30;
//
global proc
elvishrayBuildRenderPassMenu(
  string $partial_menu_name, 
  string $command, 
  int $add_last_rendered_item)
{
  string $menu_name = "elvishray" + $partial_menu_name + "RenderPassMenu";
  
  // Delete all existing items from the menu, since we are going to rebuild it
  // completely.
  //
  menu -edit -deleteAllItems $menu_name;

  // Get a list of all render pass nodes that exist in the scene.
  //
  string $render_passes[] = LRP_getAllRenderPasses();
  
  if (size($render_passes) > 0)
  {
    if ($add_last_rendered_item)
    {
      // Add to the menu a menu item that lets the user re-render the most 
      // recently rendered pass.
      //
      //addLastRenderedMenuItem($menu_name, $command);
    }
    
    global int $gMaxNumOptionMenuItems;

    if (size($render_passes) < $gMaxNumOptionMenuItems)
    {
      // Add to the menu a menu item for each render pass in the scene.
      //
      for ($render_pass in $render_passes)
      {
        menuItem 
          -label $render_pass
          -parent $menu_name
          -annotation ($partial_menu_name + " " + $render_pass)
          -command ($command + " " + $render_pass);
      }
    }
    else
    {
      // There are too many items in the scene to put in one menu. 
      // Instead, we offer the user the option of opening a dialog 
      // from which they can choose one
      //
      //menuItem
      //  -enableCommandRepeat false
      //  -label "Too many items. Choose from dialog..."
      //  -parent $menu_name
      //  -command
      //    ("DL_optionMenuChoiceDlg "
      //      + DL_stringArrayAsString($render_passes)
      //      + " \"" + $partial_menu_name + "\""
      //      + " \"" + $command + "\"");
    }
  }
  else
  {
    // No render passes exist in the scene. Add only one item to the menu,
    // which tells the user there are no render passes.
    //
    menuItem 
      -label "<no render passes>"
      -enable false
      -annotation "No 3Delight render passes in scene"
      -parent $menu_name;
  }
}
//
global proc
elvishrayBuildAddRenderPassMenu(string $menu)
{
  // Delete all existing items from the menu, since we are going to rebuild it
  // completely.
  //
  menu -edit -deleteAllItems $menu;

  menuItem -label "Full"
    -annotation "Add new render pass with all possible attributes"
    -command "select `ER_createFullRenderPassNode`"
    -parent $menu;
  //menuItem -label "Basic"
  //  -annotation "Add new render pass with basic attributes"
  //  -command "select `DL_createBasicRenderPassNode`"
  //  -parent $menu;

  menuItem -divider true -parent $menu;
  
  //delightBuildRenderPassTemplatesMenuItems($menu);
}
//
global proc string
ER_createFullRenderPassNode()
{
  // Create an render pass node with all attributes and call the user's init 
  // procedure with it.
  //
  //string $node = DRP_createNode();
  //DL_addAttributeGroup($node, "mainAttrGrp");
  //$node = `rename $node "fullRenderPass"`;

  //if (`delightExists -user "DL_userRenderPassInit"`)
  //  eval("DL_userRenderPassInit \"" + $node + "\"");
  string $node = `createNode elvishrayGlobals`;
  return $node;
}
//
global proc erLiquidLoadGlobals()
{
	liqPushIdent();
	liqlog("erLiquidLoadGlobals()");

	//setAttr "liquidGlobals.renderer"		-type "string" (er_getRendererName());

	setAttr "liquidGlobals.renderCommand"	-type "string" "er";
	setAttr "liquidGlobals.previewer"		-type "string" "";
	setAttr "liquidGlobals.shaderInfo"		-type "string" "";
	setAttr "liquidGlobals.shaderComp"		-type "string" "";
	setAttr "liquidGlobals.shaderExt"		-type "string" "dll";
	setAttr "liquidGlobals.makeTexture"		-type "string" "";
	setAttr "liquidGlobals.viewTexture"		-type "string" "";
	setAttr "liquidGlobals.textureExt"		-type "string" "tex";

	liqPopIdent();
}
//
global proc erAddShaderPlugin(string $pluginname)
{
	liqPushIdent();
	liqlog("erAddShaderPlugin("+$pluginname+")");

	string $global = er_getRenderGlobalNode();
	string $plug = ($global+".shader_plugin");
	string $shaderPlugins[] = `getAttr $plug`;

	if(1==stringArrayContains($pluginname, $shaderPlugins))
	{	
		liqPopIdent();
		return;//already exists.
	}

	// Insert at (or after) the end of the sequence
	stringArrayInsertAtIndex(size($shaderPlugins), $shaderPlugins, $pluginname );

	//set new shade plugin array
	int $size = size($shaderPlugins);
	int $i;
	for($i=0; $i<$size; $i++)
	{
		setAttr -type "string" ($plug+"["+$i+"]") ($shaderPlugins[$i]);
	}


	liqPopIdent();
}
//
global proc erDelShaderPlugin(string $pluginname)
{
	liqPushIdent();
	liqlog("erDelShaderPlugin("+$pluginname+")");


	string $global = er_getRenderGlobalNode();
	string $plug = ($global+".shader_plugin");
	string $shaderPlugins[] = `getAttr $plug`;

	if(0==stringArrayContains($pluginname, $shaderPlugins))
	{
		liqPopIdent();
		return;//not found
	}

	string $item[] = { $pluginname };
	$shaderPlugins = stringArrayRemove($item, $shaderPlugins);

	//set new shade plugin array
	liqWarn("FIXME: UI is can't be updated.");
	int $size = size($shaderPlugins);
	int $i;
	for($i=0; $i<$size; $i++)
	{
		setAttr -type "string" ($plug+"["+$i+"]") ($shaderPlugins[$i]);
	}

	liqPopIdent();
}
//
global proc liquidStartup_elvishray()
{
	liqPushIdent();
	liqlog("liquidStartup_elvishray()");

	evalEcho( "source \""+liquidGetHome()+"/mel/2013/liquidProceduralsForSubRenderer.mel\"");

	liquidAddSubRenderer(er_getRendererName());

	//set liquidGlobals.renderer
	liqSetSubRendererName(er_getRendererName());
	//create global node for this renderer
	liqGlobalsNodeRendererMain();

	erLiquidLoadGlobals();
		
	//update menu
	liquidCreateMenus();
	liquidShaderNodes_AERefresh();

	liqPopIdent();
}
//
global proc liquidShutdown_elvishray()
{
	liqPushIdent();
	liqlog("liquidShutdown_elvishray()");
	
	//liquidAddAttributeExtension_elvishray();
	//erLiquidUnlLoadGlobals();

	liquidDelSubRenderer(er_getRendererName());

	liqPopIdent();
}