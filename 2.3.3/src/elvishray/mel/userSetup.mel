
print "This is elvishray /2.3.3/src/elvishray/mel/usersetup.mel.\n";

source er_AEliquidInstanceFlags.mel;
source er_CreateMenus.mel;
source AEliquidShaderTemplate_elvishray.mel;
source er_callback.mel;
source er_UserCallbackInterface.mel;
source er_startup.mel;
source AEelvishrayGlobalsTemplate.mel;
source AEelvishrayGlobalsTemplate.res.mel;
source AEer_physicalskyTemplate.mel;
source AEer_skylightTemplate.mel;
source er_CameraVisibility.mel;
source er_liquidProcedurals.mel;
source AEer_flatcolorTemplate.mel;
source AEer_checkerTemplate.mel;
source er_RendererName.mel;
source er_CustomNodeUI.mel;
source er_CustomNodeUI.res.mel;
source er_AETemplate.mel;
source er_MessageCallback.mel;
source er_BuildHypergraphNodePopupMenuItems.mel;

//-----------------------------------------------
// source erSHADER_user scripts if any.
string $erSHADER_user_DIR = getenv("ER_SHADER_USER");
if( $erSHADER_user_DIR != "" )
{
    eval( "source \"" + $erSHADER_user_DIR + "/src/userSetup.mel\"" );
}
//-----------------------------------------------
//global string $g_LiquidUserShader_elvishray[];
//global proc int isLiquidUserShader_elvishray(string $node)
//{
//	global string $g_LiquidUserShader_elvishray[];
//	liqPushIdent();
//	liqlog("isLiquidUserShader_elvishray("+$node+")");
//   
//	if( `size($g_LiquidUserShader_elvishray)` == 0 )
//	{
//		$found = 0;	
//		liqPopIdent();
//		return $found;
//	}
//
//	string $nodeType = `nodeType $node`;
//	int $found = stringArrayContains($nodeType, $g_LiquidUserShader_elvishray);
//		
//	liqPopIdent();
//	return $found;
//}