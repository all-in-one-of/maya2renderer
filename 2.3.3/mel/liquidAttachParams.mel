//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the
// "License"); you may not use this file except in compliance with the License. You may
// obtain a copy of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific
// language governing rights and limitations under the License.
//
// The Original Code is the Liquid Rendering Toolkit.
//
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved.
//
// Contributor(s): Berj Bannayan.
//
//
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//

//  Procedure Name:
//  liquidAttachParams
//
//  Description:
//  adds the appropriate attributes to the shading node for rman shader control
//



//
//  Note : from now on, the attributes are hidden to speed up loading of large shaders (100+ parameters)
//
source xxliquidutility.mel;


global proc liquidAttachShaderParams( string $currentNodeName, string $shaderFileName )
{
  liqPushIdent();
  liqlog("liquidAttachShaderParams( "+$currentNodeName+", "+$shaderFileName+" )");

	// parse the shader
	// don't force a reload
	liquidSlSetShader( $shaderFileName );
	// get the output filter mask from the liquidGlobals.
	int $filterOutputParams = `getAttr liquidGlobals.shadersIgnoreOutputParams`;
	string $outputFilter = strip( `getAttr liquidGlobals.shadersOutputParamsFilter` );
	if ( $outputFilter == "" ) $outputFilter = "^_*";

	// just use the globals
	int $numOfArgs = liquidSlNumParams();
	for ( $i = 0; $i < $numOfArgs ; $i++ )
	{
		liqlog($i+"-----------------");
		string $argName      = liquidSlParamName($i);
		liqlog("0");
		// filter out ouptut parameters
		if ( $filterOutputParams && liquidSlParamIsOutput($i) && match( $outputFilter, $argName) == "" ) {
			liqlog ("attach skip : "+$argName+" ( \""+$outputFilter+"\" )");
			continue;
		} else {
			liqlog ("attach : "+$argName+" ( \""+$outputFilter+"\" )");
		}

		string $argType      = liquidSlParamType($i);
		int    $argArrayLen  = liquidSlParamArraySize($i);
		string $paramDefault = liquidSlParamDefault($i);
		int $isArray = ($argArrayLen >= 0);
		int $resizable = ($argArrayLen == 0);
 		string $arrayNotation = ($argArrayLen > 0) ? ("["+$argArrayLen+"]") : (($argArrayLen == 0) ? "[]" : "");
		liqlog("for param: "+$argType+" "+$argName+$arrayNotation+" = "+$paramDefault);

		string $argDefaultS[];
		float  $argDefaultF[];
		vector $argDefaultV[];

		int $hiddenState = false;
		string $plug = ($currentNodeName + "." + $argName);
		string $cplug = $plug;
		//liqlog("before `attributeQuery -node "+$currentNodeName+" -ex  "+$argName+"`");
		
		// we delete the plug if it already exists, 
		if( `attributeQuery -node $currentNodeName -ex $argName` ){
			liqlog("before  renameAttr "+$plug+" \"TO_BE_DELETED\")");
			// philippe: this is a fix to deal with a bug with compound attributes
			if ( catch( `renameAttr $plug "TO_BE_DELETED"` ) ){
				liqError("renameAttr "+$plug+" \"TO_BE_DELETED\")");
			}
			//NOTE: without this for-loop, maya will lead a crash.
			for($i=0; $i<1; $i++){ print("");}

			liqlog("before  deleteAttr \""+$currentNodeName+".TO_BE_DELETED\"");
			if ( catch( `deleteAttr ($currentNodeName+".TO_BE_DELETED")` ) ){
				liqError("deleteAttr \""+$currentNodeName+".TO_BE_DELETED\"");
			}
		}

		liqlog("objExists("+$plug+")="+ objExists( $plug ) );
		if ( ! objExists( $plug ) ) 
		{
			switch( $argType ) {
			case "float":
				if ( $isArray )
				{
					// float array
					$argDefaultF = liquidSlDefaultToFloatArray( $paramDefault );
					//trace ("[liquidAttachShaderParams]\taddAttr multi double "+$argName);
					// NEW WAY.
					addAttr -hidden true -longName $argName -at "double" -keyable true -multi $currentNodeName;
					for ( $k = 0; $k < $argArrayLen; $k++ )
					{
						$cplug = ($currentNodeName+"."+$argName+"["+$k+"]");
						//trace ("[liquidAttachShaderParams]\tsetAttr "+$cplug+" "+$argDefaultF[$k]);
						setAttr -k true $cplug $argDefaultF[$k];
					}
				}
				else
				{
					// simple float
					$argDefaultF[0] = liquidSlDefaultToFloat( $paramDefault );
					//trace ("[liquidAttachShaderParams]\taddAttr double "+$argName);
					addAttr -hidden true -longName $argName -at double -k true $currentNodeName;
					//trace ("[liquidAttachShaderParams]\tsetAttr "+$cplug+" "+$argDefaultF[0]);
					setAttr $plug $argDefaultF[0];
				}
				break;
			case "shader":
			case "string":
				if ( $isArray )
				{
					// string array
					$argDefaultS = liquidSlDefaultToStringArray( $paramDefault );
					//trace ("[liquidAttachShaderParams]\taddAttr multi string "+$argName);
					addAttr -hidden true -longName $argName -dt "string" -multi $currentNodeName;
					for ( $k = 0; $k < $argArrayLen; $k++ )
					{
						$cplug = ($currentNodeName+"."+$argName+"["+$k+"]");
						//trace ("[liquidAttachShaderParams]\tsetAttr "+$cplug+" \""+$argDefaultS[$k]+"\"");
						setAttr -type "string" $cplug $argDefaultS[$k];
					}
				}
				else
				{
					// simple string
					$argDefaultS[0] = liquidSlDefaultToString( $paramDefault );
					//trace ("[liquidAttachShaderParams]\taddAttr string "+$argName);
					addAttr -hidden true -longName $argName -dt "string" $currentNodeName;
					//trace ("[liquidAttachShaderParams]\tsetAttr "+$cplug+" "+" \""+$argDefaultS[0]+"\"");
					setAttr $cplug -type "string" $argDefaultS[0];
				}
				break;
			case "color":
				if( $argName == "opacity" )
				{
					string $tmpAttrName = $currentNodeName + ".opacity";
					// Moritz: this is for compatibility with old scenes that
					// use a single "float" type opacity.
					if ( `getAttr -type $tmpAttrName` == "float" )
					{
						float $tmpVal = `getAttr $tmpAttrName`;
						deleteAttr $tmpAttrName;
						addAttr -hidden true -k true -longName "opacity" -usedAsColor -at float3 $currentNodeName;
						addAttr -hidden true -k true -longName "redO" -at "float" -parent "opacity" $currentNodeName;
						addAttr -hidden true -k true -longName "greenO" -at "float" -parent "opacity" $currentNodeName;
						addAttr -hidden true -k true -longName "blueO" -at "float" -parent "opacity" $currentNodeName;
						setAttr  ( $currentNodeName + ".opacity" ) -type float3 $tmpVal $tmpVal $tmpVal;
					}
					break;
				}
				if ( $isArray > 0 )
				{
					// color array
					$argDefaultV = liquidSlDefaultToVectorArray( $paramDefault );
					int $size = size($argDefaultV);
					addAttr -hidden true -k true -longName $argName -at "float3" -usedAsColor -multi $currentNodeName;
					addAttr -hidden true -k true -longName ( $argName+"a" ) -at "float" -parent $argName $currentNodeName;
					addAttr -hidden true -k true -longName ( $argName+"b" ) -at "float" -parent $argName $currentNodeName;
					addAttr -hidden true -k true -longName ( $argName+"c" ) -at "float" -parent $argName $currentNodeName;
					int $k = 0;
					for ( ; $k<$size; $k++ )
					{
						vector $v = $argDefaultV[$k];
						setAttr  ( $currentNodeName + "." + $argName + "[" + $k + "]" ) -type "float3" ($v.x) ($v.y) ($v.z);
					}
				}
				else
				{
					// simple color
					$argDefaultV[0] = liquidSlDefaultToVector( $paramDefault );
					vector $v = $argDefaultV[0];
					addAttr -hidden true -k true -longName $argName -at "float3" -usedAsColor $currentNodeName;
					addAttr -hidden true -k true -longName ( $argName + "a" ) -at "float" -parent $argName $currentNodeName;
					addAttr -hidden true -k true -longName ( $argName + "b" ) -at "float" -parent $argName $currentNodeName;
					addAttr -hidden true -k true -longName ( $argName + "c" ) -at "float" -parent $argName $currentNodeName;
					setAttr  ( $currentNodeName + "." + $argName ) -type "float3" ($v.x) ($v.y) ($v.z);
				}
				break;
			case "point":
			case "vector":
			case "normal":
				if ( $argArrayLen > 0 )
				{
					$argDefaultV = liquidSlDefaultToVectorArray( $paramDefault );
					// point, vector, normal array
					int $size = size($argDefaultV);
					liqDebug("[1]addAttr -hidden true -k true -ln "+$argName+" -at double3-multi "+$currentNodeName);
					addAttr -hidden true -k true -longName $argName -at "double3"-multi $currentNodeName;
					addAttr -hidden true -k true -longName ( $argName+"a" ) -at "double" -parent $argName $currentNodeName;
					addAttr -hidden true -k true -longName ( $argName+"b" ) -at "double" -parent $argName $currentNodeName;
					addAttr -hidden true -k true -longName ( $argName+"c" ) -at "double" -parent $argName $currentNodeName;
					int $k;
					for ( $k = 0; $k<$size; $k++ )
					{
						vector $v = $argDefaultV[$k];
						setAttr  ( $currentNodeName + "." + $argName+"["+$k+"]" ) -type "double3" ($v.x) ($v.y) ($v.z);
					}
				}
				else
				{
					liqlog("vector/point/normal:$paramDefault="+$paramDefault);
					$argDefaultV[0] = liquidSlDefaultToVector( $paramDefault );
					liqlog("vector/point/normal:$argDefaultV[0]="+$argDefaultV[0]);
					vector $v = $argDefaultV[0];
						
			liqlog("addAttr -hidden true -k true -longName "+$argName+" -at \"double3\" "+$currentNodeName);
					addAttr -hidden true -k true -longName $argName -at "double3" $currentNodeName;
			liqlog("addAttr -hidden true -k true -longName "+$argName+"a"+" -at \"double\" -parent "+$argName+" "+$currentNodeName);
					addAttr -hidden true -k true -longName ( $argName + "a" ) -at "double" -parent $argName $currentNodeName;
			liqlog("addAttr -hidden true -k true -longName "+$argName+"b"+" -at \"double\" -parent "+$argName+" "+$currentNodeName);
					addAttr -hidden true -k true -longName ( $argName + "b" ) -at "double" -parent $argName $currentNodeName;
			liqlog("addAttr -hidden true -k true -longName "+$argName+"c"+" -at \"double\" -parent "+$argName+" "+$currentNodeName);
					addAttr -hidden true -k true -longName ( $argName + "c" ) -at "double" -parent $argName $currentNodeName;
			liqlog("setAttr "+$currentNodeName+"."+$argName+" -type double3 "+$v);
					setAttr  ( $currentNodeName + "." + $argName ) -type double3 ($v.x) ($v.y) ($v.z);
				}
				break;
			case "matrix":
				if( $argArrayLen > 0 ){
					liqError("matrix Array parameter type unsupported yet");
				}else{
					matrix $m[4][4] = liquidSlDefaultToMatrix( $paramDefault );
					liqlog("$paramDefault="+$paramDefault+", $argName="+$argName+", $currentNodeName="+$currentNodeName);
  					addAttr -hidden 0  -longName $argName -at "matrix" $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_00" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_01" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_02" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_03" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_10" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_11" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_12" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_13" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_20" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_21" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_22" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_23" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_30" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_31" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_32" ) -at "float" -parent $argName $currentNodeName;
// 					addAttr -hidden true -k true -longName ( $argName + "_33" ) -at "float" -parent $argName $currentNodeName;
					setAttr  ( $currentNodeName + "." + $argName ) -type "matrix" 
						($m[0][0]) ($m[0][1]) ($m[0][2]) ($m[0][3])
						($m[1][0]) ($m[1][1]) ($m[1][2]) ($m[1][3])
						($m[2][0]) ($m[2][1]) ($m[2][2]) ($m[2][3])
						($m[3][0]) ($m[3][1]) ($m[3][2]) ($m[3][3]);
				}
				break;
			default:
				error ("unkown parameter type "+$argType+"\n");
				break;				
			}
		}
	}
  liqPopIdent();
}


global proc liquidAttachParams ( string $currentNodeName )
{
  liqPushIdent();
  liqlog("liquidAttachParams("+$currentNodeName+")");
  int $i;
  string $shaderFileName = `getAttr ( $currentNodeName + ".rmanShaderLong" )`;
  string $nodeType = `liquidGetShaderNodeType $currentNodeName`;

	if ( $nodeType == "Surface" )
	{
		if (!`attributeQuery -n $currentNodeName -ex ( "color" ) `)
		{
			addAttr -longName "color" -usedAsColor -at float3 $currentNodeName;
			addAttr -defaultValue 0.5 -longName "red" -at "float" -parent "color" $currentNodeName;
			addAttr -defaultValue 0.5 -longName "green" -at "float" -parent "color" $currentNodeName;
			addAttr -defaultValue 0.5 -longName "blue" -at "float" -parent "color" $currentNodeName;
			setAttr ( $currentNodeName + ".color" ) -type float3 1.0 1.0 1.0;
		}
		else
		{
			setAttr ( $currentNodeName + ".color" ) -type float3 1.0 1.0 1.0;
		}
		if (!`attributeQuery -n $currentNodeName -ex ( "opacity" ) `)
		{
			addAttr -longName "opacity" -usedAsColor -at float3 $currentNodeName;
			addAttr -defaultValue 1.0 -longName "redO" -at "float" -parent "opacity" $currentNodeName;
			addAttr -defaultValue 1.0 -longName "greenO" -at "float" -parent "opacity" $currentNodeName;
			addAttr -defaultValue 1.0 -longName "blueO" -at "float" -parent "opacity" $currentNodeName;
			setAttr ( $currentNodeName + ".opacity" ) -type float3 1.0 1.0 1.0;
		}
		else
		{
			string $tmpAttrName = $currentNodeName + ".opacity";
			// Moritz: this is for compatibility with old scenes that
			// use a single "float" type opacity.
			if ( `getAttr -type $tmpAttrName` == "float" )
			{
				float $tmpVal = `getAttr $tmpAttrName`;
				deleteAttr $tmpAttrName;
				addAttr -longName "opacity" -usedAsColor -at float3 $currentNodeName;
				addAttr -longName "redO" -at "float" -parent "opacity" $currentNodeName;
				addAttr -longName "greenO" -at "float" -parent "opacity" $currentNodeName;
				addAttr -longName "blueO" -at "float" -parent "opacity" $currentNodeName;
				setAttr ( $currentNodeName + ".opacity" ) -type float3 $tmpVal $tmpVal $tmpVal;
			}
			else
			{
				setAttr $tmpAttrName -type float3 1.0 1.0 1.0;
			}
		}
	}
	
	if ( $nodeType == "Light" )
	{
		if (!`attributeQuery -n $currentNodeName -ex ( "shadowCamera" ) `)
		{
			addAttr -longName "shadowCamera" -dt "string" $currentNodeName;
		}
		if (!`attributeQuery -n $currentNodeName -ex ( "deepShadows" ) `)
		{
			addAttr -longName "deepShadows" -at bool $currentNodeName;
		}
		if (!`attributeQuery -n $currentNodeName -ex ( "pixelSamples" ) `)
		{
			addAttr -longName "pixelSamples" -at byte -minValue 1 -maxValue 16 -defaultValue 1 $currentNodeName;
		}
		if (!`attributeQuery -n $currentNodeName -ex ( "volumeInterpretation" ) `)
		{
			addAttr -longName "volumeInterpretation" -at byte -minValue 1 -maxValue 2 -defaultValue 1 $currentNodeName;
		}
	}

	if ( $nodeType == "Disp" || $nodeType == "Surface" )
	{
		if (!`attributeQuery -n $currentNodeName -ex ( "displacementBound" ) `)
		{
			addAttr -ln displacementBound -at "float" -dv 0.0 $currentNodeName;
		}
	}

	if ( $nodeType != "Light" && !objExists( ($currentNodeName+".outputInShadow") ) )
	{
		addAttr -ln outputInShadow -at "bool" -dv 0 $currentNodeName;
		if ( $nodeType == "Disp" )
		{
			setAttr ($currentNodeName+".outputInShadow") 1;
		}
	}

	liquidAttachShaderParams( $currentNodeName, $shaderFileName );
  liqPopIdent();
}
