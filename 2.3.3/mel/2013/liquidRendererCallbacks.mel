source xxliquidutility.mel;
source liquidAETemplate.mel;

////
//global proc liqHyperShadePanelBuildCreateMenu()
//{
//	liqPushIdent();
//	liqlog("liqHyperShadePanelBuildCreateMenu()");
//	
//	if (`pluginInfo -query -loaded (liquidGetPluginName())`)
//	{
//		liqHyperShadeCreateMenu_BuildMenu(liq_getRendererName());
//		menuItem -divider true;
//		liqHyperShadeCreateMenu_BuildMenu_subrenderer();
//		menuItem -divider true;
//	}
//	liqPopIdent();
//}
////
//global proc string[] liqBuildCreateSubMenu()
//{
//	liqPushIdent();
//	liqlog("liqBuildCreateSubMenu()");
//	
//	string $classification[];
//	
//	if( liquidGlobalsExists() )
//	{
//		$classification[`size($classification)`] = "rendernode/"+liq_getRendererName();
//
//		string $lrnd[] = liquidGatherLoadedSubRenderers();
//		for($rnd in $lrnd)
//		{
//			$classification[`size($classification)`] = "rendernode/"+$rnd;		
//		}
//	}
//	liqPopIdent();
//	return $classification;
//}
////
//global proc liqCreateRenderNodeSelectNodeCategoriesCallback(string $flag, string $treeLister)
//{
//	liqPushIdent();
//	liqlog("liqCreateRenderNodeSelectNodeCategoriesCallback("+$flag+", "+$treeLister+")");
//	
//	if($flag == "allWithliquidUp") {
//        treeLister -e -selectPath (liq_getRendererName()) $treeLister;
//    }
//	liqPopIdent();
//}
////
//global proc string[] liqRenderNodeClassificationCallback()
//{
//	liqPushIdent();
//	liqlog("liqRenderNodeClassificationCallback()");
//	
//	string $classification[];
//	
//	if( liquidGlobalsExists() )
//	{
//		$classification[`size($classification)`] = "rendernode/"+liq_getRendererName();
//
//		string $lrnd[] = liquidGatherLoadedSubRenderers();
//		for($rnd in $lrnd)
//		{
//			$classification[`size($classification)`] = "rendernode/"+$rnd;		
//		}
//	}
//	liqPopIdent();
//	return $classification;
//}
////
//global proc liqBuildRenderNodeTreeListerContentCallback(string $renderNodeTreeLister, string $postCommand, string $filterString)
//{
//	liqPushIdent();
//	liqlog("liqBuildRenderNodeTreeListerContentCallback("+$renderNodeTreeLister+","+$postCommand+", "+$filterString+")");
//
//	string $filterClassArray[]; $filterClassArray[ 0 ] = $filterString;
//	if (`pluginInfo -query -loaded (liquidGetPluginName())`)
//	{
//		//we have to source liquidCustomNodeUI.mel and liquidCustomNodeUI.res.mel
//		liqRenderNode_CreateTreeLister_Content($renderNodeTreeLister, $postCommand, $filterClassArray, liq_getRendererName());
//	}
//	//we have to source liquidRendererCallbacks.mel
//	liqRenderNode_CreateTreeLister_Content_subrenderer($renderNodeTreeLister, $postCommand, $filterClassArray);
//
//	liqPopIdent();
//}
////
//global proc int liqCreateRenderNodePluginChangeCallback(string $classification)
//{
//	liqPushIdent();
//	liqlog("liqCreateRenderNodePluginChangeCallback("+$classification+")");
//
//	int $processed = 0;
//	
//	if( liquidGlobalsExists() )
//	{
//		string $lrnd[] = liquidGatherLoadedSubRenderers();
//		for($rnd in $lrnd)
//		{
//			$cmd = "LIQUID_isLiquidClassification_"+$rnd+"(\""+$classification+"\")";
//			$processed = `eval $cmd`;
//
//			if( $processed == 1 )
//				return 1;
//		}
//	}
//	liqPopIdent();
//	return 0;
//
//	liqPopIdent();
//}
//
global proc liqLoadTemplate(string $node)
{
	liqPushIdent();
	liqlog("liqLoadTemplate("+$node+")");

	liqAETemplateCustomContentCallback($node);

	liqPopIdent();	
}
////
//global proc string liqProvideClassificationStringsForFilteredTreeListerCallback(string $currentFilterString)
//{
//	liqPushIdent();
//	liqlog("liqProvideClassificationStringsForFilteredTreeListerCallback("+$currentFilterString+")");
//
//	string $exclude[];
//
//	string $liquidClassfication = "rendernode/"+liq_getRendererName();
//	if( !startsWith($currentFilterString, $liquidClassfication) )
//	{
//		string $exclNodes[];
//		string $tmp[] = `listNodeTypes $liquidClassfication`;
//		$exclude = stringArrayCatenate($exclude, $tmp);
//		$exclude = stringArrayRemoveDuplicates($exclude);
//	}
//	
//	$exclude = LIQUID_excludeClassficationNodes_subrenderer($currentFilterString, $exclude);
//
//    liqPopIdent();
//	return stringArrayToString($exclude, " ");
//}
////
//global proc int liqNodeCanBeUsedAsMaterialCallback(string $nodeId, string $nodeOwner)
//{
//	liqPushIdent();
//	liqlog("liqNodeCanBeUsedAsMaterialCallback("+$nodeId+","+$nodeOwner+")");
//
//	int $ret = 1;
//	if($nodeOwner == liq_getRendererName())
//        $ret = 1;
//    else
//        $ret = 0;
//
//    liqPopIdent();
//	return $ret;
//}
global proc liqAddItemsToHypergraphNodePopupMenuCB(string $nodeName)
{
	liqPushIdent();
	liqlog("liqAddItemsToHypergraphNodePopupMenuCB("+$nodeName+")");

	buildHypergraphNodePopupMenuItems_liquid($nodeName);

    liqPopIdent();
	return;
}
//------------------------------------------------------
global proc liquidAddRendererCallbacks()
{
	liqPushIdent();
	liqlog("liquidAddRendererCallbacks()");
	
//	callbacks -addCallback "liqHyperShadePanelBuildCreateMenu"
//              -hook "hyperShadePanelBuildCreateMenu"
//              -owner (liq_getRendererName());
//
//	callbacks -addCallback "liqBuildCreateSubMenu"
//              -hook "hyperShadePanelBuildCreateSubMenu" 
//              -owner (liq_getRendererName());
//
//	callbacks -addCallback "liqCreateRenderNodeSelectNodeCategoriesCallback"
//              -hook "createRenderNodeSelectNodeCategories"
//              -owner (liq_getRendererName());
//
//// callbacks -addCallback "liqRenderNodeClassificationCallback"
////           -hook "addToRenderNodeTreeLister"
////           -owner (liq_getRendererName());
//	callbacks -addCallback "liqRenderNodeClassificationCallback"
//              -hook "renderNodeClassification"
//              -owner (liq_getRendererName());
//
//	callbacks -addCallback "liqBuildRenderNodeTreeListerContentCallback"
//              -hook "buildRenderNodeTreeListerContent"
//              -owner (liq_getRendererName());
//
//	callbacks -addCallback "liqCreateRenderNodePluginChangeCallback"
//              -hook "createRenderNodePluginChange"
//              -owner (liq_getRendererName());

	callbacks -addCallback "liqLoadTemplate"
              -hook "AETemplateCustomContent"
              -owner (liq_getRendererName());

//	callbacks -addCallback "liqProvideClassificationStringsForFilteredTreeListerCallback"
//              -hook "provideClassificationStringsForFilteredTreeLister"
//              -owner (liq_getRendererName());

//	callbacks -addCallback "liqNodeCanBeUsedAsMaterialCallback"
//              -hook "nodeCanBeUsedAsMaterial"
//              -owner (liq_getRendererName());

	callbacks -addCallback "liqAddItemsToHypergraphNodePopupMenuCB"
              -hook "addItemsToHypergraphNodePopupMenu"
              -owner (liq_getRendererName());

	liqPopIdent();
}
//
global proc liquidRemoveRendererCallbacks()
{
	liqPushIdent();
	liqlog("liquidRemoveRendererCallbacks()");
	
//	callbacks -removeCallback "liqHyperShadePanelBuildCreateMenuCallback"
//              -hook "hyperShadePanelBuildCreateMenu"
//              -owner (liq_getRendererName());
//
//	callbacks -removeCallback "liqHyperShadePanelBuildCreateSubMenuCallback"
//              -hook "hyperShadePanelBuildCreateSubMenu" 
//              -owner (liq_getRendererName());
//
//	callbacks -removeCallback "liqCreateRenderNodeSelectNodeCategoriesCallback"
//              -hook "createRenderNodeSelectNodeCategories"
//              -owner (liq_getRendererName());
//
//// callbacks -removeCallback "liqRenderNodeClassificationCallback"
////           -hook "addToRenderNodeTreeLister"
////           -owner (liq_getRendererName());
//	callbacks -removeCallback "liqRenderNodeClassificationCallback"
//              -hook "renderNodeClassification"
//              -owner (liq_getRendererName());
//
//	callbacks -removeCallback "liqBuildRenderNodeTreeListerContentCallback"
//              -hook "buildRenderNodeTreeListerContent"
//              -owner (liq_getRendererName());
//
//	callbacks -removeCallback "liqCreateRenderNodePluginChangeCallback"
//              -hook "createRenderNodePluginChange"
//              -owner (liq_getRendererName());

	callbacks -removeCallback "templates.loadLiquidTemplate"
              -hook "AETemplateCustomContent"
              -owner (liq_getRendererName());

//	callbacks -removeCallback "liqProvideClassificationStringsForFilteredTreeListerCallback"
//              -hook "provideClassificationStringsForFilteredTreeLister"
//              -owner (liq_getRendererName());

//	callbacks -removeCallback "liqNodeCanBeUsedAsMaterialCallback"
//              -hook "nodeCanBeUsedAsMaterial"
//              -owner (liq_getRendererName());

	callbacks -removeCallback "liqAddItemsToHypergraphNodePopupMenuCB"
				-hook "addItemsToHypergraphNodePopupMenu"
				-owner (liq_getRendererName());

	liqPopIdent();
}