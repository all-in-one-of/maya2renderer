/**
 * This procedure is called when the current renderer has changed from
 * Liquid renderer to some other renderer. It is called during the
 * process of copying common globals from Liquid to a new current renderer.
 * This procedure tells the caller whether the value of the specified
 * $global can be provided by the liquidGetCommonGlobalValue() procedure.
 * \returns  a boolean (int) value
 */
source xxliquidutility.mel;
//source liquidIpr.mel;

global  string $renderer[] = {
// 	"renderman"
// 	,"elvishray"
// 	,"luxrenderer"
// 	,"appleseed"
};

global proc int liquidmayaHasCommonGlobalValue( string $global )
{
  liqPushIdent();
	liqlog("liquidmayaHasCommonGlobalValue(...)");
  if ( !`liquidGlobalsExists` ) {
    string $sel[] = `ls -sl`;
    eval("liquidCreateGlobals();");
    select $sel;
  }

  int 	$isSupported = true;

  switch ($global)
  {
    case "animation":
		case "frameSequence":
		case "framePadding":
    case "width":
    case "height":
    case "pixelAspectRatio":
    case "deviceAspectRatio":
    case "preRenderMel":
    case "postRenderMel":
      $isSupported = true;
      break;
    default:
      $isSupported = false;
      break;
  }
  liqPopIdent();
  return $isSupported;
}


/**
 * This procedure is called when the current renderer has changed from Liquid
 * to another renderer. Returns the value of the common global specified by $global.
 * \returns   value of the specified common global, as a string.
 */
global proc string liquidmayaGetCommonGlobalValue( string $global )
{
  liqPushIdent();
	liqlog("liquidmayaGetCommonGlobalValue(...)");
  string 	$value;

  if ( !`liquidGlobalsExists` ) {
    string $sel[] = `ls -sl`;
    eval("liquidCreateGlobals();");
    select $sel;
  }

  switch ($global)
  {
    case "animation":
      $value = `getAttr liquidGlobals.doAnimation`;
      break;
    case "frameSequence":
      $value = `getAttr liquidGlobals.frameSequence`;
      break;
    case "framePadding":
      $value = `getAttr liquidGlobals.padding`;
      break;
    case "width":
      $value = `getAttr liquidGlobals.xResolution`;
      break;
    case "height":
      $value = `getAttr liquidGlobals.yResolution`;
      break;
    case "pixelAspectRatio":
      $value = `getAttr liquidGlobals.pixelAspectRatio`;
      break;
    case "deviceAspectRatio":
      float $x = `getAttr liquidGlobals.xResolution`;
      float $y = `getAttr liquidGlobals.yResolution`;
      $value = $x / $y;
      break;
    case "preRenderMel":
      $value = "";
      break;
    case "postRenderMel":
      $value = "";
      break;
    default:
      warning(
        "liquidmayaGetCommonGlobalValue() was asked for the value "
        + "of a global ("
        + $global
        + ") it does not support. "
        + "Modify liquidmayaHasCommonGlobalValue() to fix the problem\n");
      break;
  }

  liqPopIdent();
  return $value;
}


/**
 * This procedure is called when the current renderer has changed from
 * some other renderer to Liquid. It is called in the process of copying
 * common global values from the previous renderer to Liquid.
 * This procedure sets the value of the global specified by $global to the
 * value specified by $value.
 */
global proc liquidmayaSetCommonGlobalValue( string $global, string $value )
{
  liqPushIdent();
	liqlog("liquidmayaSetCommonGlobalValue(...)");

  int $intValue;
  float $floatValue;

  if ( !`liquidGlobalsExists` ) {
    string $sel[] = `ls -sl`;
    eval("liquidCreateGlobals();");
    select $sel;
  }

  switch ($global) {
    case "animation":
      $intValue = $value;
      setAttr liquidGlobals.doAnimation $intValue;
      break;
    case "frameSequence":
      setAttr liquidGlobals.frameSequence $value;
      break;
    case "framePadding":
      $intValue = $value;
      setAttr liquidGlobals.padding $intValue;
      break;
    case "width":
      $intValue = $value;
      setAttr liquidGlobals.xResolution $intValue;
      break;
    case "height":
      $intValue = $value;
      setAttr liquidGlobals.yResolution $intValue;
      break;
    case "pixelAspectRatio":
      $floatValue = $value;
      setAttr liquidGlobals.pixelAspectRatio $floatValue;
      break;
    case "deviceAspectRatio":
        // We do not store deviceAspectRatio.
        // Only pixelAspectRatio ratio is stored.
      break;
    case "preRenderMel":
      break;
    case "postRenderMel":
      break;
    default:
      warning(
        "liquidmayaSetCommonGlobalValue() was asked for the value "
        + "of a global ("
        + $global
        + ") it does not support. "
        + "Modify liquidmayaHasCommonGlobalValue() to fix the problem\n");
      break;
  }
  liqPopIdent();
}

/**
 *  This procedure is run everytime someone clicks the logo button in the
 *  unified render globals window.
 *  If LIQUIDHELP is set, it will open a web browser with to the address it contains.
 *  Otherwise, it will take you to the liquidWiki page.
 */
global proc liquidRenderLogoCallback()
{
  liqPushIdent();
	liqlog("liquidRenderLogoCallback()");
  string $url = `getenv "LIQUIDHELP"`;
  if ( $url == "" ) $url = "http://liquidmaya.sourceforge.net/liquidwiki/";
  evalDeferred ("showHelp -absolute \""+$url+"\"" );

  liqPopIdent();
}

global proc registerLiquidRenderer()
{
  liqPushIdent();
	liqlog("registerLiquidRenderer()");
  //eval "source createMayaSoftwareCommonGlobalsTab.mel";
  eval("source liquidIpr.mel");

  if ( !`renderer -q -ex liquid` ) 
  {
    string $icon = ( liquidGetHome() + "/icons/liquidIcon2.xpm" );

	float $version = getApplicationVersionAsFloat();
	switch( $version )
	{
	case 1.0:
	case 1.5:
	case 2.0:
	case 2.5:
	case 3.0:
	case 4.0:
	case 4.5:
	case 5.0:
	case 6.0:
	case 6.5:
	case 7.0:
	case 7.01:
		eval (
		"renderer  -rendererUIName                      \"Liquid\" "                          +
				  "-renderProcedure                     \"liquidmayaRender\" "                +
				  "-commandRenderProcedure              \"liquidmayaCmdlineRender\" "         +
				  "-batchRenderProcedure                \"liquidmayaBatchRender\" "           +
				  "-renderRegionProcedure               \"liquidmayaRenderRegion\" "          +
				  "-hasCommonGlobalValueProcedure       \"liquidmayaHasCommonGlobalValue\" "  +
				  "-getCommonGlobalValueProcedure       \"liquidmayaGetCommonGlobalValue\" "  +
				  "-setCommonGlobalValueProcedure       \"liquidmayaSetCommonGlobalValue\" "  +
				  "-logoImageName                       \"" + $icon + "\" "                   +
				  "-logoCallbackProcedure               \"liquidRenderLogoCallback\" "        +
				  "liquid;");
		break;
	case 8.0:
	case 8.5:
	case 2008.0:
		eval  (
		"renderer  -rendererUIName                        \"Liquid\" "                    +
				  "-addGlobalsNode                        \"liquidGlobals\" "             +
				  "-renderProcedure                       \"liquidmayaRender\" "          +
				  "-commandRenderProcedure                \"liquidmayaCmdlineRender\" "   +
				  "-batchRenderProcedure                  \"liquidmayaBatchRender\" "     +
				  "-batchRenderOptionsProcedure           \"liquidmayaBatchRenderOptions\" "+
				  "-renderRegionProcedure                 \"liquidmayaRenderRegion\" "    +
				  "-logoImageName                         \"" + $icon + "\" "             +
				  "-logoCallbackProcedure                 \"liquidRenderLogoCallback\" "  +
				  "liquid;");
		break;
	case 2009.0:
	case 2012.0:
		eval  (
		"renderer  -rendererUIName                        \"Liquid\" "                    +
				  "-addGlobalsNode                        \"liquidGlobals\" "             +
				  "-renderProcedure                       \"liquidmayaRender\" "          +
				  "-renderDiagnosticsProcedure			  \"liquidDiagnostic\" "		  +
				  "-commandRenderProcedure                \"liquidmayaCmdlineRender\" "   +
				  "-batchRenderProcedure                  \"liquidmayaBatchRender\" "     +
				  "-batchRenderOptionsProcedure           \"liquidmayaBatchRenderOptions\" "      +
				  "-batchRenderOptionsStringProcedure     \"liquidmayaBatchRenderOptionsString\" "+//if not setted, it will be rendered in mayasoftware mode.
				  "-cancelBatchRenderProcedure			  \"batchRender\" "					+
				  "-showBatchRenderProcedure			  \"batchRender -showImage true\" "	+
				  "-showRenderLogProcedure				  \"liquidShowRenderLog\" "			+
				  "-showBatchRenderLogProcedure		      \"liquidShowBatchRenderLog\" "	+

				  "-renderRegionProcedure                 \"liquidmayaRenderRegion\" "    +
				  "-logoImageName                         \"" + $icon + "\" "             +
				  "-logoCallbackProcedure                 \"liquidRenderLogoCallback\" "  +
					//Ipr
					"-changeIprRegionProcedure				\"liquidmayaChangeIprRegion\" "			+
					"-iprOptionsMenuLabel					\"liquidmaya IPR Tuning Options\" "		+
					"-iprOptionsProcedure					\"liquidmayaIprOptions\" "				+
					"-iprOptionsSubMenuProcedure			\"liquidmayaIprOptionsSubMenu\" "		+
					"-iprRenderProcedure					\"liquidmayaIprRender\" "				+
					"-iprRenderSubMenuProcedure				\"liquidmayaIprRenderSubMenu\" "		+
					"-isRunningIprProcedure					\"liquidmayaIsRunningIpr\" "			+
					"-startIprRenderProcedure				\"liquidmayaStartIprRender\" "			+
					"-stopIprRenderProcedure				\"liquidmayaStopIprRender\" "			+
					"-refreshIprRenderProcedure				\"liquidmayaRefreshIprImage\" "			+
					"-pauseIprRenderProcedure				\"liquidmayaPauseIprRender\" "			+
					
					"-textureBakingProcedure				\"liquidBakeToTexture\" "				+
					"-polyPrelightProcedure					\"liquidBakeToVertices\" "				+
					"-renderingEditorsSubMenuProcedure		\"liquidRenderingEditorsSubMenu\" "		+

				  "liquid;");
		break;
	default:
		error ("Liquid is not tested for Maya "+$version+"\n");
	}

	evalDeferred liquidAddTabs;

	renderer -edit -addGlobalsNode "liquidGlobals" liquid;
  }

  // can't override maya original mayaBatchRenderProcedure(). Strange!
  // so, we run LIQUID_ROOT\mel\replace_mayaBatchRenderProcedure.bat manully 
  // to replace MAYA_ROOT\scripts\other\mayaBatchRenderProcedure.mel
  //replaceMayaBatchRenderProcedure(1);
  updateRendererUI();

  liqPopIdent();
}

global proc liquidAddTabs()
{
  liqPushIdent();
	liqlog("liquidAddTabs()");
  if ( `renderer -exists "liquid"`)
  {
    renderer -edit
             -addGlobalsTab "Common"
                            "createMayaSoftwareCommonGlobalsTab"
                            "updateMayaSoftwareCommonGlobalsTab"
             liquid;
          
    renderer -edit
             -addGlobalsTab "Liquid"
                            "liquidCreateGlobalsTab"
                            "liquidUpdateMayaGlobals"
             liquid;
  }
  liqPopIdent();
}

global proc unregisterLiquidRenderer()
{
  liqPushIdent();
	liqlog("unregisterLiquidRenderer(...)");

  if ( `renderer -q -ex liquid` ) renderer -unregisterRenderer liquid;
  
  //replaceMayaBatchRenderProcedure(0);
  updateRendererUI();
  liqPopIdent();
}

global proc registerLiquidSubRenderer(string $rnd)
{
	liqPushIdent();
	liqlog("registerLiquidSubRenderer("+$rnd+")");
	global  string $renderer[];
  
	int $found = stringArrayContains($rnd, $renderer);
	if( $found == 0 )//not exist
	{
		int $i = size($renderer);
		$renderer[$i] = $rnd;//append value
	}

	string $file = getenv("LIQUID_ROOT")+"/2.3.3/src/"+$rnd+"/mel/usersetup.mel";
	eval("source \""+$file+"\"");

	liqPopIdent();
}
global proc unregisterLiquidSubRenderer(string $rnd)
{
	liqPushIdent();
	liqlog("unregisterLiquidSubRenderer("+$rnd+")");
	global  string $renderer[];

	int $found = stringArrayContains($rnd, $renderer);
	if( $found == 1 )//already exist
	{
		int $length = size($renderer);
		int $i;
		for($i = 0; $i<$length; $i++)
		{
			if($renderer[$i] == $rnd)
			{
				stringArrayRemoveAtIndex($i, $renderer);
			}
		}
	}
 
	liqPopIdent();
}

