source xxliquidutility.mel;
source AEliquidSurfaceTemplate.mel;
source AEliquidDisplacementTemplate.mel;
source AEliquidVolumeTemplate.mel;
source AEliquidLightTemplate.mel;
source AEliquidShaderTemplate.mel;
source AEliquidRibBoxTemplate.mel;
source AEliquidCoShaderTemplate.mel;
source AEliquidCamera.mel;
source AEliquidInstanceFlags.mel;
source AEliquidSubdivisionSurfaceShape.mel;

//
global proc liquidAETemplate_pointLight( string $node )
{
  liqPushIdent();
  liqAElog("liquidAETemplate_pointLight("+$node+")");

	//liquid
	liquidAETemplate_pointLight_liquid($node);

	//string $renderer[] = liquidGatherValidSubRenderers();
	string $renderer[] = liquidGatherLoadedSubRenderers();
	for($vrnd in $renderer)
	{
		string $cmd;
		$cmd = "liquidAETemplate_pointLight_"+$vrnd+"(\""+$node+"\")";
		eval $cmd;
	}

  liqPopIdent();
}
//
global proc liquidAETemplate_areaLight( string $node )
{
  liqPushIdent();
  liqAElog("liquidAETemplate_areaLight("+$node+")");

	//liquid
	liquidAETemplate_areaLight_liquid($node);

	//string $renderer[] = liquidGatherValidSubRenderers();
	string $renderer[] = liquidGatherLoadedSubRenderers();
	for($vrnd in $renderer)
	{
		string $cmd;
		$cmd = "liquidAETemplate_areaLight_"+$vrnd+"(\""+$node+"\")";
		eval $cmd;
	}

  liqPopIdent();
}
//
global proc liquidAETemplate_directionalLight( string $node )
{
  liqPushIdent();
  liqAElog("liquidAETemplate_directionalLight("+$node+")");

	//liquid
	liquidAETemplate_directionalLight_liquid($node);

	//string $renderer[] = liquidGatherValidSubRenderers();
	string $renderer[] = liquidGatherLoadedSubRenderers();
	for($vrnd in $renderer)
	{
		string $cmd;
		$cmd = "liquidAETemplate_directionalLight_"+$vrnd+"(\""+$node+"\")";
		eval $cmd;
	}

  liqPopIdent();
}
//
global proc liquidAETemplate_spotLight( string $node )
{
  liqPushIdent();
  liqAElog("liquidAETemplate_spotLight("+$node+")");

	//liquid
	liquidAETemplate_spotLight_liquid($node);

	//string $renderer[] = liquidGatherValidSubRenderers();
	string $renderer[] = liquidGatherLoadedSubRenderers();
	for($vrnd in $renderer)
	{
		string $cmd;
		$cmd = "liquidAETemplate_spotLight_"+$vrnd+"(\""+$node+"\")";
		eval $cmd;
	}

  liqPopIdent();
}
//
global proc liquidAETemplate_volumeLight( string $node )
{
  liqPushIdent();
  liqAElog("liquidAETemplate_volumeLight("+$node+")");

	//liquid
	liquidAETemplate_volumeLight_liquid($node);

	//string $renderer[] = liquidGatherValidSubRenderers();
	string $renderer[] = liquidGatherLoadedSubRenderers();
	for($vrnd in $renderer)
	{
		string $cmd;
		$cmd = "liquidAETemplate_volumeLight_"+$vrnd+"(\""+$node+"\")";
		eval $cmd;
	}

  liqPopIdent();
}
//
global proc liquidAETemplate_shadingEngine( string $node )
{
  liqPushIdent();
  liqAElog("liquidAETemplate_shadingEngine("+$node+")");

	liquidAETemplate_shadingEngine_liquid($node);

	string $renderer[] = liquidGatherLoadedSubRenderers();
	for($vrnd in $renderer)
	{
		string $cmd;
		$cmd = "liquidAETemplate_shadingEngine_"+$vrnd+"(\""+$node+"\")";
		eval $cmd;
	}

  liqPopIdent();
}
//
global proc liquidAETemplate_camera( string $node )
{
  liqPushIdent();
  liqAElog("liquidAETemplate_camera("+$node+")");

	liquidAETemplate_camera_liquid($node);

	string $renderer[] = liquidGatherLoadedSubRenderers();
	for($vrnd in $renderer)
	{
		string $cmd;
		$cmd = "liquidAETemplate_camera_"+$vrnd+"(\""+$node+"\")";
		eval $cmd;
	}

  liqPopIdent();
}
//
global proc liquidAETemplate_transform( string $node )
{
  liqPushIdent();
  liqAElog("liquidAETemplate_transform("+$node+")");

	liquidAETemplate_transform_liquid($node);

	string $renderer[] = liquidGatherLoadedSubRenderers();
	for($vrnd in $renderer)
	{
		string $cmd;
		$cmd = "liquidAETemplate_transform_"+$vrnd+"(\""+$node+"\")";
		eval $cmd;
	}

  liqPopIdent();
}
//
global proc liqAETemplateCustomContentCallback(string $nodeName)
{
	liqPushIdent();
	liqlog("liqAETemplateCustomContentCallback("+$nodeName+")");
	
	//editorTemplate -beginScrollLayout;
	editorTemplate -beginLayout ("Liquid") -collapse 1;

		// include the correct code based on the node type
		string $type = `nodeType $nodeName`;
        
		switch ($type)
		{
			//liquid shader nodes
			case "liquidSurface":
				AEliquidSurfaceTemplate($nodeName);
				break;
			case "liquidDisplacement":
				AEliquidDisplacementTemplate($nodeName);
				break;
			case "liquidVolume":
				AEliquidVolumeTemplate($nodeName);
				break;
			case "liquidLight":
				AEliquidLightTemplate($nodeName);
				break;
			case "liquidShader":
				AEliquidShaderTemplate($nodeName);
				break;
			case "liquidCoShader":
				AEliquidCoShaderTemplate($nodeName);
				break;
			case "liquidRibBox":
				AEliquidRibBoxTemplate($nodeName);
				break;

			//
			case "pointLight":
				liquidAETemplate_pointLight($nodeName);
				break;
			case "areaLight":
				liquidAETemplate_areaLight($nodeName);
				break;
			case "directionalLight":
				liquidAETemplate_directionalLight($nodeName);
				break;
			case "spotLight":
				liquidAETemplate_spotLight($nodeName);
				break;
			case "volumeLight":
				liquidAETemplate_volumeLight($nodeName);
				break;
			//case "file":
			//    AEmentalrayFile $nodeName;
			//    break;
			//case "anisotropic":
			//case "blinn":
			//case "lambert":
			//case "oceanShader":
			//case "hairTubeShader":
			//case "phong":
			//case "phongE":
			//case "rampShader":
			//case "useBackground":
			//case "layeredShader":
			//case "oceanShader":
			//case "shadingMap":
			//case "surfaceShader":
			//    AEmentalrayPhotonAttrs $nodeName;
			//    break;
			case "shadingEngine":
			    liquidAETemplate_shadingEngine($nodeName);
			    break;
			case "camera":
				liquidAETemplate_camera($nodeName);
				break;
			case "transform":
				liquidAETemplate_transform($nodeName);
				break;
			//case "mesh":
			//case "nurbsSurface":
			//case "fluidShape":
			//case "hairSystem":
			//case "nParticle":
			//case "particle":
			//case "FurFeedback":
			//    AEmentalrayRenderStats $nodeName;
			//    break;
			case "subdiv":
				AEliquidSubdivisionSurfaceShape $nodeName;
				break;
	        //case "renderLayer":
	        //    AEmentalrayRenderLayer $nodeName;
	        //    break;
	        //case "FurGlobals":
	        //    AEmentalrayFur $nodeName;
	        //    break;
	        //case "FurDescription":
	        //    AEmentalrayFurDescription $nodeName;
	        //    break;
			//case "pfxHair":
			//	AEmentalrayPfxHair $nodeName;
			//	break;
			default:
				liqlog($nodeName+"["+$type+"] is not supported.");
		}
	editorTemplate -endLayout;//AECallbacksTest
	//editorTemplate -endScrollLayout;

	liqPopIdent();	
}