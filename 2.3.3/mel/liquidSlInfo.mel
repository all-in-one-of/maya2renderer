//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the
// "License"); you may not use this file except in compliance with the License. You may
// obtain a copy of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific
// language governing rights and limitations under the License.
//
// The Original Code is the Liquid Rendering Toolkit.
//
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved.
//
// Contributor(s): Berj Bannayan.
//
//
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:    July 8, 2003
//
//  Procedure Names:
//      liquidSlSetShader
//      liquidSlShaderType
//      liquidSlNumParams
//      liquidSlParamName
//      liquidSlParamType
//      liquidSlParamArraySize
//      liquidSlParamDefault
//      liquidSlDefaultToString
//      liquidSlDefaultToStringArray
//      liquidSlDefaultToFloat
//      liquidSlDefaultToFloatArray
//      liquidSlDefaultToVector
//      liquidSlDefaultToVectorArray
//      liquidSlDefaultToMatrix
//      liquidSlDefaultToMatrixArray
//      liquidSlInfo
//
//  Description:
//      Procedures for querying information from RenderMan
//      shaders compiled for various renderers.  See the
//      liquidSlInfo procedure for example usage.
//
//
source xxliquidutility.mel;
// Some useful type checking and conversion procedures
// some checks on strings, messy as Maya doesn't support ? in regexes

// locals

// Empty is considered valid
global proc int isValidIntPart(string $part)
{
	liqPushIdent();
	liqlog("isValidIntPart("+$part+")");

	string $tmp = match("^[\-+0-9][0-9]*", $part);
	if ( size($tmp) == size($part) ) {
		liqPopIdent();
		return 1;
	}

	liqPopIdent();
	return 0;
}

// Non empty for non degenerate forms, like in -.04
// which still make a valid float as long as float part is non empty
proc int isNonEmptyIntPart(string $part)
{	
	liqPushIdent();
	liqlog("isNonEmptyIntPart("+$part+")");
	int $ret = ( isValidIntPart($part) && size(match("[0-9]", $part)) );
	
	liqPopIdent();
	return $ret;
}

// Empty is considered valid
proc int isValidFloatPart (string $part)
{	
	liqPushIdent();
	liqlog("isNonEmptyIntPart("+$part+")");

	string $tmp = match("^[\.][0-9]*", $part);
	if ( size($tmp) == size($part) ) {
		liqPopIdent();
		return 1;
	}
	liqPopIdent();	
	return 0;
}

// Non empty for non degenerate forms, like in 4.
// which still make a valid float as long as int part is non empty
proc int isNonEmptyFloatPart(string $part)
{
	liqPushIdent();
	liqlog("isNonEmptyFloatPart("+$part+")");

	int $ret = ( isValidFloatPart($part) && size(match("[0-9]", $part)) );
	
	liqPopIdent();
	return $ret;
}

// Here the degenerate forms of exponents like e+ are allways invalid
proc int isNonEmptyExpPart (string $part)
{
	liqPushIdent();
	liqlog("isNonEmptyExpPart("+$part+")");

	string $tmp = match("^e[\-+0-9][0-9]*", $part);
	if ( size($tmp) == size($part) ) {
		if ( size(match("[0-9]", $tmp)) ) {
			liqPopIdent();
			return 1;
		}
	}
	liqPopIdent();	
	return 0;
}

// Empty is considered valid
proc int isValidExpPart (string $part)
{
	liqPushIdent();
	liqlog("isNonEmptyExpPart("+$part+")");

	int $ret = ( ($part == "") || isNonEmptyExpPart($part) );

	liqPopIdent();	
	return $ret;
}

// globals

global proc int liquidSlValidFloatString (string $theString)
{
  liqPushIdent();
	liqlog("liquidSlValidFloatString(...)");
	string $tmp = $theString;
	string $intPart = `match "^[^e\.]*" $tmp`;
	if ( isValidIntPart($intPart) ) {
		catchQuiet($tmp  = `substring $tmp (size($intPart)+1) (size($tmp))`);
		$floatPart = `match "^[\.][0-9]*" $tmp`;
		$expPart = `match "e[\-+0-9][0-9]*$" $tmp`;		 
		if ( (size($floatPart) + size($expPart)) == size($tmp) ) {
			if ( 	( isNonEmptyIntPart($intPart) || isNonEmptyFloatPart($floatPart) )
			 		&&	isValidExpPart($expPart)	) {	
				float $f;
				if ( !catchQuiet($f = float($theString)) ) {
					string $s = $f;
					if ( !size(match("inf", $s)) ) {
						liqPopIdent();
						return 1;
					}
				}
			}		
		}
	}
	
	liqPopIdent();
	return 0;
}

global proc int liquidSlValidIntString (string $theString)
{
  liqPushIdent();
	liqlog("liquidSlValidIntString(...)");
	if (liquidSlValidFloatString($theString)) {
		float $f = $theString;
		int $i = $f;
		if ($i == $f) {
			liqPopIdent();
			return 1;
		}
	}
	
	liqPopIdent();
	return 0;
}

global proc int liquidSlValidFloat3String (string $theString)
{
  liqPushIdent();
	liqlog("liquidSlValidFloat3String(...)");
	string $tmp = substitute("^<<", $theString, "");
	$tmp = substitute(">>$", $tmp, "");
	string $v[];
	if (tokenize($tmp,", \t",$v) == 3) {
		if (	liquidSlValidFloatString(strip($v[0]))
			&&	liquidSlValidFloatString(strip($v[1]))
			&&	liquidSlValidFloatString(strip($v[2]))	) {
			liqPopIdent();
			return 1;
		}
	}
	liqPopIdent();
	return 0;
}

global proc int liquidSlValidMatrixString (string $theString)
{
  liqPushIdent();
	liqlog("liquidSlValidMatrixString(...)");
	// string $tmp = substitute("^<<", $theString, "");
	// $tmp = substitute(">>$", $tmp, "");
	string $tmp = $theString;
	int $success = false;
	string $v[];
	if (`tokenize $theString ", \t" $v` == 16) {
		$success = true;
		for ($i=0; $i<16; $i++) {
			$success *= liquidSlValidFloatString(strip($v[$i]));
		}
	}
	
	liqPopIdent();
	return $success;
}

// some conversion procs

// Maya accepts casting string to vector in form "<<x, y, z>>"
// or "x y z" but there is a bug with "(x, y, z)", careful!
global proc vector liquidSlStringToVector (string $theString)
{
  liqPushIdent();
	liqlog("liquidSlStringToVector(...)");
	vector $theVector = <<0.0, 0.0, 0.0>>;
	int $success = false;
	
	string $v[];
	if (`tokenize $theString ", \t" $v` == 3)
	{
		if (`liquidSlValidFloatString $v[0]` && `liquidSlValidFloatString $v[1]` && `liquidSlValidFloatString $v[2]`)
		{
			$theVector = <<(float($v[0])), (float($v[1])), (float($v[2]))>>;
			$success = true;
		}
	}
	
	if (!$success)
		warning ("[liquidSlStringToFloatMatrix] converting string "+$theString+" to null vector <<0, 0, 0>>");
		
	liqPopIdent();
	return $theVector;
}


global proc float[] liquidSlStringToFloatMatrix (string $theString)
{
  liqPushIdent();
	liqlog("liquidSlStringToFloatMatrix(...)");
	float $fMatrix[16];
	int $success = false;

	// string $tmp = substitute("^<<", $theString, "");
	// $tmp = substitute(">>$", $tmp, "");
	string $tmp = $theString;
	string $v[];
	if (`tokenize $theString ", \t" $v` == 16) {	
		$success = true;
		for ($i=0; $i<16; $i++) {
			if ( liquidSlFloatString($v[$i]) ) {
				$fMatrix[$i] = float($v[$i]);
			} else {	
				$success = false;
				break;
			}
		}
	}
		
	if (!$success) {
		warning ("[liquidSlStringToFloatMatrix] converting string "+$theString+" to null matrix failed");
	}
	
	liqPopIdent();
	return $fMatrix;
}

global proc matrix liquidSlStringToMatrix (string $theString)
{
	liqPushIdent();
	liqlog("liquidSlStringToMatrix(...)");
	
	matrix $ret[4][4];
	$ret = liquidSlFloatToMatrix44( liquidSlStringToFloatMatrix ($theString) );
 
	liqPopIdent();
	return $ret;

}

global proc string liquidSlfloatMatrixToString (float $fMatrix[])
{
  liqPushIdent();
	liqlog("liquidSlfloatMatrixToString(...)");
	string $s[16];
		
	for ($i=0; $i<16; $i++) {
		$s[$i] = string( $fMatrix[$i] );
	}
	
	string $ret = stringArrayToString($s, " ");

	liqPopIdent();
	return $ret;
}

global proc string liquidSlmatrixToString (matrix $matrix)
{
  liqPushIdent();
	liqlog("liquidSlmatrixToString(...)");

	string $ret = liquidSlfloatMatrixToString( liquidSlmatrix44ToFloat ($matrix));

	liqPopIdent();
	return $ret;
}

// Compares matrices

global proc int liquidSlEqualFloatMatrix (float $matrixA[], float $matrixB[])
{
	liqPushIdent();
	liqlog("liquidSlEqualFloatMatrix(...)");
	for ($i=0; $i<16; $i++) {
		if ($matrixA[$i] != $matrixB[$i]) {
			liqPopIdent();
			return 0;
		}
	}
	
	liqPopIdent();
	return 1;
}

global proc int liquidSlEqualMatrix (matrix $matrixA, matrix $matrixB)
{
	liqPushIdent();
	liqlog("liquidSlEqualMatrix(...)");

	int $ret = liquidSlEqualFloatMatrix(liquidSlmatrix44ToFloat ($matrixA), liquidSlmatrix44ToFloat ($matrixB));

	liqPopIdent();
	return $ret;
}

// To ensure we can build setAttr commands 
global proc int liquidSlConformStrings (string $type, string $strings[])
{
  liqPushIdent();
	liqlog("liquidSlConformStrings(...)");
	int $success = 1;
	string $result = "";
	int $id;
	int $ns = size($strings);
	
	switch ($type) {
		case "int":
			for ($id=0; $id<$ns; $id++) {
				if ( liquidSlValidIntString($strings[$id]) ) {
					int $i = $strings[$id];
					$strings[$id] = $i;
				} else {
					$success = 0;
					$strings[$id] = "0";
				}
			}
			break;	
		case "float":
			for ($id=0; $id<$ns; $id++) {
				if ( liquidSlValidFloatString($strings[$id]) ) {
					float $f = $strings[$id];
					$strings[$id] = $f;
					if ( !size(match("[e\.]", $strings[$id])) ) {
						$strings[$id] = ($strings[$id] + ".0");
					}
				} else {
					$success = 0;
					$strings[$id] = "0.0";
				}
			}
			break;			
		case "point":
		case "vector":
		case "normal":
		case "color":
			for ($id=0; $id<$ns; $id++) {
				if ( liquidSlValidFloat3String($strings[$id]) ) {
					vector $v = liquidSlStringToVector($strings[$id]);
					$strings[$id] = $v;
				} else {
					$success = 0;
					$strings[$id] = "0.0 0.0 0.0";
				}
			}
			break;
		case "shader":
		case "string":
			/*
			for ($id=0; $id<$ns; $id++) {
				if ( !size(match("^\"", $strings[$id])) ) {
					$strings[$id] = ("\""+$strings[$id]);
				}
				if ( !size(match("\"$", $strings[$id])) ) {
					$strings[$id] = ($strings[$id]+"\"");
				}
			}
			*/	
			break;
		case "matrix":
			for ($id=0; $id<$ns; $id++) {
				float $m[16];
				if ( liquidSlValidMatrixString($strings[$id]) ) {
					$m = liquidSlStringToFloatMatrix($strings[$id]);
					$strings[$id] = liquidSlfloatMatrixToString($m);
				} else {
					$success = 0;
					$strings[$id] = liquidSlfloatMatrixToString($m);
				}
			}	
			break;									
		default:
			error("[liquidSlConformStrings] unknown type: "+$type);
			break;
		}
		
	liqPopIdent();
	return $success;

}

global proc int liquidSlTypedStringEquivalent(string $type, string $stringA, string $stringB)
{
  liqPushIdent();
	liqlog("liquidSlTypedStringEquivalent(...)");
	switch ($type) {
		case "int":
			if ( liquidSlValidIntString($stringA) && liquidSlValidIntString($stringB) ) {
				int $a = $stringA;
				int $b = $stringB;
				int $ret = ($a == $b);
				liqPopIdent();
				return $ret;
			}
			break;	
		case "float":
			if ( liquidSlValidFloatString($stringA) && liquidSlValidFloatString($stringB) ) {
				float $a = $stringA;
				float $b = $stringB;
				int $ret = ($a == $b);
				liqPopIdent();
				return $ret;
			}
			break;			
		case "point":
		case "vector":
		case "normal":
		case "color":
			if ( liquidSlValidFloat3String($stringA) && liquidSlValidFloat3String($stringB) ) {
				vector $a = liquidSlStringToVector($stringA);
				vector $b = liquidSlStringToVector($stringB);
				int $ret = ($a == $b);
				liqPopIdent();
				return $ret;
			}
			break;	
		case "shader":
		case "string":
			// string $a = substitute("^\"", $stringA, "");
			// $a = substitute("\"$", $a, "");
			// string $b = substitute("^\"", $stringB, "");
			// $b = substitute("\"$", $b, "");	
			// return ($a == $b);
			int $ret = ($stringA == $stringB);
			liqPopIdent();
			return $ret;
			break;
		case "matrix":
			if ( liquidSlValidMatrixString($stringA) && liquidSlValidMatrixString($stringB) ) {
				matrix $a[4][4] = liquidSlDefaultToMatrix($stringA);
				matrix $b[4][4] = liquidSlDefaultToMatrix($stringB);
				int $ret = ($a == $b);
				liqPopIdent();
				return $ret;
			}
			break;									
		default:
			error("[liquidSlConformStrings] unknown type: "+$type);
			break;
		}
	
	liqPopIdent();
	return 0;
}


global proc liquidSlSetShader( string $shaderFile )
{
  liqPushIdent();
	liqlog("liquidSlSetShader(...)");
    global string $gLiquidSlShaderFile;
    global string $gLiquidSLifFile[];

    if ( $shaderFile == $gLiquidSlShaderFile ) {
      //trace ("     - shader already parsed >> EXIT");
	  liqPopIdent();
      return;
    }else {
      $gLiquidSlShaderFile = $shaderFile;
      clear $gLiquidSLifFile;
    }

    string $ext = `substitute "^.*\\." $shaderFile ""`;
    switch ( $ext )
    {
      case "slo":
        // prman shader
        liquidSlParseSlo( $shaderFile );
        break;
      case "sdl":
        // 3delight shader
        liquidSlParseSdl( $shaderFile );
        break;
      case "slx":
        // aqsis shader
        liquidSlParseSlx( $shaderFile );
        break;
      case "sdr":
        // pixie shader
        liquidSlParseSdr( $shaderFile );
        break;
      case "slb":
        // air shader
        liquidSlParseSlb( $shaderFile );
        break;
      default:
        error( "[liquidSlSetShader] unknown shader extension: " + $ext );
    }

    liquidSlParseLif( $shaderFile );
  liqPopIdent();
}


global proc liquidSlSetShaderNode( string $node )
{
  liqPushIdent();
	liqlog("liquidSlSetShaderNode(...)");
    global string	$gLiquidSlShaderFile;
    global string	$gLiquidSLifFile[];

    global string	$gLiquidSlShaderFile;
    global string	$gLiquidSlShaderName;
    global string	$gLiquidSlShaderType;
	global int		$gLiquidSlNumShaderMethods;
	global string	$gLiquidSlShaderMethods[];
    global int		$gLiquidSlNumParams;
    global string	$gLiquidSlParamNames[];
    global int		$gLiquidSlParamIsOutput[];
    global string	$gLiquidSlParamTypes[];
    global string	$gLiquidSlParamDefaults[];
    global int		$gLiquidSlParamArraySizes[];

    global string	$gLiquidSLifFile[];
    global int		$gLiquidSlParamGuiOrder[];
    global string	$gLiquidSlParamGuiLabel[];
    global string	$gLiquidSlParamGuiDescription[];
    global string	$gLiquidSlParamGuiType[];
    global string	$gLiquidSlParamGuiRange[];
    global string	$gLiquidSlLifShaderDescription;
    global int		$gLiquidSlLifGuiSize;

    $gLiquidSlShaderFile      = `getAttr ($node+".rmanShaderLong")`;
    $gLiquidSlShaderName      =  basenameEx( $gLiquidSlShaderFile );
    $gLiquidSlShaderType      =  tolower( substitute( "liquid", nodeType( $node ), "" ) );
	// $gLiquidSlShaderMethods   = `getAttr ($node+".rmanMethods")`;
    // $gLiquidSlNumShaderMethods       =  size( $gLiquidSlShaderMethods );
    $gLiquidSlParamNames      = `getAttr ($node+".rmanParams")`;
    $gLiquidSlNumParams       =  size( $gLiquidSlParamNames );
    $gLiquidSlParamTypes      = `getAttr ($node+".rmanTypes")`;
    $gLiquidSlParamDefaults   = `getAttr ($node+".rmanDefaults")`;
    $gLiquidSlParamArraySizes = `getAttr ($node+".rmanArraySizes")`;

  liqPopIdent();
}

global proc liquidSlInfoReset()
{
  liqPushIdent();
	liqlog("liquidSlInfoReset(...)");
	global string	$gLiquidSlShaderFile;
	global string	$gLiquidSlShaderName;
	global string	$gLiquidSlShaderType;
	global int		$gLiquidSlNumMethods;
	global string	$gLiquidSlMethods[];
	global int		$gLiquidSlNumParams;
	global string	$gLiquidSlParamNames[];
	global int		$gLiquidSlParamIsOutput[];
 	global string	$gLiquidSlParamTypes[];
 	global string	$gLiquidSlParamDefaults[];
 	global int		$gLiquidSlParamArraySizes[];

 	global string	$gLiquidSLifFile[];
 	global int		$gLiquidSlParamGuiOrder[];
 	global string	$gLiquidSlParamGuiLabel[];
 	global string	$gLiquidSlParamGuiDescription[];
	global string	$gLiquidSlParamGuiType[];
	global string	$gLiquidSlParamGuiRange[];
	global string	$gLiquidSlLifShaderDescription;
	global int		$gLiquidSlLifGuiSize;
	global int		$gLiquidSlLifExists;

  clear $gLiquidSLifFile;
  clear $gLiquidSlParamGuiOrder;
  clear $gLiquidSlParamGuiLabel;
  clear $gLiquidSlParamGuiDescription;
  clear $gLiquidSlParamGuiType;
  clear $gLiquidSlParamGuiRange;
  clear $gLiquidSlParamIsOutput;

  $gLiquidSlShaderName = "";
  $gLiquidSlShaderFile = "";
  $gLiquidSlLifExists = 0;
  $gLiquidSlLifGuiSize = 0;
  $gLiquidSlLifShaderDescription = "";

  liqPopIdent();
}


global proc string liquidSlShaderName()
{
  liqPushIdent();
	liqlog("liquidSlShaderName(...)");
    global string $gLiquidSlShaderName;
    if ( $gLiquidSlShaderName == "" )
        error( "[liquidSlShaderName] no shader set" );
  liqPopIdent();
    return $gLiquidSlShaderName;
}

global proc string liquidSlShaderType()
{
  liqPushIdent();
	liqlog("liquidSlShaderType(...)");
    global string $gLiquidSlShaderType;
    if ( $gLiquidSlShaderType == "" )
        error( "[liquidSlShaderType] no shader set" );
  liqPopIdent();
    return $gLiquidSlShaderType;
}

global proc int liquidSlNumMethods()
{
  liqPushIdent();
	liqlog("liquidSlNumMethods(...)");
    global int $gLiquidSlNumMethods;
    if ( $gLiquidSlNumMethods == -1 )
        error( "[liquidSlNumMethods] no shader set" );
  liqPopIdent();
    return $gLiquidSlNumMethods;
}

global proc string[] liquidSlMethods()
{
  liqPushIdent();
	liqlog("liquidSlMethods(...)");
    global int $gLiquidSlNumMethods;
    if ( $gLiquidSlNumMethods == -1 )
        error( "[liquidSlMethods] no shader set" );
	global string	$gLiquidSlMethods[];
  liqPopIdent();
    return $gLiquidSlMethods;
}

global proc string liquidSlMethodName( int $index )
{
  liqPushIdent();
	liqlog("liquidSlMethodName(...)");
    global int $gLiquidSlNumMethods;
    if ( $gLiquidSlNumMethods == -1 )
        error( "[liquidSlMethodName] no shader set" );

    if ( $index < 0 ||
         $index >= $gLiquidSlNumMethods )
        error( "[liquidSlMethodName] liquidSlMethodName( "+$index+" ): parameter index out of range" );

    global string $gLiquidSlMethods[];
	string $ret = $gLiquidSlMethods[$index];
  liqPopIdent();
    return $ret;
}

global proc int liquidSlNumParams()
{
  liqPushIdent();
	liqlog("liquidSlNumParams(...)");
    global int $gLiquidSlNumParams;
    if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlNumParams] no shader set" );
  liqPopIdent();
    return $gLiquidSlNumParams;
}

global proc string liquidSlParamName( int $index )
{
  liqPushIdent();
	liqlog("liquidSlParamName(...)");
    global int $gLiquidSlNumParams;

    if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlParamName] no shader set" );

    if ( $index < 0 ||
         $index >= $gLiquidSlNumParams )
        error( "[liquidSlParamName] liquidSlParamName( "+$index+" ): parameter index out of range" );

    global string $gLiquidSlParamNames[];
	string $ret = $gLiquidSlParamNames[$index];
  liqPopIdent();
    return $ret;
}

global proc int liquidSlParamIsOutput( int $index )
{
  liqPushIdent();
	liqlog("liquidSlParamIsOutput(...)");
  global int $gLiquidSlNumParams;

  if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlParamIsOutput] no shader set" );

  if ( $index < 0 ||
         $index >= $gLiquidSlNumParams )
        error( "[liquidSlParamIsOutput] liquidSlParamName( "+$index+" ): parameter index out of range" );

  global int    $gLiquidSlParamIsOutput[];
  int $ret = $gLiquidSlParamIsOutput[$index];
  liqPopIdent();
  return $ret;
}

global proc  string liquidSlParamDetail( int $index )
{
  liqPushIdent();
	liqlog("liquidSlParamDetail(...)");
    global int $gLiquidSlNumParams;

    if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlParamDetail] no shader set" );

    if ( $index < 0 ||
         $index >= $gLiquidSlNumParams )
        error( "[liquidSlParamDetail] liquidSlParamType: parameter index out of range" );

    global string $gLiquidSlParamDetails[];
	string $ret = $gLiquidSlParamDetails[$index];
  liqPopIdent();
    return $ret;
}

global proc  string liquidSlParamType( int $index )
{
  liqPushIdent();
	liqlog("liquidSlParamType(...)");
    global int $gLiquidSlNumParams;

    if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlParamType] no shader set" );

    if ( $index < 0 ||
         $index >= $gLiquidSlNumParams )
        error( "[liquidSlParamType] liquidSlParamType: parameter index out of range" );

    global string $gLiquidSlParamTypes[];
	string $ret = $gLiquidSlParamTypes[$index];
  liqPopIdent();
    return $ret;
}

// Convention, -1 means not an array, so as not
// to get confused with 0 sized (resizable) arrays
global proc int liquidSlParamArraySize( int $index )
{
  liqPushIdent();
	liqlog("liquidSlParamArraySize(...)");
    global int $gLiquidSlNumParams;

    if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlParamArraySize] no shader set" );

    if ( $index < 0 ||
         $index >= $gLiquidSlNumParams )
        error( "[liquidSlParamArraySize] liquidSlParamArraySize: parameter index out of range" );

    global int $gLiquidSlParamArraySizes[];
	int $ret = $gLiquidSlParamArraySizes[$index];
  liqPopIdent();
    return $ret;
}

global proc int liquidSlParamIsArray( int $index )
{
  liqPushIdent();
	liqlog("liquidSlParamIsArray(...)");
	global int $gLiquidSlNumParams;

    if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlParamIsArray] no shader set" );

    if ( $index < 0 ||
         $index >= $gLiquidSlNumParams )
        error( "[liquidSlParamIsArray] liquidSlParamArraySize: parameter index out of range" );

    global int $gLiquidSlParamArraySizes[];

	if ($gLiquidSlParamArraySizes[$index] < 0) {
  liqPopIdent();
		return 0;
	} else {
  liqPopIdent();
		return 1;
	}
}

global proc int liquidSlParamIsResizable( int $index )
{
  liqPushIdent();
	liqlog("liquidSlParamIsResizable(...)");
	global int $gLiquidSlNumParams;

    if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlParamIsResizable] no shader set" );

    if ( $index < 0 ||
         $index >= $gLiquidSlNumParams )
        error( "[liquidSlParamIsResizable] liquidSlParamArraySize: parameter index out of range" );

    global int $gLiquidSlParamArraySizes[];

	if ($gLiquidSlParamArraySizes[$index] == 0) {
  liqPopIdent();
		return 1;
	} else {
  liqPopIdent();
		return 0;
	}
}

global proc string liquidSlParamDefault( int $index )
{
  liqPushIdent();
	liqlog("liquidSlParamDefault(...)");
    global int $gLiquidSlNumParams;

    if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlParamDefault] no shader set" );

    if ( $index < 0 ||
         $index >= $gLiquidSlNumParams )
        error( "[liquidSlParamDefault] liquidSlParamDefault: parameter index out of range" );

    global string $gLiquidSlParamDefaults[];
	string $ret = $gLiquidSlParamDefaults[$index];
  liqPopIdent();
    return $ret;
}

global proc string liquidSlParamDefaultRaw( int $index )
{
  liqPushIdent();
	liqlog("liquidSlParamDefaultRaw(...)");
    global int $gLiquidSlNumParams;

    if ( $gLiquidSlNumParams == -1 )
        error( "[liquidSlParamDefaultRaw] no shader set" );

    if ( $index < 0 ||
         $index >= $gLiquidSlNumParams )
        error( "[liquidSlParamDefaultRaw] liquidSlParamDefault: parameter index out of range" );

    global string $gLiquidSlParamDefaults[];
    string $result = $gLiquidSlParamDefaults[$index];
    while( size( match("\"*, \"*", $result ) ) ) $result = substitute("\"*, \"*", $result, ":" );
    while( size( match("[<>{},\"]+", $result ) ) ) $result = substitute("[<>{},\"]+", $result, "" );
  liqPopIdent();
    return $result;
}

//
// Procedures for converting the string default returned
// by liquidSlParamDefault() into a native mel type
//

global proc string liquidSlDefaultToString( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToString(...)");
    // this gets rid of surrounding quotes
    string $val = eval( "string $foo_S = " + $default );
  liqPopIdent();
    return $val;
}

global proc string[] liquidSlDefaultToStringArray( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToStringArray(...)");
    string $val[] = eval( "string $foo_Sarray[] = " + $default );
  liqPopIdent();
    return $val;
}

global proc int liquidSlDefaultToBool( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToBool(...)");
    int $val = $default;
  liqPopIdent();
    return ($val > 0);
}

global proc int liquidSlDefaultToInt( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToInt(...)");
    int $val = $default;
  liqPopIdent();
    return $val;
}

global proc float liquidSlDefaultToFloat( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToFloat(...)");
    float $val = $default;
  liqPopIdent();
    return $val;
}

global proc float[] liquidSlDefaultToFloatArray( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToFloatArray(...)");
    float $val[] = eval( "float $foo_Farray[] = " + $default );
  liqPopIdent();
    return $val;
}

global proc vector liquidSlDefaultToVector( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToVector(...)");
    vector $val = $default;
  liqPopIdent();
    return $val;
}

global proc vector[] liquidSlDefaultToVectorArray( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToVectorArray("+$default+")");
	vector $val[] = eval("vector $foo_Varray[] =" + $default );
  liqPopIdent();
	return $val;
}

global proc matrix liquidSlDefaultToMatrix( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToMatrix(...)");
    // Hack since the assign-eval trick
    // doesn't work for matrices
    global matrix $_tmpMatrix[4][4];
    eval( "global matrix $_tmpMatrix[4][4];" +
          "$_tmpMatrix = " + $default );
  liqPopIdent();
    return $_tmpMatrix;
}
global proc matrix liquidSlDefaultToMatrixArray( string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToMatrixArray(...)");
	liqError("matrix array is not supported yet.");
//     // Hack since the assign-eval trick
//     // doesn't work for matrices
     global matrix $_tmpMatrix[4][4];
     eval( "global matrix $_tmpMatrix[4][4];" +
           "$_tmpMatrix = " + $default );
  liqPopIdent();
    return $_tmpMatrix;
}
// Depending on type, so we can build setAttr commands
global proc string liquidSlDefaultToType( string $type, int $array, string $default )
{
  liqPushIdent();
	liqlog("liquidSlDefaultToType(...)");
    string $result = "";
    
    switch ( $type ) {
    	case "shader":
		case "string":
			if ($array) {
				string $s[] = liquidSlDefaultToStringArray( $default );
				$result = stringArrayToString ($s, " ");
			} else {
				$result = liquidSlDefaultToString( $default );
			}
			break;
		case "float":
			if ($array) {
				float $f[] = liquidSlDefaultToFloatArray( $default );
				string $s[];
				int $nf = size($f);
				for ($i=0; $i<$nf; $i++) {
					$s[$i] = $f[$i];
				}
				$result = stringArrayToString ($s, " ");
			} else {
				$result = liquidSlDefaultToFloat( $default );
			}		
		break;
		case "color":
		case "point":
		case "vector":
		case "normal":
			if ($array) {
				vector $v[] = liquidSlDefaultToVectorArray( $default );
				string $s[];
				int $nf = size($v);
				for ($i=0; $i<$nf; $i++) {
					$s[$i] = $v[$i];
				}				
				$result = stringArrayToString ($s, " ");			
			} else {		
				vector $v = liquidSlDefaultToVector( $default );
				$result = $v;
			}
			break;
		case "matrix":
			if ($array) {
				error ("[liquidSlDefaultToType] don't know how to convert to matrix array: "+$default);		
			} else {		
				matrix $m[4][4] = liquidSlDefaultToMatrix( $default );
				$result = liquidSlMatrixToString($m);
			}
			break;		
		default:
			error ("[liquidSlDefaultToType] unknown type "+$type);
			break;
	}
	
  liqPopIdent();
	return $result;
}

global proc string[] liquidSlAllParamNames()
{
  global string $gLiquidSlParamNames[];
  return $gLiquidSlParamNames;
}

global proc string[] liquidSlAllParamTypes()
{
  global string $gLiquidSlParamTypes[];
  return $gLiquidSlParamTypes;
}

global proc string[] liquidSlAllParamDetails()
{
  global string $gLiquidSlParamDetails[];
  return $gLiquidSlParamDetails;
}

global proc int[] liquidSlAllParamArraySizes()
{
  global int $gLiquidSlParamArraySizes[];
  return $gLiquidSlParamArraySizes;
}
global proc string[] liquidSlAllParamDefaultsRaw()
{
  liqPushIdent();
  global string $gLiquidSlParamDefaults[];
  string $result[];
  int $i;
  for ( $i=0; $i<size( $gLiquidSlParamDefaults ); $i++ ) {
    $result[$i] = $gLiquidSlParamDefaults[$i];
    while( size( match("\"*, \"*", $result[$i] ) ) ) $result[$i] = substitute("\"*, \"*", $result[$i], ":" );
    while( size( match("[<>{},\"]+", $result[$i] ) ) ) $result[$i] = substitute("[<>{},\"]+", $result[$i], "" );
  }
  liqPopIdent();
  return $result;
}


//
// Procedure to print information about a shader
// and its parameters.  Useful as an example of
// how to use the other procedures in this file.
//

global proc liquidSlInfo( string $shaderFile )
{
	liqlog("liquidSlInfo("+$shaderFile+")");
    liquidSlSetShader( $shaderFile );
    string $shaderType = liquidSlShaderType();
    print( "shaderType = " + $shaderType + "\n" );

    int $numParams = liquidSlNumParams();
    print( "numParams = " + $numParams + "\n" );

    int $i = 0;
    for ( ; $i < $numParams; $i++ )
    {
        string $paramName = liquidSlParamName( $i );
        string $paramType = liquidSlParamType( $i );
        string $paramDefault = liquidSlParamDefault( $i );
        int $paramArraySize = liquidSlParamArraySize( $i );

        // Print this parameters info
        print( $i + ": " + $paramType + " " + $paramName );
        if ( $paramArraySize > 0 )
            print( "[" + $paramArraySize + "]" );
        print( " = " + $paramDefault + "\n" );


        // The following doesn't do anything, it just
        // demonstrates how to convert the $paramDefault
        // string into a usable mel data type.
        // Note that shader parameters of types color,
        // point, vector, and normal are all represented
        // as mel vectors.

        if ( $paramArraySize == 0 )
        {
            switch ( $paramType )
            {
            case "shader":            
            case "string":
                string $s = liquidSlDefaultToString( $paramDefault );
                break;
            case "float":
                float $f = liquidSlDefaultToFloat( $paramDefault );
                break;
            case "color":
            case "point":
            case "vector":
            case "normal":
                vector $v = liquidSlDefaultToVector( $paramDefault );
                break;
            case "matrix":
                matrix $m[4][4] = liquidSlDefaultToMatrix( $paramDefault );
                break;
            }
        }

        // Likewise for array defaults
    }
}

