global int $g_IndentNum = 0;
global int $g_ShowAELog = 1;

global int $g_LogFileId = 0;
global string $g_LogFileFullPath="d:/liquidDebug.log";
global proc openLogFile()
{
	global int $g_LogFileId;
    global string $g_LogFileFullPath;
	
	$g_LogFileId=`fopen $g_LogFileFullPath "w"`;
	if($g_LogFileId == 0){
		error ("open "+$g_LogFileFullPath+" fail.");
	}
}
global proc closeLogFile()
{
	global int $g_LogFileId;
	fclose $g_LogFileId;
	$g_LogFileId = 0;
}

proc log2(string $prefix, string $log)
{
	global int $g_IndentNum;
	global int $g_LogFileId;

	string $indent;
	int $i=0;
	for(; $i<$g_IndentNum; ++$i){
		$indent +="    ";
	}

	if( $g_LogFileId == 0 ){// log file is not open.
		print($indent + $prefix +">"+ $log +"\n");
	}else{
		fprint $g_LogFileId ($indent + $prefix +">"+ $log +"\n");
	}


}

global proc liqlog(string $log)
{
	log2("", $log);
}

global proc liqDebug(string $log)
{
	log2("DEBUG", $log);
}
global proc liqError(string $log)
{
	log2("ERROR", $log);
}
global proc liqWarn(string $log)
{
	log2("WARNNING", $log);
}
global proc liqTrace(string $log)
{
	trace($log);
}
global proc liqAssert(int $condition, string $msg)
{
	if($condition == false){
		warning ($msg +"\n");
	}
}

global proc liqPushIdent()
{
	global int $g_IndentNum;
	$g_IndentNum++;
}
global proc liqPopIdent()
{
	global int $g_IndentNum;
	$g_IndentNum--;
}

global proc liqAElog(string $log)
{
	global int $g_ShowAELog;

	if($g_ShowAELog){
		log2("", $log);
	}
}
//
global proc string xxu_getSingletonNode(string $type)
{
	liqPushIdent();
	liqlog("xxu_getSingletonNode("+$type+")");

	string $instance = $type +"1";
	if(`objExists $instance`==0)
	{
		liqlog("createNode "+$type+":"+$instance+"\n");
		$instance = `createNode $type`;
	}else{
		liqlog($instance +" already exists.\n");
	}

	liqPopIdent();	
	return $instance;
}
//
global proc string xxu_getSingletonNode2(string $type, string $name)
{	
	liqPushIdent();
	liqlog("xxu_getSingletonNode2("+$type+","+$name+")");

	if(`objExists $name`==0)
	{
		$instance = `createNode $type -n $name`;
	}
	liqPopIdent();	
	return $name;
}
//
global proc xxu_assertmy(int $condition, string $msg)
{
	if($condition == false){
		liqWarn($msg +"\n");
	}
}
//
global proc string[] xxu_getShapes( string $xform )
{
	liqPushIdent();
	liqlog("xxu_getShapes("+$xform+")");

   string $shapes[];

   $shapes[0] = $xform;

   if ( "transform" == `nodeType $xform` )
   // If given node is not a transform, assume it is a shape
   // and pass it through
   {
      $shapes = `listRelatives -fullPath -shapes -ni $xform`;
   }
	liqPopIdent();	
   return $shapes;
}
global proc string xxu_getShape( string $xform )
{
	liqPushIdent();
	liqlog("xxu_getShape("+$xform+")");

	string $shapes[];
	$shapes = xxu_getShapes($xform);
	
	liqPopIdent();	
	return $shapes[0];
}
//
global proc string xxu_getTransform( string $shape )
{
	liqPushIdent();
	liqlog("xxu_getTransform("+$shape+")");

   string $transform = "";

   if ( "transform" != `nodeType $shape` )
   // If given node is already a transform, just pass on through
   {
      string $parents[] = `listRelatives -fullPath -parent $shape`;
      $transform = $parents[0];
   }

	liqPopIdent();	
   return $transform;
}
// assert window 0
global proc int liqAssert0(string $msg )
{
	string $ret= `confirmDialog -message ($msg+"\n\nNOTE:\nPress <ESC> is the same as press \"Confirm\"")`;
	if($ret=="Confirm"){
		return 1;
	}else if($ret=="dismiss"){
		return 0;
	}else{
		error ("liqAssert("+$msg+") return unkown value:"+$ret);
	}
}
// assert window 1
global proc int liqAssert1(string $title, string $msg, string $bYes )
{
	string $ret= `confirmDialog 
				-title $title 
				-message ($msg+"\n\nNOTE:\nPress <ESC> is the same as press \""+$bYes+"\"")
				-button $bYes 
				//-defaultButton $bYes
				//-cancelButton  "liqAssert_dismiss" 
				-dismissString "liqAssert_dismiss"`;
	if($ret==$bYes){
		return 1;
	}else if($ret=="liqAssert_dismiss"){
		return 0;
	}else{
		error ("liqAssert("+$msg+") return unkown value:"+$ret);
	}
}
// assert window 2
global proc int liqAssert2(string $title, string $msg, string $bYes, string $bNo )
{
	string $ret= `confirmDialog 
				-title $title 
				-message $msg
				-button $bYes 
				-button $bNo 
				-defaultButton $bYes
				-cancelButton $bNo 
				-dismissString $bNo`;
	if($ret==$bYes){
		return 1;
	}else if($ret==$bNo){
		return 0;
	}else{
		error ("liqAssert("+$msg+") return unkown value:"+$ret);
	}
}

// myDeleteAttr() always lead a crash on my machine :(
global proc myDeleteAttr(string $node, string $attr, int $loop)
{
	liqPushIdent();
	liqlog("myDeleteAttr("+$node+","+$attr+","+$loop+")");

	string $plug = $node+"."+$attr;

	liqlog("before  renameAttr "+$plug+" \"TO_BE_DELETED\")");
	if ( catch( `renameAttr $plug "TO_BE_DELETED"` ) ){
		liqError("renameAttr "+$plug+" \"TO_BE_DELETED\")");
	}

	//NOTE: without this for-loop, maya may lead to a crash.
	for($i=0; $i<$loop; $i++){ print("+");}print("\n");

	liqlog("before  deleteAttr \""+$node+".TO_BE_DELETED\"");
	if ( catch( `deleteAttr ($node+".TO_BE_DELETED")` ) ){
		liqError("deleteAttr \""+$node+".TO_BE_DELETED\"");
	}
	
	liqPopIdent();
}
