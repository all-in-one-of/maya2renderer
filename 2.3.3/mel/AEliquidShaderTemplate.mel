//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the
// "License"); you may not use this file except in compliance with the License. You may
// obtain a copy of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific
// language governing rights and limitations under the License.
//
// The Original Code is the Liquid Rendering Toolkit.
//
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved.
//
// Contributor(s): philippe leprince.
//
//
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:
//
//  Procedure Name:
//
//
//  Description: Attribute Editor Template for the liquidShader node
//
source xxliquidutility.mel;


global proc liquidShaderNodesCBNew(string $node_attr)
{
	liqPushIdent();
	liqlog("liquidShaderNodesCBNew("+$node_attr+")");
	
	//node.attribute => {"name", "attribute"}
	string $names[] = stringToStringArray($node_attr, ".");

	string $rnd = liqGetRendererName();
	string $fn;
	$fn = "AEliquidShaderTemplate_"+$rnd+"(\""+$names[0]+"\", \""+$names[1]+"\")";
	eval($fn);

	liqPopIdent();
}
global proc liquidShaderNodesCBReplace(string $node_attr)
{
	liqPushIdent();
	liqlog("liquidShaderNodesCBReplace("+$node_attr+")");

	//node.attribute => {"name", "attribute"}
	string $names[] = stringToStringArray($node_attr, ".");

	string $rnd = liqGetRendererName();
	string $fn;
	$fn = "AEliquidShaderTemplate_"+$rnd+"(\""+$names[0]+"\", \""+$names[1]+"\")";
	eval($fn);

	liqPopIdent();
}
global proc AEliquidShaderTemplate( string $nodeName )
{
  liqPushIdent();
  liqAElog("AEliquidShaderTemplate("+$nodeName+")");

  layout -e -vis false "AEcontrolFormLayout";

  editorTemplate -callCustom ("liquidPreviewSwatchNew "+$nodeName) ("liquidPreviewSwatchReplace "+$nodeName) "message";

  editorTemplate -beginScrollLayout;
    //--------------------------------------------------
    editorTemplate -ccu ("liquidShaderPickerNew "+$nodeName) ("liquidShaderPickerReplace "+$nodeName) "rmanShaderLong";
	//--------------------------------------------------
    editorTemplate -beginLayout "Parameters" -collapse 0;
      editorTemplate -ccu "liquidShaderNodesParamsNew "  "liquidShaderNodesParamsReplace " "rmanShaderLong";
    editorTemplate -endLayout;
	//--------------------------------------------------
	//editorTemplate -beginLayout "ForCurrentRenderer" -collapse 0;
	//	editorTemplate -ccu ("liquidShaderNodesCBNew ")  ("liquidShaderNodesCBReplace ") "rmanShaderLong";
	//editorTemplate -endLayout;
	$node_attr = $nodeName+".rmanShaderLong";
	string $names[] = stringToStringArray($node_attr, ".");
	string $rnd = liqGetRendererName();
	string $fn;
	$fn = "AEliquidShaderTemplate_"+$rnd+"(\""+$names[0]+"\", \""+$names[1]+"\")";
	
	editorTemplate -beginLayout $rnd;
		eval($fn);
	editorTemplate -endLayout;
	//--------------------------------------------------
    editorTemplate -addExtraControls;
	//--------------------------------------------------
  editorTemplate -endScrollLayout;

  layout -e -vis true "AEcontrolFormLayout";

  liqPopIdent();
}

